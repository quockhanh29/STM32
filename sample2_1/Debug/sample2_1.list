
sample2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000161c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001758  08001758  00011758  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001774  08001774  00011774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001778  08001778  00011778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800177c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b0  20000004  08001780  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000b4  08001780  000200b4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cad4  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e1a  00000000  00000000  0002cb01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022d1  00000000  00000000  0002e91b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004c0  00000000  00000000  00030bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000890  00000000  00000000  000310b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003583  00000000  00000000  00031940  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002106  00000000  00000000  00034ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00036fc9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000b54  00000000  00000000  00037048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08001740 	.word	0x08001740

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08001740 	.word	0x08001740

0800017c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_InitTick+0x24>)
{
 800017e:	b510      	push	{r4, lr}
 8000180:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000188:	fbb0 f0f3 	udiv	r0, r0, r3
 800018c:	f000 f9d4 	bl	8000538 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000190:	2200      	movs	r2, #0
 8000192:	4621      	mov	r1, r4
 8000194:	f04f 30ff 	mov.w	r0, #4294967295
 8000198:	f000 f99a 	bl	80004d0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800019c:	2000      	movs	r0, #0
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a6:	2003      	movs	r0, #3
 80001a8:	f000 f980 	bl	80004ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f7ff ffe5 	bl	800017c <HAL_InitTick>
  HAL_MspInit();
 80001b2:	f001 f991 	bl	80014d8 <HAL_MspInit>
}
 80001b6:	2000      	movs	r0, #0
 80001b8:	bd08      	pop	{r3, pc}
	...

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001bc:	4a02      	ldr	r2, [pc, #8]	; (80001c8 <HAL_IncTick+0xc>)
 80001be:	6813      	ldr	r3, [r2, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000020 	.word	0x20000020

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000020 	.word	0x20000020

080001d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80001d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80001da:	4604      	mov	r4, r0
 80001dc:	b908      	cbnz	r0, 80001e2 <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 80001de:	2001      	movs	r0, #1
 80001e0:	e092      	b.n	8000308 <HAL_ADC_Init+0x130>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80001e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80001e4:	b973      	cbnz	r3, 8000204 <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 80001e6:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 80001e8:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80001ec:	4b54      	ldr	r3, [pc, #336]	; (8000340 <HAL_ADC_Init+0x168>)
 80001ee:	6a1a      	ldr	r2, [r3, #32]
 80001f0:	f042 0201 	orr.w	r2, r2, #1
 80001f4:	621a      	str	r2, [r3, #32]
 80001f6:	6a1b      	ldr	r3, [r3, #32]
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8000200:	f001 f990 	bl	8001524 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000204:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000206:	06db      	lsls	r3, r3, #27
 8000208:	d4e9      	bmi.n	80001de <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 800020a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800020c:	4a4d      	ldr	r2, [pc, #308]	; (8000344 <HAL_ADC_Init+0x16c>)
    ADC_STATE_CLR_SET(hadc->State,
 800020e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000212:	f023 0302 	bic.w	r3, r3, #2
 8000216:	f043 0302 	orr.w	r3, r3, #2
 800021a:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800021c:	6853      	ldr	r3, [r2, #4]
 800021e:	6861      	ldr	r1, [r4, #4]
 8000220:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000224:	430b      	orrs	r3, r1
 8000226:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800022c:	fa90 f0a0 	rbit	r0, r0
 8000230:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000232:	fab0 f080 	clz	r0, r0
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8000236:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000238:	fa93 f3a3 	rbit	r3, r3
 800023c:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000240:	6965      	ldr	r5, [r4, #20]
 8000242:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8000244:	fa01 f303 	lsl.w	r3, r1, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000248:	432a      	orrs	r2, r5
 800024a:	6a25      	ldr	r5, [r4, #32]
 800024c:	432a      	orrs	r2, r5
 800024e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000250:	fa05 f000 	lsl.w	r0, r5, r0
 8000254:	4302      	orrs	r2, r0
                hadc->Init.ChannelsBank                              |
 8000256:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000258:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800025a:	6925      	ldr	r5, [r4, #16]
 800025c:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800025e:	bf1c      	itt	ne
 8000260:	6ba0      	ldrne	r0, [r4, #56]	; 0x38
 8000262:	4302      	orrne	r2, r0
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000264:	6820      	ldr	r0, [r4, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000266:	bf18      	it	ne
 8000268:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800026a:	6802      	ldr	r2, [r0, #0]
 800026c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8000270:	d123      	bne.n	80002ba <HAL_ADC_Init+0xe2>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000272:	69a6      	ldr	r6, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000274:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000276:	4333      	orrs	r3, r6
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000278:	68a6      	ldr	r6, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800027a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800027e:	ea46 0607 	orr.w	r6, r6, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000282:	d043      	beq.n	800030c <HAL_ADC_Init+0x134>
 8000284:	2d01      	cmp	r5, #1
 8000286:	bf08      	it	eq
 8000288:	f44f 7280 	moveq.w	r2, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 800028c:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800028e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000290:	2e01      	cmp	r6, #1
 8000292:	d10d      	bne.n	80002b0 <HAL_ADC_Init+0xd8>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000294:	2900      	cmp	r1, #0
 8000296:	d13b      	bne.n	8000310 <HAL_ADC_Init+0x138>
 8000298:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800029c:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002a0:	fab1 f681 	clz	r6, r1
 80002a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80002a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80002aa:	3901      	subs	r1, #1
 80002ac:	40b1      	lsls	r1, r6
 80002ae:	430a      	orrs	r2, r1
        MODIFY_REG(hadc->Instance->CR1,
 80002b0:	6846      	ldr	r6, [r0, #4]
 80002b2:	4925      	ldr	r1, [pc, #148]	; (8000348 <HAL_ADC_Init+0x170>)
 80002b4:	4031      	ands	r1, r6
 80002b6:	430a      	orrs	r2, r1
 80002b8:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 80002ba:	6881      	ldr	r1, [r0, #8]
 80002bc:	4a23      	ldr	r2, [pc, #140]	; (800034c <HAL_ADC_Init+0x174>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002be:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 80002c2:	ea02 0201 	and.w	r2, r2, r1
 80002c6:	ea42 0203 	orr.w	r2, r2, r3
 80002ca:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002cc:	d001      	beq.n	80002d2 <HAL_ADC_Init+0xfa>
 80002ce:	2d01      	cmp	r5, #1
 80002d0:	d127      	bne.n	8000322 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80002d2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80002d4:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80002d8:	fa92 f2a2 	rbit	r2, r2
 80002dc:	fab2 f182 	clz	r1, r2
 80002e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002e2:	3a01      	subs	r2, #1
 80002e4:	408a      	lsls	r2, r1
 80002e6:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 80002ea:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 80002ec:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80002ee:	6881      	ldr	r1, [r0, #8]
 80002f0:	4a17      	ldr	r2, [pc, #92]	; (8000350 <HAL_ADC_Init+0x178>)
 80002f2:	400a      	ands	r2, r1
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d118      	bne.n	800032a <HAL_ADC_Init+0x152>
      ADC_CLEAR_ERRORCODE(hadc);
 80002f8:	2000      	movs	r0, #0
 80002fa:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80002fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80002fe:	f023 0303 	bic.w	r3, r3, #3
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000308:	b003      	add	sp, #12
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800030c:	462a      	mov	r2, r5
 800030e:	e7bd      	b.n	800028c <HAL_ADC_Init+0xb4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000310:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000312:	f041 0120 	orr.w	r1, r1, #32
 8000316:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000318:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800031a:	f041 0101 	orr.w	r1, r1, #1
 800031e:	6521      	str	r1, [r4, #80]	; 0x50
 8000320:	e7c6      	b.n	80002b0 <HAL_ADC_Init+0xd8>
      MODIFY_REG(hadc->Instance->SQR1,
 8000322:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000324:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000328:	e7e0      	b.n	80002ec <HAL_ADC_Init+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 800032a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800032c:	f023 0312 	bic.w	r3, r3, #18
 8000330:	f043 0310 	orr.w	r3, r3, #16
 8000334:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000336:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6523      	str	r3, [r4, #80]	; 0x50
 800033e:	e74e      	b.n	80001de <HAL_ADC_Init+0x6>
 8000340:	40023800 	.word	0x40023800
 8000344:	40012700 	.word	0x40012700
 8000348:	fcfc16ff 	.word	0xfcfc16ff
 800034c:	c0fff189 	.word	0xc0fff189
 8000350:	bf80fffe 	.word	0xbf80fffe

08000354 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8000354:	2300      	movs	r3, #0
{
 8000356:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8000358:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800035a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800035e:	2b01      	cmp	r3, #1
 8000360:	f000 809c 	beq.w	800049c <HAL_ADC_ConfigChannel+0x148>
 8000364:	2301      	movs	r3, #1
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000366:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000368:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 800036c:	2d06      	cmp	r5, #6
 800036e:	6804      	ldr	r4, [r0, #0]
 8000370:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000374:	680a      	ldr	r2, [r1, #0]
 8000376:	d821      	bhi.n	80003bc <HAL_ADC_ConfigChannel+0x68>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000378:	442b      	add	r3, r5
 800037a:	251f      	movs	r5, #31
 800037c:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800037e:	3b05      	subs	r3, #5
 8000380:	409d      	lsls	r5, r3
 8000382:	ea26 0505 	bic.w	r5, r6, r5
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	432b      	orrs	r3, r5
 800038c:	6423      	str	r3, [r4, #64]	; 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800038e:	2a09      	cmp	r2, #9
 8000390:	d84a      	bhi.n	8000428 <HAL_ADC_ConfigChannel+0xd4>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8000392:	2507      	movs	r5, #7
 8000394:	6963      	ldr	r3, [r4, #20]
 8000396:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800039a:	6889      	ldr	r1, [r1, #8]
 800039c:	40b5      	lsls	r5, r6
 800039e:	ea23 0305 	bic.w	r3, r3, r5
 80003a2:	40b1      	lsls	r1, r6
 80003a4:	430b      	orrs	r3, r1
 80003a6:	6163      	str	r3, [r4, #20]
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80003a8:	f1a2 0310 	sub.w	r3, r2, #16
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d95d      	bls.n	800046c <HAL_ADC_ConfigChannel+0x118>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80003b0:	2300      	movs	r3, #0
 80003b2:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80003b6:	4618      	mov	r0, r3
}
 80003b8:	b002      	add	sp, #8
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 80003bc:	2d0c      	cmp	r5, #12
 80003be:	d80b      	bhi.n	80003d8 <HAL_ADC_ConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SQR4,
 80003c0:	442b      	add	r3, r5
 80003c2:	251f      	movs	r5, #31
 80003c4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 80003c6:	3b23      	subs	r3, #35	; 0x23
 80003c8:	409d      	lsls	r5, r3
 80003ca:	ea26 0505 	bic.w	r5, r6, r5
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	432b      	orrs	r3, r5
 80003d4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80003d6:	e7da      	b.n	800038e <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 80003d8:	2d12      	cmp	r5, #18
 80003da:	d80b      	bhi.n	80003f4 <HAL_ADC_ConfigChannel+0xa0>
    MODIFY_REG(hadc->Instance->SQR3,
 80003dc:	442b      	add	r3, r5
 80003de:	251f      	movs	r5, #31
 80003e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80003e2:	3b41      	subs	r3, #65	; 0x41
 80003e4:	409d      	lsls	r5, r3
 80003e6:	ea26 0505 	bic.w	r5, r6, r5
 80003ea:	fa02 f303 	lsl.w	r3, r2, r3
 80003ee:	432b      	orrs	r3, r5
 80003f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80003f2:	e7cc      	b.n	800038e <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 80003f4:	2d18      	cmp	r5, #24
 80003f6:	d80b      	bhi.n	8000410 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR2,
 80003f8:	442b      	add	r3, r5
 80003fa:	251f      	movs	r5, #31
 80003fc:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80003fe:	3b5f      	subs	r3, #95	; 0x5f
 8000400:	409d      	lsls	r5, r3
 8000402:	ea26 0505 	bic.w	r5, r6, r5
 8000406:	fa02 f303 	lsl.w	r3, r2, r3
 800040a:	432b      	orrs	r3, r5
 800040c:	6363      	str	r3, [r4, #52]	; 0x34
 800040e:	e7be      	b.n	800038e <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 8000410:	442b      	add	r3, r5
 8000412:	251f      	movs	r5, #31
 8000414:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8000416:	3b7d      	subs	r3, #125	; 0x7d
 8000418:	409d      	lsls	r5, r3
 800041a:	ea26 0505 	bic.w	r5, r6, r5
 800041e:	fa02 f303 	lsl.w	r3, r2, r3
 8000422:	432b      	orrs	r3, r5
 8000424:	6323      	str	r3, [r4, #48]	; 0x30
 8000426:	e7b2      	b.n	800038e <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8000428:	2a13      	cmp	r2, #19
 800042a:	d80d      	bhi.n	8000448 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SMPR2,
 800042c:	2607      	movs	r6, #7
 800042e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8000432:	6923      	ldr	r3, [r4, #16]
 8000434:	3d1e      	subs	r5, #30
 8000436:	6889      	ldr	r1, [r1, #8]
 8000438:	40ae      	lsls	r6, r5
 800043a:	ea23 0306 	bic.w	r3, r3, r6
 800043e:	fa01 f505 	lsl.w	r5, r1, r5
 8000442:	432b      	orrs	r3, r5
 8000444:	6123      	str	r3, [r4, #16]
 8000446:	e7af      	b.n	80003a8 <HAL_ADC_ConfigChannel+0x54>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8000448:	2a1a      	cmp	r2, #26
 800044a:	d80d      	bhi.n	8000468 <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR1,
 800044c:	2607      	movs	r6, #7
 800044e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8000452:	68e3      	ldr	r3, [r4, #12]
 8000454:	3d3c      	subs	r5, #60	; 0x3c
 8000456:	6889      	ldr	r1, [r1, #8]
 8000458:	40ae      	lsls	r6, r5
 800045a:	ea23 0306 	bic.w	r3, r3, r6
 800045e:	fa01 f505 	lsl.w	r5, r1, r5
 8000462:	432b      	orrs	r3, r5
 8000464:	60e3      	str	r3, [r4, #12]
 8000466:	e79f      	b.n	80003a8 <HAL_ADC_ConfigChannel+0x54>
  __ASM volatile ("nop");
 8000468:	bf00      	nop
 800046a:	e79d      	b.n	80003a8 <HAL_ADC_ConfigChannel+0x54>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_ADC_ConfigChannel+0x14c>)
 800046e:	6859      	ldr	r1, [r3, #4]
 8000470:	0209      	lsls	r1, r1, #8
 8000472:	d49d      	bmi.n	80003b0 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000474:	6859      	ldr	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000476:	2a10      	cmp	r2, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000478:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800047c:	6059      	str	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800047e:	d197      	bne.n	80003b0 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <HAL_ADC_ConfigChannel+0x150>)
 8000482:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <HAL_ADC_ConfigChannel+0x154>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	fbb3 f2f2 	udiv	r2, r3, r2
 800048a:	230a      	movs	r3, #10
 800048c:	4353      	muls	r3, r2
            wait_loop_index--;
 800048e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8000490:	9b01      	ldr	r3, [sp, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d08c      	beq.n	80003b0 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 8000496:	9b01      	ldr	r3, [sp, #4]
 8000498:	3b01      	subs	r3, #1
 800049a:	e7f8      	b.n	800048e <HAL_ADC_ConfigChannel+0x13a>
  __HAL_LOCK(hadc);
 800049c:	2002      	movs	r0, #2
 800049e:	e78b      	b.n	80003b8 <HAL_ADC_ConfigChannel+0x64>
 80004a0:	40012700 	.word	0x40012700
 80004a4:	20000000 	.word	0x20000000
 80004a8:	000f4240 	.word	0x000f4240

080004ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004ac:	4a07      	ldr	r2, [pc, #28]	; (80004cc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80004ae:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004b0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80004b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004ba:	041b      	lsls	r3, r3, #16
 80004bc:	0c1b      	lsrs	r3, r3, #16
 80004be:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80004c6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80004c8:	60d3      	str	r3, [r2, #12]
 80004ca:	4770      	bx	lr
 80004cc:	e000ed00 	.word	0xe000ed00

080004d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d0:	4b17      	ldr	r3, [pc, #92]	; (8000530 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	68dc      	ldr	r4, [r3, #12]
 80004d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004e0:	2b04      	cmp	r3, #4
 80004e2:	bf28      	it	cs
 80004e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004e6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004e8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ec:	bf98      	it	ls
 80004ee:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004f0:	fa05 f303 	lsl.w	r3, r5, r3
 80004f4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004f8:	bf88      	it	hi
 80004fa:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004fc:	4019      	ands	r1, r3
 80004fe:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000500:	fa05 f404 	lsl.w	r4, r5, r4
 8000504:	3c01      	subs	r4, #1
 8000506:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000508:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800050a:	ea42 0201 	orr.w	r2, r2, r1
 800050e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000512:	bfaf      	iteee	ge
 8000514:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000518:	4b06      	ldrlt	r3, [pc, #24]	; (8000534 <HAL_NVIC_SetPriority+0x64>)
 800051a:	f000 000f 	andlt.w	r0, r0, #15
 800051e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000520:	bfa5      	ittet	ge
 8000522:	b2d2      	uxtbge	r2, r2
 8000524:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000528:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800052e:	bd30      	pop	{r4, r5, pc}
 8000530:	e000ed00 	.word	0xe000ed00
 8000534:	e000ed14 	.word	0xe000ed14

08000538 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000538:	3801      	subs	r0, #1
 800053a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800053e:	d20a      	bcs.n	8000556 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000540:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000546:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000548:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800054c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800054e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000550:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000556:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	e000e010 	.word	0xe000e010
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000564:	2300      	movs	r3, #0
{ 
 8000566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800056a:	4a62      	ldr	r2, [pc, #392]	; (80006f4 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 800056c:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000570:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80006fc <HAL_GPIO_Init+0x198>
{ 
 8000574:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000576:	fa38 f403 	lsrs.w	r4, r8, r3
 800057a:	d102      	bne.n	8000582 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 800057c:	b005      	add	sp, #20
 800057e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000582:	2401      	movs	r4, #1
 8000584:	409c      	lsls	r4, r3
    if(iocurrent)
 8000586:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800058a:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 800058c:	f000 80a7 	beq.w	80006de <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000590:	684c      	ldr	r4, [r1, #4]
 8000592:	f024 0a10 	bic.w	sl, r4, #16
 8000596:	f1ba 0f02 	cmp.w	sl, #2
 800059a:	d116      	bne.n	80005ca <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800059c:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 80005a0:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80005a4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80005a8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80005ac:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80005b0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80005b4:	fa0e fe0b 	lsl.w	lr, lr, fp
 80005b8:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80005bc:	690d      	ldr	r5, [r1, #16]
 80005be:	fa05 f50b 	lsl.w	r5, r5, fp
 80005c2:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 80005c6:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80005ca:	2503      	movs	r5, #3
 80005cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005d0:	fa05 f50c 	lsl.w	r5, r5, ip
 80005d4:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 80005d6:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80005da:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80005de:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80005e2:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005e6:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80005ea:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005ee:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 80005f2:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005f6:	d816      	bhi.n	8000626 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 80005f8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80005fc:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80005fe:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000602:	fa07 fa0c 	lsl.w	sl, r7, ip
 8000606:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800060a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800060e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000612:	9f01      	ldr	r7, [sp, #4]
 8000614:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000618:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800061c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000620:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000624:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000626:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000628:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800062a:	688f      	ldr	r7, [r1, #8]
 800062c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000630:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000632:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000634:	00e5      	lsls	r5, r4, #3
 8000636:	d552      	bpl.n	80006de <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000638:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063c:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000640:	f023 0703 	bic.w	r7, r3, #3
 8000644:	f045 0501 	orr.w	r5, r5, #1
 8000648:	f8c9 5020 	str.w	r5, [r9, #32]
 800064c:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000650:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000654:	f005 0501 	and.w	r5, r5, #1
 8000658:	9503      	str	r5, [sp, #12]
 800065a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800065e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000664:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000668:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800066a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800066e:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000672:	4d21      	ldr	r5, [pc, #132]	; (80006f8 <HAL_GPIO_Init+0x194>)
 8000674:	42a8      	cmp	r0, r5
 8000676:	d034      	beq.n	80006e2 <HAL_GPIO_Init+0x17e>
 8000678:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800067c:	42a8      	cmp	r0, r5
 800067e:	d032      	beq.n	80006e6 <HAL_GPIO_Init+0x182>
 8000680:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000684:	42a8      	cmp	r0, r5
 8000686:	d030      	beq.n	80006ea <HAL_GPIO_Init+0x186>
 8000688:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800068c:	42a8      	cmp	r0, r5
 800068e:	d02e      	beq.n	80006ee <HAL_GPIO_Init+0x18a>
 8000690:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000694:	42a8      	cmp	r0, r5
 8000696:	bf14      	ite	ne
 8000698:	2505      	movne	r5, #5
 800069a:	2504      	moveq	r5, #4
 800069c:	fa05 f50c 	lsl.w	r5, r5, ip
 80006a0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80006a4:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006a6:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 80006a8:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006aa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006ae:	bf0c      	ite	eq
 80006b0:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80006b2:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80006b4:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80006b6:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006b8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006bc:	bf0c      	ite	eq
 80006be:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80006c0:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80006c2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80006c4:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006c6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006ca:	bf0c      	ite	eq
 80006cc:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80006ce:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80006d0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80006d2:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006d4:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006d6:	bf54      	ite	pl
 80006d8:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 80006da:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80006dc:	60d5      	str	r5, [r2, #12]
    position++;
 80006de:	3301      	adds	r3, #1
 80006e0:	e749      	b.n	8000576 <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006e2:	2500      	movs	r5, #0
 80006e4:	e7da      	b.n	800069c <HAL_GPIO_Init+0x138>
 80006e6:	2501      	movs	r5, #1
 80006e8:	e7d8      	b.n	800069c <HAL_GPIO_Init+0x138>
 80006ea:	2502      	movs	r5, #2
 80006ec:	e7d6      	b.n	800069c <HAL_GPIO_Init+0x138>
 80006ee:	2503      	movs	r5, #3
 80006f0:	e7d4      	b.n	800069c <HAL_GPIO_Init+0x138>
 80006f2:	bf00      	nop
 80006f4:	40010400 	.word	0x40010400
 80006f8:	40020000 	.word	0x40020000
 80006fc:	40023800 	.word	0x40023800

08000700 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000700:	6903      	ldr	r3, [r0, #16]
 8000702:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000704:	bf14      	ite	ne
 8000706:	2001      	movne	r0, #1
 8000708:	2000      	moveq	r0, #0
 800070a:	4770      	bx	lr

0800070c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800070c:	b10a      	cbz	r2, 8000712 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800070e:	6181      	str	r1, [r0, #24]
 8000710:	4770      	bx	lr
 8000712:	0409      	lsls	r1, r1, #16
 8000714:	e7fb      	b.n	800070e <HAL_GPIO_WritePin+0x2>

08000716 <LCD_WaitForSynchro>:
  * @brief  Waits until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8000716:	b538      	push	{r3, r4, r5, lr}
 8000718:	4604      	mov	r4, r0
  uint32_t tickstart = 0x00; 
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 800071a:	f7ff fd57 	bl	80001cc <HAL_GetTick>
 800071e:	4605      	mov	r5, r0

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	069b      	lsls	r3, r3, #26
 8000726:	d501      	bpl.n	800072c <LCD_WaitForSynchro+0x16>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8000728:	2000      	movs	r0, #0
}
 800072a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 800072c:	f7ff fd4e 	bl	80001cc <HAL_GetTick>
 8000730:	1b40      	subs	r0, r0, r5
 8000732:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000736:	d9f3      	bls.n	8000720 <LCD_WaitForSynchro+0xa>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8000738:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800073a:	2003      	movs	r0, #3
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800073c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 800073e:	bd38      	pop	{r3, r4, r5, pc}

08000740 <HAL_LCD_Init>:
{
 8000740:	b538      	push	{r3, r4, r5, lr}
  if(hlcd == NULL)
 8000742:	4604      	mov	r4, r0
 8000744:	2800      	cmp	r0, #0
 8000746:	d06b      	beq.n	8000820 <HAL_LCD_Init+0xe0>
  if(hlcd->State == HAL_LCD_STATE_RESET)
 8000748:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800074c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000750:	b91b      	cbnz	r3, 800075a <HAL_LCD_Init+0x1a>
    hlcd->Lock = HAL_UNLOCKED;
 8000752:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_LCD_MspInit(hlcd);
 8000756:	f000 ff13 	bl	8001580 <HAL_LCD_MspInit>
  hlcd->State = HAL_LCD_STATE_BUSY;
 800075a:	2302      	movs	r3, #2
  __HAL_LCD_DISABLE(hlcd);
 800075c:	6822      	ldr	r2, [r4, #0]
  hlcd->State = HAL_LCD_STATE_BUSY;
 800075e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_LCD_DISABLE(hlcd);
 8000762:	6813      	ldr	r3, [r2, #0]
 8000764:	f023 0301 	bic.w	r3, r3, #1
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	2300      	movs	r3, #0
    hlcd->Instance->RAM[counter] = 0;
 800076c:	4618      	mov	r0, r3
 800076e:	1d19      	adds	r1, r3, #4
 8000770:	3301      	adds	r3, #1
 8000772:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000776:	2b10      	cmp	r3, #16
    hlcd->Instance->RAM[counter] = 0;
 8000778:	6048      	str	r0, [r1, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800077a:	d1f8      	bne.n	800076e <HAL_LCD_Init+0x2e>
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 800077c:	6893      	ldr	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 800077e:	68a1      	ldr	r1, [r4, #8]
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6093      	str	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 8000786:	6863      	ldr	r3, [r4, #4]
 8000788:	6850      	ldr	r0, [r2, #4]
 800078a:	430b      	orrs	r3, r1
 800078c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800078e:	430b      	orrs	r3, r1
 8000790:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000792:	430b      	orrs	r3, r1
 8000794:	69e1      	ldr	r1, [r4, #28]
 8000796:	430b      	orrs	r3, r1
 8000798:	6a21      	ldr	r1, [r4, #32]
 800079a:	430b      	orrs	r3, r1
 800079c:	69a1      	ldr	r1, [r4, #24]
 800079e:	430b      	orrs	r3, r1
 80007a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80007a2:	430b      	orrs	r3, r1
 80007a4:	491f      	ldr	r1, [pc, #124]	; (8000824 <HAL_LCD_Init+0xe4>)
 80007a6:	4001      	ands	r1, r0
 80007a8:	430b      	orrs	r3, r1
 80007aa:	6053      	str	r3, [r2, #4]
  LCD_WaitForSynchro(hlcd);
 80007ac:	4620      	mov	r0, r4
 80007ae:	f7ff ffb2 	bl	8000716 <LCD_WaitForSynchro>
  MODIFY_REG(hlcd->Instance->CR, \
 80007b2:	6920      	ldr	r0, [r4, #16]
 80007b4:	68e3      	ldr	r3, [r4, #12]
 80007b6:	6822      	ldr	r2, [r4, #0]
 80007b8:	4303      	orrs	r3, r0
 80007ba:	6960      	ldr	r0, [r4, #20]
 80007bc:	6811      	ldr	r1, [r2, #0]
 80007be:	4303      	orrs	r3, r0
 80007c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80007c2:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
 80007c6:	4303      	orrs	r3, r0
 80007c8:	430b      	orrs	r3, r1
 80007ca:	6013      	str	r3, [r2, #0]
  __HAL_LCD_ENABLE(hlcd);
 80007cc:	6813      	ldr	r3, [r2, #0]
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80007d4:	f7ff fcfa 	bl	80001cc <HAL_GetTick>
 80007d8:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80007da:	6823      	ldr	r3, [r4, #0]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	07da      	lsls	r2, r3, #31
 80007e0:	d50c      	bpl.n	80007fc <HAL_LCD_Init+0xbc>
  tickstart = HAL_GetTick();
 80007e2:	f7ff fcf3 	bl	80001cc <HAL_GetTick>
 80007e6:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80007e8:	6823      	ldr	r3, [r4, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	06db      	lsls	r3, r3, #27
 80007ee:	d50f      	bpl.n	8000810 <HAL_LCD_Init+0xd0>
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80007f0:	2000      	movs	r0, #0
  hlcd->State= HAL_LCD_STATE_READY;
 80007f2:	2301      	movs	r3, #1
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80007f4:	63a0      	str	r0, [r4, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 80007f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80007fa:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80007fc:	f7ff fce6 	bl	80001cc <HAL_GetTick>
 8000800:	1b40      	subs	r0, r0, r5
 8000802:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000806:	d9e8      	bls.n	80007da <HAL_LCD_Init+0x9a>
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;     
 8000808:	2308      	movs	r3, #8
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 800080a:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 800080c:	2003      	movs	r0, #3
 800080e:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000810:	f7ff fcdc 	bl	80001cc <HAL_GetTick>
 8000814:	1b40      	subs	r0, r0, r5
 8000816:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800081a:	d9e5      	bls.n	80007e8 <HAL_LCD_Init+0xa8>
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 800081c:	2310      	movs	r3, #16
 800081e:	e7f4      	b.n	800080a <HAL_LCD_Init+0xca>
    return HAL_ERROR;
 8000820:	2001      	movs	r0, #1
}
 8000822:	bd38      	pop	{r3, r4, r5, pc}
 8000824:	fc00000f 	.word	0xfc00000f

08000828 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 800082a:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800082c:	689a      	ldr	r2, [r3, #8]
 800082e:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000832:	d00c      	beq.n	800084e <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000834:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000836:	491a      	ldr	r1, [pc, #104]	; (80008a0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000838:	680b      	ldr	r3, [r1, #0]
 800083a:	f023 0301 	bic.w	r3, r3, #1
 800083e:	4313      	orrs	r3, r2
 8000840:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000842:	6808      	ldr	r0, [r1, #0]
 8000844:	f000 0001 	and.w	r0, r0, #1
 8000848:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800084a:	b002      	add	sp, #8
 800084c:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800084e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000850:	4914      	ldr	r1, [pc, #80]	; (80008a4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000852:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000856:	d00f      	beq.n	8000878 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000858:	680a      	ldr	r2, [r1, #0]
 800085a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800085e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000862:	d1e7      	bne.n	8000834 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000864:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000868:	d1e4      	bne.n	8000834 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 800086a:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 800086c:	6813      	ldr	r3, [r2, #0]
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000874:	2201      	movs	r2, #1
 8000876:	e7de      	b.n	8000836 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800087a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
 8000880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000882:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800088a:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800088c:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800088e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8000892:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8000896:	6259      	str	r1, [r3, #36]	; 0x24
 8000898:	e7e1      	b.n	800085e <RCC_SetFlashLatencyFromMSIRange+0x36>
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40023c00 	.word	0x40023c00
 80008a4:	40007000 	.word	0x40007000

080008a8 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008a8:	6803      	ldr	r3, [r0, #0]
{
 80008aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ae:	07d9      	lsls	r1, r3, #31
{
 80008b0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008b2:	d46a      	bmi.n	800098a <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008b4:	6823      	ldr	r3, [r4, #0]
 80008b6:	079a      	lsls	r2, r3, #30
 80008b8:	f100 80e6 	bmi.w	8000a88 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	06de      	lsls	r6, r3, #27
 80008c0:	d555      	bpl.n	800096e <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80008c2:	4dc1      	ldr	r5, [pc, #772]	; (8000bc8 <HAL_RCC_OscConfig+0x320>)
 80008c4:	68ab      	ldr	r3, [r5, #8]
 80008c6:	f013 0f0c 	tst.w	r3, #12
 80008ca:	f040 8183 	bne.w	8000bd4 <HAL_RCC_OscConfig+0x32c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80008d6:	6829      	ldr	r1, [r5, #0]
 80008d8:	fa93 f3a3 	rbit	r3, r3
 80008dc:	fab3 f383 	clz	r3, r3
 80008e0:	2201      	movs	r2, #1
 80008e2:	f003 031f 	and.w	r3, r3, #31
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	420b      	tst	r3, r1
 80008ec:	d002      	beq.n	80008f4 <HAL_RCC_OscConfig+0x4c>
 80008ee:	69a3      	ldr	r3, [r4, #24]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d06e      	beq.n	80009d2 <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80008f4:	4db4      	ldr	r5, [pc, #720]	; (8000bc8 <HAL_RCC_OscConfig+0x320>)
 80008f6:	6a20      	ldr	r0, [r4, #32]
 80008f8:	686b      	ldr	r3, [r5, #4]
 80008fa:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80008fe:	4298      	cmp	r0, r3
 8000900:	f240 814a 	bls.w	8000b98 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000904:	f7ff ff90 	bl	8000828 <RCC_SetFlashLatencyFromMSIRange>
 8000908:	2800      	cmp	r0, #0
 800090a:	d162      	bne.n	80009d2 <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800090c:	686b      	ldr	r3, [r5, #4]
 800090e:	6a22      	ldr	r2, [r4, #32]
 8000910:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000914:	4313      	orrs	r3, r2
 8000916:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000918:	6869      	ldr	r1, [r5, #4]
 800091a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800091e:	fa93 f3a3 	rbit	r3, r3
 8000922:	fab3 f283 	clz	r2, r3
 8000926:	69e3      	ldr	r3, [r4, #28]
 8000928:	4093      	lsls	r3, r2
 800092a:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800092e:	4313      	orrs	r3, r2
 8000930:	606b      	str	r3, [r5, #4]
 8000932:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000936:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800093a:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800093e:	4ba2      	ldr	r3, [pc, #648]	; (8000bc8 <HAL_RCC_OscConfig+0x320>)
 8000940:	21f0      	movs	r1, #240	; 0xf0
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	fa91 f1a1 	rbit	r1, r1
 8000948:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800094c:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800094e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000952:	40c3      	lsrs	r3, r0
 8000954:	1c58      	adds	r0, r3, #1
 8000956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800095a:	40ca      	lsrs	r2, r1
 800095c:	499b      	ldr	r1, [pc, #620]	; (8000bcc <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800095e:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000960:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000962:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000964:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000966:	4a9a      	ldr	r2, [pc, #616]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000968:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800096a:	f7ff fc07 	bl	800017c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	071d      	lsls	r5, r3, #28
 8000972:	f100 8191 	bmi.w	8000c98 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	0758      	lsls	r0, r3, #29
 800097a:	f100 81d3 	bmi.w	8000d24 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800097e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000980:	2a00      	cmp	r2, #0
 8000982:	f040 8257 	bne.w	8000e34 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8000986:	2000      	movs	r0, #0
 8000988:	e024      	b.n	80009d4 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800098a:	4b8f      	ldr	r3, [pc, #572]	; (8000bc8 <HAL_RCC_OscConfig+0x320>)
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	f002 020c 	and.w	r2, r2, #12
 8000992:	2a08      	cmp	r2, #8
 8000994:	d007      	beq.n	80009a6 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	f002 020c 	and.w	r2, r2, #12
 800099c:	2a0c      	cmp	r2, #12
 800099e:	d11c      	bne.n	80009da <HAL_RCC_OscConfig+0x132>
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	03db      	lsls	r3, r3, #15
 80009a4:	d519      	bpl.n	80009da <HAL_RCC_OscConfig+0x132>
 80009a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009aa:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ae:	4a86      	ldr	r2, [pc, #536]	; (8000bc8 <HAL_RCC_OscConfig+0x320>)
 80009b0:	6811      	ldr	r1, [r2, #0]
 80009b2:	fa93 f3a3 	rbit	r3, r3
 80009b6:	fab3 f383 	clz	r3, r3
 80009ba:	2201      	movs	r2, #1
 80009bc:	f003 031f 	and.w	r3, r3, #31
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	420b      	tst	r3, r1
 80009c6:	f43f af75 	beq.w	80008b4 <HAL_RCC_OscConfig+0xc>
 80009ca:	6863      	ldr	r3, [r4, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f47f af71 	bne.w	80008b4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80009d2:	2001      	movs	r0, #1
}
 80009d4:	b003      	add	sp, #12
 80009d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009da:	6863      	ldr	r3, [r4, #4]
 80009dc:	4d7a      	ldr	r5, [pc, #488]	; (8000bc8 <HAL_RCC_OscConfig+0x320>)
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d120      	bne.n	8000a24 <HAL_RCC_OscConfig+0x17c>
 80009e2:	682b      	ldr	r3, [r5, #0]
 80009e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009ea:	f7ff fbef 	bl	80001cc <HAL_GetTick>
 80009ee:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80009f2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009f4:	2601      	movs	r6, #1
 80009f6:	4f74      	ldr	r7, [pc, #464]	; (8000bc8 <HAL_RCC_OscConfig+0x320>)
 80009f8:	fa95 f3a5 	rbit	r3, r5
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	fa95 f3a5 	rbit	r3, r5
 8000a02:	fab3 f383 	clz	r3, r3
 8000a06:	f003 031f 	and.w	r3, r3, #31
 8000a0a:	fa06 f303 	lsl.w	r3, r6, r3
 8000a0e:	4213      	tst	r3, r2
 8000a10:	f47f af50 	bne.w	80008b4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a14:	f7ff fbda 	bl	80001cc <HAL_GetTick>
 8000a18:	eba0 0008 	sub.w	r0, r0, r8
 8000a1c:	2864      	cmp	r0, #100	; 0x64
 8000a1e:	d9eb      	bls.n	80009f8 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000a20:	2003      	movs	r0, #3
 8000a22:	e7d7      	b.n	80009d4 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a24:	bb13      	cbnz	r3, 8000a6c <HAL_RCC_OscConfig+0x1c4>
 8000a26:	682b      	ldr	r3, [r5, #0]
 8000a28:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a30:	602b      	str	r3, [r5, #0]
 8000a32:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a34:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a3c:	f7ff fbc6 	bl	80001cc <HAL_GetTick>
 8000a40:	4680      	mov	r8, r0
 8000a42:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a46:	682a      	ldr	r2, [r5, #0]
 8000a48:	fa96 f3a6 	rbit	r3, r6
 8000a4c:	fab3 f383 	clz	r3, r3
 8000a50:	f003 031f 	and.w	r3, r3, #31
 8000a54:	fa07 f303 	lsl.w	r3, r7, r3
 8000a58:	4213      	tst	r3, r2
 8000a5a:	f43f af2b 	beq.w	80008b4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a5e:	f7ff fbb5 	bl	80001cc <HAL_GetTick>
 8000a62:	eba0 0008 	sub.w	r0, r0, r8
 8000a66:	2864      	cmp	r0, #100	; 0x64
 8000a68:	d9eb      	bls.n	8000a42 <HAL_RCC_OscConfig+0x19a>
 8000a6a:	e7d9      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a6c:	2b05      	cmp	r3, #5
 8000a6e:	682b      	ldr	r3, [r5, #0]
 8000a70:	d103      	bne.n	8000a7a <HAL_RCC_OscConfig+0x1d2>
 8000a72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a76:	602b      	str	r3, [r5, #0]
 8000a78:	e7b3      	b.n	80009e2 <HAL_RCC_OscConfig+0x13a>
 8000a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a7e:	602b      	str	r3, [r5, #0]
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a86:	e7af      	b.n	80009e8 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a88:	4b4f      	ldr	r3, [pc, #316]	; (8000bc8 <HAL_RCC_OscConfig+0x320>)
 8000a8a:	689a      	ldr	r2, [r3, #8]
 8000a8c:	f002 020c 	and.w	r2, r2, #12
 8000a90:	2a04      	cmp	r2, #4
 8000a92:	d007      	beq.n	8000aa4 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	f002 020c 	and.w	r2, r2, #12
 8000a9a:	2a0c      	cmp	r2, #12
 8000a9c:	d124      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x240>
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	03df      	lsls	r7, r3, #15
 8000aa2:	d421      	bmi.n	8000ae8 <HAL_RCC_OscConfig+0x240>
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aaa:	4a47      	ldr	r2, [pc, #284]	; (8000bc8 <HAL_RCC_OscConfig+0x320>)
 8000aac:	6810      	ldr	r0, [r2, #0]
 8000aae:	fa93 f3a3 	rbit	r3, r3
 8000ab2:	fab3 f383 	clz	r3, r3
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	f003 031f 	and.w	r3, r3, #31
 8000abc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac0:	4203      	tst	r3, r0
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	d002      	beq.n	8000acc <HAL_RCC_OscConfig+0x224>
 8000ac6:	68e2      	ldr	r2, [r4, #12]
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	d182      	bne.n	80009d2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000acc:	6858      	ldr	r0, [r3, #4]
 8000ace:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000ad2:	fa92 f2a2 	rbit	r2, r2
 8000ad6:	fab2 f182 	clz	r1, r2
 8000ada:	6922      	ldr	r2, [r4, #16]
 8000adc:	408a      	lsls	r2, r1
 8000ade:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae6:	e6e9      	b.n	80008bc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ae8:	68e2      	ldr	r2, [r4, #12]
 8000aea:	2501      	movs	r5, #1
 8000aec:	b382      	cbz	r2, 8000b50 <HAL_RCC_OscConfig+0x2a8>
 8000aee:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000af2:	fab3 f383 	clz	r3, r3
 8000af6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000afa:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000b02:	f7ff fb63 	bl	80001cc <HAL_GetTick>
 8000b06:	2702      	movs	r7, #2
 8000b08:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b0a:	4e2f      	ldr	r6, [pc, #188]	; (8000bc8 <HAL_RCC_OscConfig+0x320>)
 8000b0c:	fa97 f3a7 	rbit	r3, r7
 8000b10:	6832      	ldr	r2, [r6, #0]
 8000b12:	fa97 f3a7 	rbit	r3, r7
 8000b16:	fab3 f383 	clz	r3, r3
 8000b1a:	f003 031f 	and.w	r3, r3, #31
 8000b1e:	fa05 f303 	lsl.w	r3, r5, r3
 8000b22:	4213      	tst	r3, r2
 8000b24:	d00d      	beq.n	8000b42 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b26:	6871      	ldr	r1, [r6, #4]
 8000b28:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b2c:	fa93 f3a3 	rbit	r3, r3
 8000b30:	fab3 f283 	clz	r2, r3
 8000b34:	6923      	ldr	r3, [r4, #16]
 8000b36:	4093      	lsls	r3, r2
 8000b38:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	6073      	str	r3, [r6, #4]
 8000b40:	e6bc      	b.n	80008bc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b42:	f7ff fb43 	bl	80001cc <HAL_GetTick>
 8000b46:	eba0 0008 	sub.w	r0, r0, r8
 8000b4a:	2802      	cmp	r0, #2
 8000b4c:	d9de      	bls.n	8000b0c <HAL_RCC_OscConfig+0x264>
 8000b4e:	e767      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
 8000b50:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000b54:	fab3 f383 	clz	r3, r3
 8000b58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b5c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b64:	f7ff fb32 	bl	80001cc <HAL_GetTick>
 8000b68:	2602      	movs	r6, #2
 8000b6a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b6c:	4f16      	ldr	r7, [pc, #88]	; (8000bc8 <HAL_RCC_OscConfig+0x320>)
 8000b6e:	fa96 f3a6 	rbit	r3, r6
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	fa96 f3a6 	rbit	r3, r6
 8000b78:	fab3 f383 	clz	r3, r3
 8000b7c:	f003 031f 	and.w	r3, r3, #31
 8000b80:	fa05 f303 	lsl.w	r3, r5, r3
 8000b84:	4213      	tst	r3, r2
 8000b86:	f43f ae99 	beq.w	80008bc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b8a:	f7ff fb1f 	bl	80001cc <HAL_GetTick>
 8000b8e:	eba0 0008 	sub.w	r0, r0, r8
 8000b92:	2802      	cmp	r0, #2
 8000b94:	d9eb      	bls.n	8000b6e <HAL_RCC_OscConfig+0x2c6>
 8000b96:	e743      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b98:	686b      	ldr	r3, [r5, #4]
 8000b9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b9e:	4303      	orrs	r3, r0
 8000ba0:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ba2:	6869      	ldr	r1, [r5, #4]
 8000ba4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000ba8:	fa93 f3a3 	rbit	r3, r3
 8000bac:	fab3 f283 	clz	r2, r3
 8000bb0:	69e3      	ldr	r3, [r4, #28]
 8000bb2:	4093      	lsls	r3, r2
 8000bb4:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bbc:	f7ff fe34 	bl	8000828 <RCC_SetFlashLatencyFromMSIRange>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	f43f aeb6 	beq.w	8000932 <HAL_RCC_OscConfig+0x8a>
 8000bc6:	e704      	b.n	80009d2 <HAL_RCC_OscConfig+0x12a>
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	08001758 	.word	0x08001758
 8000bd0:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bd4:	69a2      	ldr	r2, [r4, #24]
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d037      	beq.n	8000c4e <HAL_RCC_OscConfig+0x3a6>
 8000bde:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8000be2:	fab3 f383 	clz	r3, r3
 8000be6:	2601      	movs	r6, #1
 8000be8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bec:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000bf4:	f7ff faea 	bl	80001cc <HAL_GetTick>
 8000bf8:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000bfc:	4680      	mov	r8, r0
 8000bfe:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000c02:	682a      	ldr	r2, [r5, #0]
 8000c04:	fa97 f3a7 	rbit	r3, r7
 8000c08:	fab3 f383 	clz	r3, r3
 8000c0c:	f003 031f 	and.w	r3, r3, #31
 8000c10:	fa06 f303 	lsl.w	r3, r6, r3
 8000c14:	4213      	tst	r3, r2
 8000c16:	d013      	beq.n	8000c40 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c18:	686b      	ldr	r3, [r5, #4]
 8000c1a:	6a22      	ldr	r2, [r4, #32]
 8000c1c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c20:	4313      	orrs	r3, r2
 8000c22:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c24:	6869      	ldr	r1, [r5, #4]
 8000c26:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000c2a:	fa93 f3a3 	rbit	r3, r3
 8000c2e:	fab3 f283 	clz	r2, r3
 8000c32:	69e3      	ldr	r3, [r4, #28]
 8000c34:	4093      	lsls	r3, r2
 8000c36:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	606b      	str	r3, [r5, #4]
 8000c3e:	e696      	b.n	800096e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c40:	f7ff fac4 	bl	80001cc <HAL_GetTick>
 8000c44:	eba0 0008 	sub.w	r0, r0, r8
 8000c48:	2802      	cmp	r0, #2
 8000c4a:	d9d8      	bls.n	8000bfe <HAL_RCC_OscConfig+0x356>
 8000c4c:	e6e8      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
 8000c4e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8000c52:	fab3 f383 	clz	r3, r3
 8000c56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c5a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c62:	f7ff fab3 	bl	80001cc <HAL_GetTick>
 8000c66:	f44f 7600 	mov.w	r6, #512	; 0x200
 8000c6a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fa96 f3a6 	rbit	r3, r6
 8000c72:	682a      	ldr	r2, [r5, #0]
 8000c74:	fa96 f3a6 	rbit	r3, r6
 8000c78:	fab3 f383 	clz	r3, r3
 8000c7c:	f003 031f 	and.w	r3, r3, #31
 8000c80:	fa07 f303 	lsl.w	r3, r7, r3
 8000c84:	4213      	tst	r3, r2
 8000c86:	f43f ae72 	beq.w	800096e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c8a:	f7ff fa9f 	bl	80001cc <HAL_GetTick>
 8000c8e:	eba0 0008 	sub.w	r0, r0, r8
 8000c92:	2802      	cmp	r0, #2
 8000c94:	d9eb      	bls.n	8000c6e <HAL_RCC_OscConfig+0x3c6>
 8000c96:	e6c3      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c98:	6962      	ldr	r2, [r4, #20]
 8000c9a:	2501      	movs	r5, #1
 8000c9c:	49a9      	ldr	r1, [pc, #676]	; (8000f44 <HAL_RCC_OscConfig+0x69c>)
 8000c9e:	b302      	cbz	r2, 8000ce2 <HAL_RCC_OscConfig+0x43a>
 8000ca0:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8000ca4:	fab3 f383 	clz	r3, r3
 8000ca8:	440b      	add	r3, r1
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8000cae:	f7ff fa8d 	bl	80001cc <HAL_GetTick>
 8000cb2:	2602      	movs	r6, #2
 8000cb4:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cb6:	4fa4      	ldr	r7, [pc, #656]	; (8000f48 <HAL_RCC_OscConfig+0x6a0>)
 8000cb8:	fa96 f3a6 	rbit	r3, r6
 8000cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cbe:	fa96 f3a6 	rbit	r3, r6
 8000cc2:	fab3 f383 	clz	r3, r3
 8000cc6:	f003 031f 	and.w	r3, r3, #31
 8000cca:	fa05 f303 	lsl.w	r3, r5, r3
 8000cce:	4213      	tst	r3, r2
 8000cd0:	f47f ae51 	bne.w	8000976 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cd4:	f7ff fa7a 	bl	80001cc <HAL_GetTick>
 8000cd8:	eba0 0008 	sub.w	r0, r0, r8
 8000cdc:	2802      	cmp	r0, #2
 8000cde:	d9eb      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x410>
 8000ce0:	e69e      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
 8000ce2:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8000ce6:	fab3 f383 	clz	r3, r3
 8000cea:	440b      	add	r3, r1
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cf0:	f7ff fa6c 	bl	80001cc <HAL_GetTick>
 8000cf4:	2602      	movs	r6, #2
 8000cf6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf8:	4f93      	ldr	r7, [pc, #588]	; (8000f48 <HAL_RCC_OscConfig+0x6a0>)
 8000cfa:	fa96 f3a6 	rbit	r3, r6
 8000cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d00:	fa96 f3a6 	rbit	r3, r6
 8000d04:	fab3 f383 	clz	r3, r3
 8000d08:	f003 031f 	and.w	r3, r3, #31
 8000d0c:	fa05 f303 	lsl.w	r3, r5, r3
 8000d10:	4213      	tst	r3, r2
 8000d12:	f43f ae30 	beq.w	8000976 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d16:	f7ff fa59 	bl	80001cc <HAL_GetTick>
 8000d1a:	eba0 0008 	sub.w	r0, r0, r8
 8000d1e:	2802      	cmp	r0, #2
 8000d20:	d9eb      	bls.n	8000cfa <HAL_RCC_OscConfig+0x452>
 8000d22:	e67d      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d24:	4b88      	ldr	r3, [pc, #544]	; (8000f48 <HAL_RCC_OscConfig+0x6a0>)
 8000d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d28:	00d1      	lsls	r1, r2, #3
 8000d2a:	d434      	bmi.n	8000d96 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8000d2c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
 8000d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d40:	4d82      	ldr	r5, [pc, #520]	; (8000f4c <HAL_RCC_OscConfig+0x6a4>)
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	05da      	lsls	r2, r3, #23
 8000d46:	d528      	bpl.n	8000d9a <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d48:	68a3      	ldr	r3, [r4, #8]
 8000d4a:	4d7f      	ldr	r5, [pc, #508]	; (8000f48 <HAL_RCC_OscConfig+0x6a0>)
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d134      	bne.n	8000dba <HAL_RCC_OscConfig+0x512>
 8000d50:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d56:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000d58:	f7ff fa38 	bl	80001cc <HAL_GetTick>
 8000d5c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8000d60:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d62:	2701      	movs	r7, #1
 8000d64:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000f48 <HAL_RCC_OscConfig+0x6a0>
 8000d68:	fa95 f3a5 	rbit	r3, r5
 8000d6c:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8000d70:	fa95 f3a5 	rbit	r3, r5
 8000d74:	fab3 f383 	clz	r3, r3
 8000d78:	f003 031f 	and.w	r3, r3, #31
 8000d7c:	fa07 f303 	lsl.w	r3, r7, r3
 8000d80:	4213      	tst	r3, r2
 8000d82:	d04e      	beq.n	8000e22 <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	f43f adfa 	beq.w	800097e <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d8a:	4a6f      	ldr	r2, [pc, #444]	; (8000f48 <HAL_RCC_OscConfig+0x6a0>)
 8000d8c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6253      	str	r3, [r2, #36]	; 0x24
 8000d94:	e5f3      	b.n	800097e <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8000d96:	2600      	movs	r6, #0
 8000d98:	e7d2      	b.n	8000d40 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d9a:	682b      	ldr	r3, [r5, #0]
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000da2:	f7ff fa13 	bl	80001cc <HAL_GetTick>
 8000da6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	d4cc      	bmi.n	8000d48 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dae:	f7ff fa0d 	bl	80001cc <HAL_GetTick>
 8000db2:	1bc0      	subs	r0, r0, r7
 8000db4:	2864      	cmp	r0, #100	; 0x64
 8000db6:	d9f7      	bls.n	8000da8 <HAL_RCC_OscConfig+0x500>
 8000db8:	e632      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dba:	bb23      	cbnz	r3, 8000e06 <HAL_RCC_OscConfig+0x55e>
 8000dbc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000dbe:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dc6:	636b      	str	r3, [r5, #52]	; 0x34
 8000dc8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dca:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dd2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000dd4:	f7ff f9fa 	bl	80001cc <HAL_GetTick>
 8000dd8:	4681      	mov	r9, r0
 8000dda:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dde:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000de0:	fa97 f3a7 	rbit	r3, r7
 8000de4:	fab3 f383 	clz	r3, r3
 8000de8:	f003 031f 	and.w	r3, r3, #31
 8000dec:	fa08 f303 	lsl.w	r3, r8, r3
 8000df0:	4213      	tst	r3, r2
 8000df2:	d0c7      	beq.n	8000d84 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000df4:	f7ff f9ea 	bl	80001cc <HAL_GetTick>
 8000df8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dfc:	eba0 0009 	sub.w	r0, r0, r9
 8000e00:	4298      	cmp	r0, r3
 8000e02:	d9ea      	bls.n	8000dda <HAL_RCC_OscConfig+0x532>
 8000e04:	e60c      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e0a:	d103      	bne.n	8000e14 <HAL_RCC_OscConfig+0x56c>
 8000e0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e10:	636b      	str	r3, [r5, #52]	; 0x34
 8000e12:	e79d      	b.n	8000d50 <HAL_RCC_OscConfig+0x4a8>
 8000e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e18:	636b      	str	r3, [r5, #52]	; 0x34
 8000e1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e20:	e799      	b.n	8000d56 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e22:	f7ff f9d3 	bl	80001cc <HAL_GetTick>
 8000e26:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e2a:	eba0 0009 	sub.w	r0, r0, r9
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d99a      	bls.n	8000d68 <HAL_RCC_OscConfig+0x4c0>
 8000e32:	e5f5      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e34:	4d44      	ldr	r5, [pc, #272]	; (8000f48 <HAL_RCC_OscConfig+0x6a0>)
 8000e36:	68ab      	ldr	r3, [r5, #8]
 8000e38:	f003 030c 	and.w	r3, r3, #12
 8000e3c:	2b0c      	cmp	r3, #12
 8000e3e:	f43f adc8 	beq.w	80009d2 <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e42:	2a02      	cmp	r2, #2
 8000e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e48:	d156      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x650>
 8000e4a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000e4e:	fab3 f383 	clz	r3, r3
 8000e52:	2200      	movs	r2, #0
 8000e54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e58:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e60:	f7ff f9b4 	bl	80001cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e64:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8000e66:	4680      	mov	r8, r0
 8000e68:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e6c:	2501      	movs	r5, #1
 8000e6e:	fa97 f3a7 	rbit	r3, r7
 8000e72:	6832      	ldr	r2, [r6, #0]
 8000e74:	fa97 f3a7 	rbit	r3, r7
 8000e78:	fab3 f383 	clz	r3, r3
 8000e7c:	f003 031f 	and.w	r3, r3, #31
 8000e80:	fa05 f303 	lsl.w	r3, r5, r3
 8000e84:	4213      	tst	r3, r2
 8000e86:	d130      	bne.n	8000eea <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e88:	68b2      	ldr	r2, [r6, #8]
 8000e8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e8e:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000e92:	430b      	orrs	r3, r1
 8000e94:	4313      	orrs	r3, r2
 8000e96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	60b3      	str	r3, [r6, #8]
 8000e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ea0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000eac:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000eb4:	f7ff f98a 	bl	80001cc <HAL_GetTick>
 8000eb8:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000ebc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ebe:	2501      	movs	r5, #1
 8000ec0:	4e21      	ldr	r6, [pc, #132]	; (8000f48 <HAL_RCC_OscConfig+0x6a0>)
 8000ec2:	fa94 f3a4 	rbit	r3, r4
 8000ec6:	6832      	ldr	r2, [r6, #0]
 8000ec8:	fa94 f3a4 	rbit	r3, r4
 8000ecc:	fab3 f383 	clz	r3, r3
 8000ed0:	f003 031f 	and.w	r3, r3, #31
 8000ed4:	fa05 f303 	lsl.w	r3, r5, r3
 8000ed8:	4213      	tst	r3, r2
 8000eda:	f47f ad54 	bne.w	8000986 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ede:	f7ff f975 	bl	80001cc <HAL_GetTick>
 8000ee2:	1bc0      	subs	r0, r0, r7
 8000ee4:	2802      	cmp	r0, #2
 8000ee6:	d9ec      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x61a>
 8000ee8:	e59a      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eea:	f7ff f96f 	bl	80001cc <HAL_GetTick>
 8000eee:	eba0 0008 	sub.w	r0, r0, r8
 8000ef2:	2802      	cmp	r0, #2
 8000ef4:	d9bb      	bls.n	8000e6e <HAL_RCC_OscConfig+0x5c6>
 8000ef6:	e593      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
 8000ef8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f06:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f0e:	f7ff f95d 	bl	80001cc <HAL_GetTick>
 8000f12:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000f16:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f18:	2601      	movs	r6, #1
 8000f1a:	fa94 f3a4 	rbit	r3, r4
 8000f1e:	682a      	ldr	r2, [r5, #0]
 8000f20:	fa94 f3a4 	rbit	r3, r4
 8000f24:	fab3 f383 	clz	r3, r3
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	fa06 f303 	lsl.w	r3, r6, r3
 8000f30:	4213      	tst	r3, r2
 8000f32:	f43f ad28 	beq.w	8000986 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff f949 	bl	80001cc <HAL_GetTick>
 8000f3a:	1bc0      	subs	r0, r0, r7
 8000f3c:	2802      	cmp	r0, #2
 8000f3e:	d9ec      	bls.n	8000f1a <HAL_RCC_OscConfig+0x672>
 8000f40:	e56e      	b.n	8000a20 <HAL_RCC_OscConfig+0x178>
 8000f42:	bf00      	nop
 8000f44:	1091c1a0 	.word	0x1091c1a0
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40007000 	.word	0x40007000

08000f50 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000f50:	491e      	ldr	r1, [pc, #120]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8000f52:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000f54:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f56:	f003 020c 	and.w	r2, r3, #12
 8000f5a:	2a08      	cmp	r2, #8
 8000f5c:	d005      	beq.n	8000f6a <HAL_RCC_GetSysClockFreq+0x1a>
 8000f5e:	2a0c      	cmp	r2, #12
 8000f60:	d005      	beq.n	8000f6e <HAL_RCC_GetSysClockFreq+0x1e>
 8000f62:	2a04      	cmp	r2, #4
 8000f64:	d122      	bne.n	8000fac <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8000f66:	481a      	ldr	r0, [pc, #104]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8000f68:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000f6a:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0x84>)
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000f72:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000f76:	fab2 f282 	clz	r2, r2
 8000f7a:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000f7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000f82:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x88>)
 8000f84:	5c84      	ldrb	r4, [r0, r2]
 8000f86:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8000f8a:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000f8e:	fab0 f280 	clz	r2, r0
 8000f92:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f96:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000f98:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f9a:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000f9c:	bf4c      	ite	mi
 8000f9e:	4b0d      	ldrmi	r3, [pc, #52]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8000fa0:	4b0b      	ldrpl	r3, [pc, #44]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000fa2:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8000fa4:	4363      	muls	r3, r4
 8000fa6:	fbb3 f0f0 	udiv	r0, r3, r0
 8000faa:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000fac:	6848      	ldr	r0, [r1, #4]
 8000fae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8000fbe:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8000fc0:	1c43      	adds	r3, r0, #1
 8000fc2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000fc6:	4098      	lsls	r0, r3
 8000fc8:	bd10      	pop	{r4, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	00f42400 	.word	0x00f42400
 8000fd4:	007a1200 	.word	0x007a1200
 8000fd8:	08001768 	.word	0x08001768

08000fdc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fdc:	4b6a      	ldr	r3, [pc, #424]	; (8001188 <HAL_RCC_ClockConfig+0x1ac>)
{
 8000fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fe2:	681a      	ldr	r2, [r3, #0]
{
 8000fe4:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fe6:	f002 0201 	and.w	r2, r2, #1
 8000fea:	428a      	cmp	r2, r1
{
 8000fec:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fee:	d330      	bcc.n	8001052 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff0:	6832      	ldr	r2, [r6, #0]
 8000ff2:	0794      	lsls	r4, r2, #30
 8000ff4:	d440      	bmi.n	8001078 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ff6:	07d0      	lsls	r0, r2, #31
 8000ff8:	d446      	bmi.n	8001088 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ffa:	4b63      	ldr	r3, [pc, #396]	; (8001188 <HAL_RCC_ClockConfig+0x1ac>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f002 0201 	and.w	r2, r2, #1
 8001002:	4295      	cmp	r5, r2
 8001004:	f0c0 80ae 	bcc.w	8001164 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001008:	6832      	ldr	r2, [r6, #0]
 800100a:	0751      	lsls	r1, r2, #29
 800100c:	f100 80b3 	bmi.w	8001176 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001010:	0713      	lsls	r3, r2, #28
 8001012:	d507      	bpl.n	8001024 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001014:	4a5d      	ldr	r2, [pc, #372]	; (800118c <HAL_RCC_ClockConfig+0x1b0>)
 8001016:	6931      	ldr	r1, [r6, #16]
 8001018:	6893      	ldr	r3, [r2, #8]
 800101a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800101e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001022:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001024:	f7ff ff94 	bl	8000f50 <HAL_RCC_GetSysClockFreq>
 8001028:	4b58      	ldr	r3, [pc, #352]	; (800118c <HAL_RCC_ClockConfig+0x1b0>)
 800102a:	22f0      	movs	r2, #240	; 0xf0
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	fa92 f2a2 	rbit	r2, r2
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800103a:	40d3      	lsrs	r3, r2
 800103c:	4a54      	ldr	r2, [pc, #336]	; (8001190 <HAL_RCC_ClockConfig+0x1b4>)
 800103e:	5cd3      	ldrb	r3, [r2, r3]
 8001040:	40d8      	lsrs	r0, r3
 8001042:	4b54      	ldr	r3, [pc, #336]	; (8001194 <HAL_RCC_ClockConfig+0x1b8>)
 8001044:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff f898 	bl	800017c <HAL_InitTick>
  return HAL_OK;
 800104c:	2000      	movs	r0, #0
}
 800104e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001052:	2901      	cmp	r1, #1
 8001054:	bf02      	ittt	eq
 8001056:	681a      	ldreq	r2, [r3, #0]
 8001058:	f042 0204 	orreq.w	r2, r2, #4
 800105c:	601a      	streq	r2, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f022 0201 	bic.w	r2, r2, #1
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	4299      	cmp	r1, r3
 8001070:	d0be      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001078:	4944      	ldr	r1, [pc, #272]	; (800118c <HAL_RCC_ClockConfig+0x1b0>)
 800107a:	68b0      	ldr	r0, [r6, #8]
 800107c:	688b      	ldr	r3, [r1, #8]
 800107e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001082:	4303      	orrs	r3, r0
 8001084:	608b      	str	r3, [r1, #8]
 8001086:	e7b6      	b.n	8000ff6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001088:	6872      	ldr	r2, [r6, #4]
 800108a:	4940      	ldr	r1, [pc, #256]	; (800118c <HAL_RCC_ClockConfig+0x1b0>)
 800108c:	2a02      	cmp	r2, #2
 800108e:	d10f      	bne.n	80010b0 <HAL_RCC_ClockConfig+0xd4>
 8001090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001094:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001098:	6808      	ldr	r0, [r1, #0]
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	2101      	movs	r1, #1
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	4203      	tst	r3, r0
 80010ae:	e013      	b.n	80010d8 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010b0:	2a03      	cmp	r2, #3
 80010b2:	d102      	bne.n	80010ba <HAL_RCC_ClockConfig+0xde>
 80010b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010b8:	e7ec      	b.n	8001094 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80010ba:	2a01      	cmp	r2, #1
 80010bc:	d129      	bne.n	8001112 <HAL_RCC_ClockConfig+0x136>
 80010be:	2302      	movs	r3, #2
 80010c0:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c4:	6809      	ldr	r1, [r1, #0]
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80010d8:	d0cb      	beq.n	8001072 <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010da:	4c2c      	ldr	r4, [pc, #176]	; (800118c <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010dc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e0:	68a3      	ldr	r3, [r4, #8]
 80010e2:	f023 0303 	bic.w	r3, r3, #3
 80010e6:	431a      	orrs	r2, r3
 80010e8:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80010ea:	f7ff f86f 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ee:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80010f0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d110      	bne.n	8001118 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f6:	68a3      	ldr	r3, [r4, #8]
 80010f8:	f003 030c 	and.w	r3, r3, #12
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	f43f af7c 	beq.w	8000ffa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001102:	f7ff f863 	bl	80001cc <HAL_GetTick>
 8001106:	1bc0      	subs	r0, r0, r7
 8001108:	4540      	cmp	r0, r8
 800110a:	d9f4      	bls.n	80010f6 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 800110c:	2003      	movs	r0, #3
 800110e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001116:	e7bd      	b.n	8001094 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001118:	2b03      	cmp	r3, #3
 800111a:	d10b      	bne.n	8001134 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800111c:	68a3      	ldr	r3, [r4, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b0c      	cmp	r3, #12
 8001124:	f43f af69 	beq.w	8000ffa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001128:	f7ff f850 	bl	80001cc <HAL_GetTick>
 800112c:	1bc0      	subs	r0, r0, r7
 800112e:	4540      	cmp	r0, r8
 8001130:	d9f4      	bls.n	800111c <HAL_RCC_ClockConfig+0x140>
 8001132:	e7eb      	b.n	800110c <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001134:	2b01      	cmp	r3, #1
 8001136:	d110      	bne.n	800115a <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001138:	68a3      	ldr	r3, [r4, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b04      	cmp	r3, #4
 8001140:	f43f af5b 	beq.w	8000ffa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001144:	f7ff f842 	bl	80001cc <HAL_GetTick>
 8001148:	1bc0      	subs	r0, r0, r7
 800114a:	4540      	cmp	r0, r8
 800114c:	d9f4      	bls.n	8001138 <HAL_RCC_ClockConfig+0x15c>
 800114e:	e7dd      	b.n	800110c <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001150:	f7ff f83c 	bl	80001cc <HAL_GetTick>
 8001154:	1bc0      	subs	r0, r0, r7
 8001156:	4540      	cmp	r0, r8
 8001158:	d8d8      	bhi.n	800110c <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800115a:	68a3      	ldr	r3, [r4, #8]
 800115c:	f013 0f0c 	tst.w	r3, #12
 8001160:	d1f6      	bne.n	8001150 <HAL_RCC_ClockConfig+0x174>
 8001162:	e74a      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	07da      	lsls	r2, r3, #31
 8001170:	f53f af7f 	bmi.w	8001072 <HAL_RCC_ClockConfig+0x96>
 8001174:	e748      	b.n	8001008 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001176:	4905      	ldr	r1, [pc, #20]	; (800118c <HAL_RCC_ClockConfig+0x1b0>)
 8001178:	68f0      	ldr	r0, [r6, #12]
 800117a:	688b      	ldr	r3, [r1, #8]
 800117c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001180:	4303      	orrs	r3, r0
 8001182:	608b      	str	r3, [r1, #8]
 8001184:	e744      	b.n	8001010 <HAL_RCC_ClockConfig+0x34>
 8001186:	bf00      	nop
 8001188:	40023c00 	.word	0x40023c00
 800118c:	40023800 	.word	0x40023800
 8001190:	08001758 	.word	0x08001758
 8001194:	20000000 	.word	0x20000000

08001198 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001198:	6803      	ldr	r3, [r0, #0]
{
 800119a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800119e:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80011a0:	0798      	lsls	r0, r3, #30
 80011a2:	d101      	bne.n	80011a8 <HAL_RCCEx_PeriphCLKConfig+0x10>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  
  return HAL_OK;
 80011a4:	2000      	movs	r0, #0
 80011a6:	e055      	b.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a8:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80011aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ac:	00d1      	lsls	r1, r2, #3
 80011ae:	d43f      	bmi.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x98>
      pwrclkchanged = SET;
 80011b0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c4:	4e49      	ldr	r6, [pc, #292]	; (80012ec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80011c6:	6833      	ldr	r3, [r6, #0]
 80011c8:	05da      	lsls	r2, r3, #23
 80011ca:	d533      	bpl.n	8001234 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80011cc:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80011ce:	6862      	ldr	r2, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80011d0:	6819      	ldr	r1, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80011d2:	f002 40c0 	and.w	r0, r2, #1610612736	; 0x60000000
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80011d6:	f001 41c0 	and.w	r1, r1, #1610612736	; 0x60000000
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80011da:	4281      	cmp	r1, r0
 80011dc:	d104      	bne.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0x50>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80011de:	68a0      	ldr	r0, [r4, #8]
 80011e0:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 80011e4:	4281      	cmp	r1, r0
 80011e6:	d007      	beq.n	80011f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80011e8:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80011ec:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80011f0:	d102      	bne.n	80011f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80011f2:	6819      	ldr	r1, [r3, #0]
 80011f4:	0388      	lsls	r0, r1, #14
 80011f6:	d475      	bmi.n	80012e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80011f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80011fa:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 80011fe:	d12c      	bne.n	800125a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001200:	6860      	ldr	r0, [r4, #4]
 8001202:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001204:	f400 3140 	and.w	r1, r0, #196608	; 0x30000
 8001208:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800120c:	d106      	bne.n	800121c <HAL_RCCEx_PeriphCLKConfig+0x84>
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 8001214:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 8001218:	4302      	orrs	r2, r0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121e:	4311      	orrs	r1, r2
 8001220:	6359      	str	r1, [r3, #52]	; 0x34
    if(pwrclkchanged == SET)
 8001222:	2d00      	cmp	r5, #0
 8001224:	d0be      	beq.n	80011a4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001228:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
 800122e:	e7b9      	b.n	80011a4 <HAL_RCCEx_PeriphCLKConfig+0xc>
    FlagStatus       pwrclkchanged = RESET;
 8001230:	2500      	movs	r5, #0
 8001232:	e7c7      	b.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001234:	6833      	ldr	r3, [r6, #0]
 8001236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800123c:	f7fe ffc6 	bl	80001cc <HAL_GetTick>
 8001240:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001242:	6833      	ldr	r3, [r6, #0]
 8001244:	05db      	lsls	r3, r3, #23
 8001246:	d4c1      	bmi.n	80011cc <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001248:	f7fe ffc0 	bl	80001cc <HAL_GetTick>
 800124c:	1bc0      	subs	r0, r0, r7
 800124e:	2864      	cmp	r0, #100	; 0x64
 8001250:	d9f7      	bls.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0xaa>
          return HAL_TIMEOUT;
 8001252:	2003      	movs	r0, #3
}
 8001254:	b003      	add	sp, #12
 8001256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800125a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800125e:	4293      	cmp	r3, r2
 8001260:	d002      	beq.n	8001268 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001262:	6822      	ldr	r2, [r4, #0]
 8001264:	07d1      	lsls	r1, r2, #31
 8001266:	d407      	bmi.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001268:	68a2      	ldr	r2, [r4, #8]
 800126a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800126e:	4293      	cmp	r3, r2
 8001270:	d0c6      	beq.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x68>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	079a      	lsls	r2, r3, #30
 8001276:	d5c3      	bpl.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x68>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001278:	4e1b      	ldr	r6, [pc, #108]	; (80012e8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800127a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800127e:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8001280:	f421 3040 	bic.w	r0, r1, #196608	; 0x30000
 8001284:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001288:	fab2 f282 	clz	r2, r2
 800128c:	2701      	movs	r7, #1
 800128e:	f8df e060 	ldr.w	lr, [pc, #96]	; 80012f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8001292:	4472      	add	r2, lr
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	6017      	str	r7, [r2, #0]
 8001298:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	2200      	movs	r2, #0
 80012a2:	4473      	add	r3, lr
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80012a8:	05cb      	lsls	r3, r1, #23
      RCC->CSR = temp_reg;
 80012aa:	6370      	str	r0, [r6, #52]	; 0x34
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80012ac:	d5a8      	bpl.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x68>
        tickstart = HAL_GetTick();
 80012ae:	f7fe ff8d 	bl	80001cc <HAL_GetTick>
 80012b2:	f44f 7800 	mov.w	r8, #512	; 0x200
 80012b6:	4681      	mov	r9, r0
 80012b8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012bc:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80012be:	fa98 f3a8 	rbit	r3, r8
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	f003 031f 	and.w	r3, r3, #31
 80012ca:	fa07 f303 	lsl.w	r3, r7, r3
 80012ce:	4213      	tst	r3, r2
 80012d0:	d196      	bne.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7fe ff7b 	bl	80001cc <HAL_GetTick>
 80012d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80012da:	eba0 0009 	sub.w	r0, r0, r9
 80012de:	4298      	cmp	r0, r3
 80012e0:	d9ea      	bls.n	80012b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80012e2:	e7b6      	b.n	8001252 <HAL_RCCEx_PeriphCLKConfig+0xba>
        return HAL_ERROR; 
 80012e4:	2001      	movs	r0, #1
 80012e6:	e7b5      	b.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40007000 	.word	0x40007000
 80012f0:	1091c1a0 	.word	0x1091c1a0

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f6:	2400      	movs	r4, #0
{
 80012f8:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	2234      	movs	r2, #52	; 0x34
 80012fc:	2100      	movs	r1, #0
 80012fe:	a809      	add	r0, sp, #36	; 0x24
 8001300:	f000 fa16 	bl	8001730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	2100      	movs	r1, #0
 8001306:	2214      	movs	r2, #20
 8001308:	a804      	add	r0, sp, #16
 800130a:	f000 fa11 	bl	8001730 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130e:	4a18      	ldr	r2, [pc, #96]	; (8001370 <SystemClock_Config+0x7c>)
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001310:	9401      	str	r4, [sp, #4]
 8001312:	9402      	str	r4, [sp, #8]
 8001314:	9403      	str	r4, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001316:	6813      	ldr	r3, [r2, #0]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001318:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800131e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001322:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001324:	2306      	movs	r3, #6
 8001326:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001328:	2310      	movs	r3, #16
 800132a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800132c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001330:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001332:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001334:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001338:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800133a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800133c:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133e:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001340:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001342:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001344:	f7ff fab0 	bl	80008a8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001348:	230f      	movs	r3, #15
 800134a:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800134e:	4629      	mov	r1, r5
 8001350:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001354:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001356:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001358:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800135a:	f7ff fe3f 	bl	8000fdc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LCD;
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSE;
 800135e:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001362:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LCD;
 8001364:	9601      	str	r6, [sp, #4]
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001366:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001368:	f7ff ff16 	bl	8001198 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800136c:	b016      	add	sp, #88	; 0x58
 800136e:	bd70      	pop	{r4, r5, r6, pc}
 8001370:	40007000 	.word	0x40007000

08001374 <main>:
{
 8001374:	b500      	push	{lr}
 8001376:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001378:	f7fe ff14 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 800137c:	f7ff ffba 	bl	80012f4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	2214      	movs	r2, #20
 8001382:	2100      	movs	r1, #0
 8001384:	a803      	add	r0, sp, #12
 8001386:	f000 f9d3 	bl	8001730 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <main+0x140>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_SET);
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001390:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_SET);
 8001392:	4849      	ldr	r0, [pc, #292]	; (80014b8 <main+0x144>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001394:	f042 0204 	orr.w	r2, r2, #4
 8001398:	61da      	str	r2, [r3, #28]
 800139a:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IDD_CNT_EN_Pin */
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	f002 0204 	and.w	r2, r2, #4
 80013a2:	9200      	str	r2, [sp, #0]
 80013a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	61da      	str	r2, [r3, #28]
 80013b0:	69da      	ldr	r2, [r3, #28]
  hadc.Instance = ADC1;
 80013b2:	4d42      	ldr	r5, [pc, #264]	; (80014bc <main+0x148>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	f002 0201 	and.w	r2, r2, #1
 80013b8:	9201      	str	r2, [sp, #4]
 80013ba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013bc:	69da      	ldr	r2, [r3, #28]
 80013be:	f042 0202 	orr.w	r2, r2, #2
 80013c2:	61da      	str	r2, [r3, #28]
 80013c4:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	9302      	str	r3, [sp, #8]
 80013ce:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_SET);
 80013d0:	f7ff f99c 	bl	800070c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	21c0      	movs	r1, #192	; 0xc0
 80013d8:	4839      	ldr	r0, [pc, #228]	; (80014c0 <main+0x14c>)
 80013da:	f7ff f997 	bl	800070c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
 80013de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(IDD_CNT_EN_GPIO_Port, &GPIO_InitStruct);
 80013e2:	a903      	add	r1, sp, #12
 80013e4:	4834      	ldr	r0, [pc, #208]	; (80014b8 <main+0x144>)
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
 80013e6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(IDD_CNT_EN_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f7ff f8b9 	bl	8000564 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013f2:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <main+0x150>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f4:	a903      	add	r1, sp, #12
 80013f6:	4834      	ldr	r0, [pc, #208]	; (80014c8 <main+0x154>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013f8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = B1_Pin;
 80013fc:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f7ff f8b1 	bl	8000564 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001402:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	a903      	add	r1, sp, #12
 8001406:	482e      	ldr	r0, [pc, #184]	; (80014c0 <main+0x14c>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001408:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	f7ff f8a8 	bl	8000564 <HAL_GPIO_Init>
  hadc.Instance = ADC1;
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <main+0x158>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001416:	4628      	mov	r0, r5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001418:	e885 0018 	stmia.w	r5, {r3, r4}
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 800141c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001420:	636b      	str	r3, [r5, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001422:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001426:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001428:	60ec      	str	r4, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142a:	612c      	str	r4, [r5, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800142c:	616c      	str	r4, [r5, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800142e:	61ac      	str	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001430:	61ec      	str	r4, [r5, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001432:	622c      	str	r4, [r5, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001434:	626c      	str	r4, [r5, #36]	; 0x24
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001436:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001438:	63ab      	str	r3, [r5, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800143a:	63ec      	str	r4, [r5, #60]	; 0x3c
  ADC_ChannelConfTypeDef sConfig = {0};
 800143c:	9403      	str	r4, [sp, #12]
 800143e:	9404      	str	r4, [sp, #16]
 8001440:	9405      	str	r4, [sp, #20]
  hadc.Init.NbrOfConversion = 1;
 8001442:	62ae      	str	r6, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001444:	f7fe fec8 	bl	80001d8 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8001448:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800144a:	a903      	add	r1, sp, #12
 800144c:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 800144e:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001450:	9405      	str	r4, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001452:	9604      	str	r6, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001454:	f7fe ff7e 	bl	8000354 <HAL_ADC_ConfigChannel>
  hlcd.Instance = LCD;
 8001458:	481d      	ldr	r0, [pc, #116]	; (80014d0 <main+0x15c>)
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <main+0x160>)
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800145c:	6084      	str	r4, [r0, #8]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800145e:	e880 0018 	stmia.w	r0, {r3, r4}
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8001462:	230c      	movs	r3, #12
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8001464:	6104      	str	r4, [r0, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8001466:	6144      	str	r4, [r0, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8001468:	6184      	str	r4, [r0, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800146a:	61c4      	str	r4, [r0, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 800146c:	6204      	str	r4, [r0, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800146e:	6304      	str	r4, [r0, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8001470:	6284      	str	r4, [r0, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8001472:	62c4      	str	r4, [r0, #44]	; 0x2c
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8001474:	60c3      	str	r3, [r0, #12]
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8001476:	f7ff f963 	bl	8000740 <HAL_LCD_Init>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800147a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET){
 800147e:	4d12      	ldr	r5, [pc, #72]	; (80014c8 <main+0x154>)
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001480:	f504 3401 	add.w	r4, r4, #132096	; 0x20400
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET){
 8001484:	2101      	movs	r1, #1
 8001486:	4628      	mov	r0, r5
 8001488:	f7ff f93a 	bl	8000700 <HAL_GPIO_ReadPin>
 800148c:	2801      	cmp	r0, #1
 800148e:	4602      	mov	r2, r0
 8001490:	d109      	bne.n	80014a6 <main+0x132>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8001492:	2140      	movs	r1, #64	; 0x40
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff f939 	bl	800070c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	4620      	mov	r0, r4
 80014a0:	f7ff f934 	bl	800070c <HAL_GPIO_WritePin>
 80014a4:	e7ee      	b.n	8001484 <main+0x110>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff f92e 	bl	800070c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	e7f3      	b.n	800149c <main+0x128>
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020800 	.word	0x40020800
 80014bc:	20000060 	.word	0x20000060
 80014c0:	40020400 	.word	0x40020400
 80014c4:	10120000 	.word	0x10120000
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40012400 	.word	0x40012400
 80014d0:	20000024 	.word	0x20000024
 80014d4:	40002400 	.word	0x40002400

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_MspInit+0x48>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014dc:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 80014de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
 80014e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80014ec:	9201      	str	r2, [sp, #4]
 80014ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f0:	6a1a      	ldr	r2, [r3, #32]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	621a      	str	r2, [r3, #32]
 80014f8:	6a1a      	ldr	r2, [r3, #32]
 80014fa:	f002 0201 	and.w	r2, r2, #1
 80014fe:	9202      	str	r2, [sp, #8]
 8001500:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001504:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	9303      	str	r3, [sp, #12]
 8001512:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001514:	f7fe ffca 	bl	80004ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001518:	b005      	add	sp, #20
 800151a:	f85d fb04 	ldr.w	pc, [sp], #4
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001524:	b510      	push	{r4, lr}
 8001526:	4604      	mov	r4, r0
 8001528:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	2214      	movs	r2, #20
 800152c:	2100      	movs	r1, #0
 800152e:	a803      	add	r0, sp, #12
 8001530:	f000 f8fe 	bl	8001730 <memset>
  if(hadc->Instance==ADC1)
 8001534:	6822      	ldr	r2, [r4, #0]
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_ADC_MspInit+0x54>)
 8001538:	429a      	cmp	r2, r3
 800153a:	d11b      	bne.n	8001574 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800153c:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8001540:	6a1a      	ldr	r2, [r3, #32]
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8001542:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001548:	621a      	str	r2, [r3, #32]
 800154a:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800154e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001552:	9201      	str	r2, [sp, #4]
 8001554:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	69da      	ldr	r2, [r3, #28]
 8001558:	f042 0201 	orr.w	r2, r2, #1
 800155c:	61da      	str	r2, [r3, #28]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8001568:	2310      	movs	r3, #16
 800156a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156c:	2303      	movs	r3, #3
 800156e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8001570:	f7fe fff8 	bl	8000564 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001574:	b008      	add	sp, #32
 8001576:	bd10      	pop	{r4, pc}
 8001578:	40012400 	.word	0x40012400
 800157c:	40020000 	.word	0x40020000

08001580 <HAL_LCD_MspInit>:
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	2214      	movs	r2, #20
{
 8001582:	b570      	push	{r4, r5, r6, lr}
 8001584:	4604      	mov	r4, r0
 8001586:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	eb0d 0002 	add.w	r0, sp, r2
 800158c:	2100      	movs	r1, #0
 800158e:	f000 f8cf 	bl	8001730 <memset>
  if(hlcd->Instance==LCD)
 8001592:	6822      	ldr	r2, [r4, #0]
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_LCD_MspInit+0xb0>)
 8001596:	429a      	cmp	r2, r3
 8001598:	d147      	bne.n	800162a <HAL_LCD_MspInit+0xaa>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800159a:	f503 3305 	add.w	r3, r3, #136192	; 0x21400
 800159e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin 
                          |SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin 
                          |SEG22_Pin|SEG23_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2602      	movs	r6, #2
    __HAL_RCC_LCD_CLK_ENABLE();
 80015a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
 80015a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80015aa:	250b      	movs	r5, #11
    __HAL_RCC_LCD_CLK_ENABLE();
 80015ac:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80015b0:	9201      	str	r2, [sp, #4]
 80015b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b6:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b8:	f042 0204 	orr.w	r2, r2, #4
 80015bc:	61da      	str	r2, [r3, #28]
 80015be:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c0:	481c      	ldr	r0, [pc, #112]	; (8001634 <HAL_LCD_MspInit+0xb4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	f002 0204 	and.w	r2, r2, #4
 80015c6:	9202      	str	r2, [sp, #8]
 80015c8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	69da      	ldr	r2, [r3, #28]

    GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin 
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	61da      	str	r2, [r3, #28]
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	f002 0201 	and.w	r2, r2, #1
 80015da:	9203      	str	r2, [sp, #12]
 80015dc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	69da      	ldr	r2, [r3, #28]
 80015e0:	f042 0202 	orr.w	r2, r2, #2
 80015e4:	61da      	str	r2, [r3, #28]
 80015e6:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	9304      	str	r3, [sp, #16]
 80015f0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin 
 80015f2:	f640 73cf 	movw	r3, #4047	; 0xfcf
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80015f6:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin 
 80015f8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fa:	f7fe ffb3 	bl	8000564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin 
 80015fe:	f248 730e 	movw	r3, #34574	; 0x870e
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	a905      	add	r1, sp, #20
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <HAL_LCD_MspInit+0xb8>)
    GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin 
 8001606:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800160e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f7fe ffa8 	bl	8000564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin 
 8001614:	f64f 7338 	movw	r3, #65336	; 0xff38
                          |SEG5_Pin|SEG13_Pin|COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	a905      	add	r1, sp, #20
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <HAL_LCD_MspInit+0xbc>)
    GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin 
 800161c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001624:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f7fe ff9d 	bl	8000564 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 800162a:	b00a      	add	sp, #40	; 0x28
 800162c:	bd70      	pop	{r4, r5, r6, pc}
 800162e:	bf00      	nop
 8001630:	40002400 	.word	0x40002400
 8001634:	40020800 	.word	0x40020800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400

08001640 <NMI_Handler>:
 8001640:	4770      	bx	lr

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	e7fe      	b.n	8001642 <HardFault_Handler>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler>

0800164a <SVC_Handler>:
 800164a:	4770      	bx	lr

0800164c <DebugMon_Handler>:
 800164c:	4770      	bx	lr

0800164e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164e:	4770      	bx	lr

08001650 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f7fe bdb4 	b.w	80001bc <HAL_IncTick>

08001654 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <SystemInit+0x3c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800165c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800165e:	6899      	ldr	r1, [r3, #8]
 8001660:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <SystemInit+0x40>)
 8001662:	400a      	ands	r2, r1
 8001664:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800166c:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8001670:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001678:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001680:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800168a:	4b03      	ldr	r3, [pc, #12]	; (8001698 <SystemInit+0x44>)
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	4770      	bx	lr
 8001690:	40023800 	.word	0x40023800
 8001694:	88ffc00c 	.word	0x88ffc00c
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800169c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800169e:	e003      	b.n	80016a8 <LoopCopyDataInit>

080016a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016a6:	3104      	adds	r1, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016a8:	480a      	ldr	r0, [pc, #40]	; (80016d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016b0:	d3f6      	bcc.n	80016a0 <CopyDataInit>
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016b4:	e002      	b.n	80016bc <LoopFillZerobss>

080016b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016b8:	f842 3b04 	str.w	r3, [r2], #4

080016bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016c0:	d3f9      	bcc.n	80016b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016c2:	f7ff ffc7 	bl	8001654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c6:	f000 f80f 	bl	80016e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ca:	f7ff fe53 	bl	8001374 <main>
  bx lr
 80016ce:	4770      	bx	lr
  ldr r3, =_sidata
 80016d0:	0800177c 	.word	0x0800177c
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016d8:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80016dc:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80016e0:	200000b4 	.word	0x200000b4

080016e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC1_IRQHandler>
	...

080016e8 <__libc_init_array>:
 80016e8:	b570      	push	{r4, r5, r6, lr}
 80016ea:	2500      	movs	r5, #0
 80016ec:	4e0c      	ldr	r6, [pc, #48]	; (8001720 <__libc_init_array+0x38>)
 80016ee:	4c0d      	ldr	r4, [pc, #52]	; (8001724 <__libc_init_array+0x3c>)
 80016f0:	1ba4      	subs	r4, r4, r6
 80016f2:	10a4      	asrs	r4, r4, #2
 80016f4:	42a5      	cmp	r5, r4
 80016f6:	d109      	bne.n	800170c <__libc_init_array+0x24>
 80016f8:	f000 f822 	bl	8001740 <_init>
 80016fc:	2500      	movs	r5, #0
 80016fe:	4e0a      	ldr	r6, [pc, #40]	; (8001728 <__libc_init_array+0x40>)
 8001700:	4c0a      	ldr	r4, [pc, #40]	; (800172c <__libc_init_array+0x44>)
 8001702:	1ba4      	subs	r4, r4, r6
 8001704:	10a4      	asrs	r4, r4, #2
 8001706:	42a5      	cmp	r5, r4
 8001708:	d105      	bne.n	8001716 <__libc_init_array+0x2e>
 800170a:	bd70      	pop	{r4, r5, r6, pc}
 800170c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001710:	4798      	blx	r3
 8001712:	3501      	adds	r5, #1
 8001714:	e7ee      	b.n	80016f4 <__libc_init_array+0xc>
 8001716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800171a:	4798      	blx	r3
 800171c:	3501      	adds	r5, #1
 800171e:	e7f2      	b.n	8001706 <__libc_init_array+0x1e>
 8001720:	08001774 	.word	0x08001774
 8001724:	08001774 	.word	0x08001774
 8001728:	08001774 	.word	0x08001774
 800172c:	08001778 	.word	0x08001778

08001730 <memset>:
 8001730:	4603      	mov	r3, r0
 8001732:	4402      	add	r2, r0
 8001734:	4293      	cmp	r3, r2
 8001736:	d100      	bne.n	800173a <memset+0xa>
 8001738:	4770      	bx	lr
 800173a:	f803 1b01 	strb.w	r1, [r3], #1
 800173e:	e7f9      	b.n	8001734 <memset+0x4>

08001740 <_init>:
 8001740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001742:	bf00      	nop
 8001744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001746:	bc08      	pop	{r3}
 8001748:	469e      	mov	lr, r3
 800174a:	4770      	bx	lr

0800174c <_fini>:
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174e:	bf00      	nop
 8001750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001752:	bc08      	pop	{r3}
 8001754:	469e      	mov	lr, r3
 8001756:	4770      	bx	lr
