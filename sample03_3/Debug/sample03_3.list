
sample03_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f04  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e8  20000004  08003068  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000ec  08003068  000200ec  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010545  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f5b  00000000  00000000  00030572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000950  00000000  00000000  000324d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000878  00000000  00000000  00032e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004b4f  00000000  00000000  00033698  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003039  00000000  00000000  000381e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003b220  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002568  00000000  00000000  0003b29c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08003028 	.word	0x08003028

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08003028 	.word	0x08003028

0800017c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000180:	2003      	movs	r0, #3
 8000182:	f000 fb91 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f000 f806 	bl	8000198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800018c:	f002 fd6a 	bl	8002c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
	...

08000198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 80001a0:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <HAL_InitTick+0x30>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a09      	ldr	r2, [pc, #36]	; (80001cc <HAL_InitTick+0x34>)
 80001a6:	fba2 2303 	umull	r2, r3, r2, r3
 80001aa:	099b      	lsrs	r3, r3, #6
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 fbb0 	bl	8000912 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001b2:	2200      	movs	r2, #0
 80001b4:	6879      	ldr	r1, [r7, #4]
 80001b6:	f04f 30ff 	mov.w	r0, #4294967295
 80001ba:	f000 fb80 	bl	80008be <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	3708      	adds	r7, #8
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	20000000 	.word	0x20000000
 80001cc:	10624dd3 	.word	0x10624dd3

080001d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  uwTick++;
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <HAL_IncTick+0x18>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	3301      	adds	r3, #1
 80001da:	4a03      	ldr	r2, [pc, #12]	; (80001e8 <HAL_IncTick+0x18>)
 80001dc:	6013      	str	r3, [r2, #0]
}
 80001de:	bf00      	nop
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000020 	.word	0x20000020

080001ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  return uwTick;
 80001f0:	4b02      	ldr	r3, [pc, #8]	; (80001fc <HAL_GetTick+0x10>)
 80001f2:	681b      	ldr	r3, [r3, #0]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	20000020 	.word	0x20000020

08000200 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b08e      	sub	sp, #56	; 0x38
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000208:	2300      	movs	r3, #0
 800020a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d101      	bne.n	8000220 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800021c:	2301      	movs	r3, #1
 800021e:	e11e      	b.n	800045e <HAL_ADC_Init+0x25e>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	2b00      	cmp	r3, #0
 800022c:	d115      	bne.n	800025a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2200      	movs	r2, #0
 8000238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800023c:	4a8a      	ldr	r2, [pc, #552]	; (8000468 <HAL_ADC_Init+0x268>)
 800023e:	4b8a      	ldr	r3, [pc, #552]	; (8000468 <HAL_ADC_Init+0x268>)
 8000240:	6a1b      	ldr	r3, [r3, #32]
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6213      	str	r3, [r2, #32]
 8000248:	4b87      	ldr	r3, [pc, #540]	; (8000468 <HAL_ADC_Init+0x268>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	60bb      	str	r3, [r7, #8]
 8000252:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f002 fd35 	bl	8002cc4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025e:	f003 0310 	and.w	r3, r3, #16
 8000262:	2b00      	cmp	r3, #0
 8000264:	f040 80f6 	bne.w	8000454 <HAL_ADC_Init+0x254>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000270:	f023 0302 	bic.w	r3, r3, #2
 8000274:	f043 0202 	orr.w	r2, r3, #2
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800027c:	497b      	ldr	r1, [pc, #492]	; (800046c <HAL_ADC_Init+0x26c>)
 800027e:	4b7b      	ldr	r3, [pc, #492]	; (800046c <HAL_ADC_Init+0x26c>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	4313      	orrs	r3, r2
 800028c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                 |
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                              |
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                 |
 8000296:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800029c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002a0:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	fa93 f3a3 	rbit	r3, r3
 80002a8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	fab3 f383 	clz	r3, r3
 80002b0:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                              |
 80002b4:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                              |
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 80002ba:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80002c0:	2302      	movs	r3, #2
 80002c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002c6:	fa93 f3a3 	rbit	r3, r3
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80002cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ce:	fab3 f383 	clz	r3, r3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                              |
 80002d6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                 |
 80002d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80002da:	4313      	orrs	r3, r2
 80002dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002e2:	2b10      	cmp	r3, #16
 80002e4:	d007      	beq.n	80002f6 <HAL_ADC_Init+0xf6>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80002ee:	4313      	orrs	r3, r2
 80002f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80002f2:	4313      	orrs	r3, r2
 80002f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000300:	2b40      	cmp	r3, #64	; 0x40
 8000302:	d04d      	beq.n	80003a0 <HAL_ADC_Init+0x1a0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800030a:	4313      	orrs	r3, r2
 800030c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000316:	431a      	orrs	r2, r3
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000320:	d003      	beq.n	800032a <HAL_ADC_Init+0x12a>
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d102      	bne.n	8000330 <HAL_ADC_Init+0x130>
 800032a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032e:	e000      	b.n	8000332 <HAL_ADC_Init+0x132>
 8000330:	2300      	movs	r3, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000332:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000336:	4313      	orrs	r3, r2
 8000338:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033e:	2b01      	cmp	r3, #1
 8000340:	d124      	bne.n	800038c <HAL_ADC_Init+0x18c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000346:	2b00      	cmp	r3, #0
 8000348:	d114      	bne.n	8000374 <HAL_ADC_Init+0x174>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	1e5a      	subs	r2, r3, #1
 8000350:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000354:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000356:	69bb      	ldr	r3, [r7, #24]
 8000358:	fa93 f3a3 	rbit	r3, r3
 800035c:	617b      	str	r3, [r7, #20]
  return(result);
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	fab3 f383 	clz	r3, r3
 8000364:	fa02 f303 	lsl.w	r3, r2, r3
 8000368:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800036c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800036e:	4313      	orrs	r3, r2
 8000370:	633b      	str	r3, [r7, #48]	; 0x30
 8000372:	e00b      	b.n	800038c <HAL_ADC_Init+0x18c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000378:	f043 0220 	orr.w	r2, r3, #32
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000384:	f043 0201 	orr.w	r2, r3, #1
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	6859      	ldr	r1, [r3, #4]
 8000396:	4b36      	ldr	r3, [pc, #216]	; (8000470 <HAL_ADC_Init+0x270>)
 8000398:	400b      	ands	r3, r1
 800039a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800039c:	430b      	orrs	r3, r1
 800039e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	6899      	ldr	r1, [r3, #8]
 80003aa:	4b32      	ldr	r3, [pc, #200]	; (8000474 <HAL_ADC_Init+0x274>)
 80003ac:	400b      	ands	r3, r1
 80003ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80003b0:	430b      	orrs	r3, r1
 80003b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003bc:	d003      	beq.n	80003c6 <HAL_ADC_Init+0x1c6>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	691b      	ldr	r3, [r3, #16]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d118      	bne.n	80003f8 <HAL_ADC_Init+0x1f8>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	6812      	ldr	r2, [r2, #0]
 80003ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80003d0:	f022 71f8 	bic.w	r1, r2, #32505856	; 0x1f00000
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80003d8:	1e50      	subs	r0, r2, #1
 80003da:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80003de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003e0:	693a      	ldr	r2, [r7, #16]
 80003e2:	fa92 f2a2 	rbit	r2, r2
 80003e6:	60fa      	str	r2, [r7, #12]
  return(result);
 80003e8:	68fa      	ldr	r2, [r7, #12]
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	fa00 f202 	lsl.w	r2, r0, r2
 80003f2:	430a      	orrs	r2, r1
 80003f4:	631a      	str	r2, [r3, #48]	; 0x30
 80003f6:	e007      	b.n	8000408 <HAL_ADC_Init+0x208>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	6812      	ldr	r2, [r2, #0]
 8000400:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000402:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000406:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	689a      	ldr	r2, [r3, #8]
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <HAL_ADC_Init+0x278>)
 8000410:	4013      	ands	r3, r2
 8000412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000414:	4293      	cmp	r3, r2
 8000416:	d10b      	bne.n	8000430 <HAL_ADC_Init+0x230>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2200      	movs	r2, #0
 800041c:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	f023 0303 	bic.w	r3, r3, #3
 8000426:	f043 0201 	orr.w	r2, r3, #1
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	64da      	str	r2, [r3, #76]	; 0x4c
 800042e:	e014      	b.n	800045a <HAL_ADC_Init+0x25a>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000434:	f023 0312 	bic.w	r3, r3, #18
 8000438:	f043 0210 	orr.w	r2, r3, #16
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000444:	f043 0201 	orr.w	r2, r3, #1
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800044c:	2301      	movs	r3, #1
 800044e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000452:	e002      	b.n	800045a <HAL_ADC_Init+0x25a>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000454:	2301      	movs	r3, #1
 8000456:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800045a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800045e:	4618      	mov	r0, r3
 8000460:	3738      	adds	r7, #56	; 0x38
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40023800 	.word	0x40023800
 800046c:	40012700 	.word	0x40012700
 8000470:	fcfc16ff 	.word	0xfcfc16ff
 8000474:	c0fff189 	.word	0xc0fff189
 8000478:	bf80fffe 	.word	0xbf80fffe

0800047c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800047c:	b490      	push	{r4, r7}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000486:	2300      	movs	r3, #0
 8000488:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000494:	2b01      	cmp	r3, #1
 8000496:	d101      	bne.n	800049c <HAL_ADC_ConfigChannel+0x20>
 8000498:	2302      	movs	r3, #2
 800049a:	e134      	b.n	8000706 <HAL_ADC_ConfigChannel+0x28a>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2201      	movs	r2, #1
 80004a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	2b06      	cmp	r3, #6
 80004aa:	d81c      	bhi.n	80004e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	6819      	ldr	r1, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	685a      	ldr	r2, [r3, #4]
 80004ba:	4613      	mov	r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	4413      	add	r3, r2
 80004c0:	3b05      	subs	r3, #5
 80004c2:	221f      	movs	r2, #31
 80004c4:	fa02 f303 	lsl.w	r3, r2, r3
 80004c8:	43db      	mvns	r3, r3
 80004ca:	4018      	ands	r0, r3
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	681c      	ldr	r4, [r3, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	685a      	ldr	r2, [r3, #4]
 80004d4:	4613      	mov	r3, r2
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	3b05      	subs	r3, #5
 80004dc:	fa04 f303 	lsl.w	r3, r4, r3
 80004e0:	4303      	orrs	r3, r0
 80004e2:	640b      	str	r3, [r1, #64]	; 0x40
 80004e4:	e07e      	b.n	80005e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	2b0c      	cmp	r3, #12
 80004ec:	d81c      	bhi.n	8000528 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6819      	ldr	r1, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	685a      	ldr	r2, [r3, #4]
 80004fc:	4613      	mov	r3, r2
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	4413      	add	r3, r2
 8000502:	3b23      	subs	r3, #35	; 0x23
 8000504:	221f      	movs	r2, #31
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	43db      	mvns	r3, r3
 800050c:	4018      	ands	r0, r3
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	681c      	ldr	r4, [r3, #0]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	4613      	mov	r3, r2
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	4413      	add	r3, r2
 800051c:	3b23      	subs	r3, #35	; 0x23
 800051e:	fa04 f303 	lsl.w	r3, r4, r3
 8000522:	4303      	orrs	r3, r0
 8000524:	63cb      	str	r3, [r1, #60]	; 0x3c
 8000526:	e05d      	b.n	80005e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	2b12      	cmp	r3, #18
 800052e:	d81c      	bhi.n	800056a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6819      	ldr	r1, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	4613      	mov	r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	4413      	add	r3, r2
 8000544:	3b41      	subs	r3, #65	; 0x41
 8000546:	221f      	movs	r2, #31
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	4018      	ands	r0, r3
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	681c      	ldr	r4, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	4613      	mov	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	3b41      	subs	r3, #65	; 0x41
 8000560:	fa04 f303 	lsl.w	r3, r4, r3
 8000564:	4303      	orrs	r3, r0
 8000566:	638b      	str	r3, [r1, #56]	; 0x38
 8000568:	e03c      	b.n	80005e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	2b18      	cmp	r3, #24
 8000570:	d81c      	bhi.n	80005ac <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6819      	ldr	r1, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	3b5f      	subs	r3, #95	; 0x5f
 8000588:	221f      	movs	r2, #31
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	4018      	ands	r0, r3
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	681c      	ldr	r4, [r3, #0]
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685a      	ldr	r2, [r3, #4]
 800059a:	4613      	mov	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	4413      	add	r3, r2
 80005a0:	3b5f      	subs	r3, #95	; 0x5f
 80005a2:	fa04 f303 	lsl.w	r3, r4, r3
 80005a6:	4303      	orrs	r3, r0
 80005a8:	634b      	str	r3, [r1, #52]	; 0x34
 80005aa:	e01b      	b.n	80005e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	685a      	ldr	r2, [r3, #4]
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	3b7d      	subs	r3, #125	; 0x7d
 80005c2:	221f      	movs	r2, #31
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	43db      	mvns	r3, r3
 80005ca:	4018      	ands	r0, r3
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	681c      	ldr	r4, [r3, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	685a      	ldr	r2, [r3, #4]
 80005d4:	4613      	mov	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	3b7d      	subs	r3, #125	; 0x7d
 80005dc:	fa04 f303 	lsl.w	r3, r4, r3
 80005e0:	4303      	orrs	r3, r0
 80005e2:	630b      	str	r3, [r1, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b09      	cmp	r3, #9
 80005ea:	d81a      	bhi.n	8000622 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6819      	ldr	r1, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6958      	ldr	r0, [r3, #20]
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4613      	mov	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4413      	add	r3, r2
 8000600:	2207      	movs	r2, #7
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	4018      	ands	r0, r3
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	689c      	ldr	r4, [r3, #8]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4613      	mov	r3, r2
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	4413      	add	r3, r2
 8000618:	fa04 f303 	lsl.w	r3, r4, r3
 800061c:	4303      	orrs	r3, r0
 800061e:	614b      	str	r3, [r1, #20]
 8000620:	e042      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b13      	cmp	r3, #19
 8000628:	d81c      	bhi.n	8000664 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6819      	ldr	r1, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6918      	ldr	r0, [r3, #16]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	4413      	add	r3, r2
 800063e:	3b1e      	subs	r3, #30
 8000640:	2207      	movs	r2, #7
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	43db      	mvns	r3, r3
 8000648:	4018      	ands	r0, r3
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	689c      	ldr	r4, [r3, #8]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4613      	mov	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	3b1e      	subs	r3, #30
 800065a:	fa04 f303 	lsl.w	r3, r4, r3
 800065e:	4303      	orrs	r3, r0
 8000660:	610b      	str	r3, [r1, #16]
 8000662:	e021      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b1a      	cmp	r3, #26
 800066a:	d81c      	bhi.n	80006a6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6819      	ldr	r1, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	68d8      	ldr	r0, [r3, #12]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	3b3c      	subs	r3, #60	; 0x3c
 8000682:	2207      	movs	r2, #7
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	43db      	mvns	r3, r3
 800068a:	4018      	ands	r0, r3
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	689c      	ldr	r4, [r3, #8]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	3b3c      	subs	r3, #60	; 0x3c
 800069c:	fa04 f303 	lsl.w	r3, r4, r3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	60cb      	str	r3, [r1, #12]
 80006a4:	e000      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x22c>
  __ASM volatile ("nop");
 80006a6:	bf00      	nop
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b10      	cmp	r3, #16
 80006ae:	d003      	beq.n	80006b8 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006b4:	2b11      	cmp	r3, #17
 80006b6:	d121      	bne.n	80006fc <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_ADC_ConfigChannel+0x294>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d11b      	bne.n	80006fc <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <HAL_ADC_ConfigChannel+0x294>)
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_ADC_ConfigChannel+0x294>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006ce:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b10      	cmp	r3, #16
 80006d6:	d111      	bne.n	80006fc <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_ADC_ConfigChannel+0x298>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_ADC_ConfigChannel+0x29c>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	0c9a      	lsrs	r2, r3, #18
 80006e4:	4613      	mov	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80006ee:	e002      	b.n	80006f6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f9      	bne.n	80006f0 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bc90      	pop	{r4, r7}
 800070e:	4770      	bx	lr
 8000710:	40012700 	.word	0x40012700
 8000714:	20000000 	.word	0x20000000
 8000718:	431bde83 	.word	0x431bde83

0800071c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800078a:	4908      	ldr	r1, [pc, #32]	; (80007ac <NVIC_EnableIRQ+0x2c>)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	095b      	lsrs	r3, r3, #5
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	f002 021f 	and.w	r2, r2, #31
 8000798:	2001      	movs	r0, #1
 800079a:	fa00 f202 	lsl.w	r2, r0, r2
 800079e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	e000e100 	.word	0xe000e100

080007b0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80007bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	da0b      	bge.n	80007dc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c4:	490d      	ldr	r1, [pc, #52]	; (80007fc <NVIC_SetPriority+0x4c>)
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f003 030f 	and.w	r3, r3, #15
 80007cc:	3b04      	subs	r3, #4
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	b2d2      	uxtb	r2, r2
 80007d2:	0112      	lsls	r2, r2, #4
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007da:	e009      	b.n	80007f0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	4908      	ldr	r1, [pc, #32]	; (8000800 <NVIC_SetPriority+0x50>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00
 8000800:	e000e100 	.word	0xe000e100

08000804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000804:	b480      	push	{r7}
 8000806:	b089      	sub	sp, #36	; 0x24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	f1c3 0307 	rsb	r3, r3, #7
 800081e:	2b04      	cmp	r3, #4
 8000820:	bf28      	it	cs
 8000822:	2304      	movcs	r3, #4
 8000824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3304      	adds	r3, #4
 800082a:	2b06      	cmp	r3, #6
 800082c:	d902      	bls.n	8000834 <NVIC_EncodePriority+0x30>
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3b03      	subs	r3, #3
 8000832:	e000      	b.n	8000836 <NVIC_EncodePriority+0x32>
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	2201      	movs	r2, #1
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	401a      	ands	r2, r3
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800084a:	2101      	movs	r1, #1
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	1e59      	subs	r1, r3, #1
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	4313      	orrs	r3, r2
         );
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000874:	d301      	bcc.n	800087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2301      	movs	r3, #1
 8000878:	e00f      	b.n	800089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <SysTick_Config+0x40>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000882:	210f      	movs	r1, #15
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f7ff ff92 	bl	80007b0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SysTick_Config+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Config+0x40>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff33 	bl	800071c <NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff48 	bl	8000764 <NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ff92 	bl	8000804 <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff61 	bl	80007b0 <NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff3b 	bl	8000780 <NVIC_EnableIRQ>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ffa2 	bl	8000864 <SysTick_Config>
 8000920:	4603      	mov	r3, r0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800092c:	b480      	push	{r7}
 800092e:	b087      	sub	sp, #28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000942:	e154      	b.n	8000bee <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2101      	movs	r1, #1
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 8146 	beq.w	8000be8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d003      	beq.n	800096c <HAL_GPIO_Init+0x40>
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2b12      	cmp	r3, #18
 800096a:	d123      	bne.n	80009b4 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	08da      	lsrs	r2, r3, #3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3208      	adds	r2, #8
 8000974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000978:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	f003 0307 	and.w	r3, r3, #7
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	220f      	movs	r2, #15
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	691a      	ldr	r2, [r3, #16]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	08da      	lsrs	r2, r3, #3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3208      	adds	r2, #8
 80009ae:	6939      	ldr	r1, [r7, #16]
 80009b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	2203      	movs	r2, #3
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 0203 	and.w	r2, r3, #3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d00b      	beq.n	8000a08 <HAL_GPIO_Init+0xdc>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d007      	beq.n	8000a08 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009fc:	2b11      	cmp	r3, #17
 80009fe:	d003      	beq.n	8000a08 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	2b12      	cmp	r3, #18
 8000a06:	d130      	bne.n	8000a6a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2203      	movs	r2, #3
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000a3e:	2201      	movs	r2, #1
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	f003 0201 	and.w	r2, r3, #1
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80a0 	beq.w	8000be8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa8:	4a57      	ldr	r2, [pc, #348]	; (8000c08 <HAL_GPIO_Init+0x2dc>)
 8000aaa:	4b57      	ldr	r3, [pc, #348]	; (8000c08 <HAL_GPIO_Init+0x2dc>)
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6213      	str	r3, [r2, #32]
 8000ab4:	4b54      	ldr	r3, [pc, #336]	; (8000c08 <HAL_GPIO_Init+0x2dc>)
 8000ab6:	6a1b      	ldr	r3, [r3, #32]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000ac0:	4a52      	ldr	r2, [pc, #328]	; (8000c0c <HAL_GPIO_Init+0x2e0>)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	220f      	movs	r2, #15
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a4a      	ldr	r2, [pc, #296]	; (8000c10 <HAL_GPIO_Init+0x2e4>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d019      	beq.n	8000b20 <HAL_GPIO_Init+0x1f4>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a49      	ldr	r2, [pc, #292]	; (8000c14 <HAL_GPIO_Init+0x2e8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d013      	beq.n	8000b1c <HAL_GPIO_Init+0x1f0>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a48      	ldr	r2, [pc, #288]	; (8000c18 <HAL_GPIO_Init+0x2ec>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d00d      	beq.n	8000b18 <HAL_GPIO_Init+0x1ec>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a47      	ldr	r2, [pc, #284]	; (8000c1c <HAL_GPIO_Init+0x2f0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d007      	beq.n	8000b14 <HAL_GPIO_Init+0x1e8>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a46      	ldr	r2, [pc, #280]	; (8000c20 <HAL_GPIO_Init+0x2f4>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d101      	bne.n	8000b10 <HAL_GPIO_Init+0x1e4>
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	e008      	b.n	8000b22 <HAL_GPIO_Init+0x1f6>
 8000b10:	2305      	movs	r3, #5
 8000b12:	e006      	b.n	8000b22 <HAL_GPIO_Init+0x1f6>
 8000b14:	2303      	movs	r3, #3
 8000b16:	e004      	b.n	8000b22 <HAL_GPIO_Init+0x1f6>
 8000b18:	2302      	movs	r3, #2
 8000b1a:	e002      	b.n	8000b22 <HAL_GPIO_Init+0x1f6>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <HAL_GPIO_Init+0x1f6>
 8000b20:	2300      	movs	r3, #0
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	f002 0203 	and.w	r2, r2, #3
 8000b28:	0092      	lsls	r2, r2, #2
 8000b2a:	4093      	lsls	r3, r2
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b32:	4936      	ldr	r1, [pc, #216]	; (8000c0c <HAL_GPIO_Init+0x2e0>)
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	3302      	adds	r3, #2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b40:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <HAL_GPIO_Init+0x2f8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b64:	4a2f      	ldr	r2, [pc, #188]	; (8000c24 <HAL_GPIO_Init+0x2f8>)
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <HAL_GPIO_Init+0x2f8>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b8e:	4a25      	ldr	r2, [pc, #148]	; (8000c24 <HAL_GPIO_Init+0x2f8>)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <HAL_GPIO_Init+0x2f8>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bb8:	4a1a      	ldr	r2, [pc, #104]	; (8000c24 <HAL_GPIO_Init+0x2f8>)
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_GPIO_Init+0x2f8>)
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <HAL_GPIO_Init+0x2f8>)
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	3301      	adds	r3, #1
 8000bec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f47f aea3 	bne.w	8000944 <HAL_GPIO_Init+0x18>
  } 
}
 8000bfe:	bf00      	nop
 8000c00:	371c      	adds	r7, #28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40020400 	.word	0x40020400
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40010400 	.word	0x40010400

08000c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	691a      	ldr	r2, [r3, #16]
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e001      	b.n	8000c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	807b      	strh	r3, [r7, #2]
 8000c62:	4613      	mov	r3, r2
 8000c64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c66:	787b      	ldrb	r3, [r7, #1]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000c72:	e003      	b.n	8000c7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	041a      	lsls	r2, r3, #16
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
	...

08000c88 <HAL_LCD_Init>:
  *         The LCD HighDrive can be enabled/disabled using related macros up to user.
  * @param  hlcd: LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  uint8_t counter = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]
    
  /* Check the LCD handle allocation */
  if(hlcd == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_LCD_Init+0x1a>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e0a8      	b.n	8000df4 <HAL_LCD_Init+0x16c>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast)); 
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency)); 
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode)); 
  assert_param(IS_LCD_MUXSEGMENT(hlcd->Init.MuxSegment));
  
  if(hlcd->State == HAL_LCD_STATE_RESET)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d106      	bne.n	8000cbc <HAL_LCD_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f002 f844 	bl	8002d44 <HAL_LCD_MspInit>
  }
  
  hlcd->State = HAL_LCD_STATE_BUSY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	6812      	ldr	r2, [r2, #0]
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	f022 0201 	bic.w	r2, r2, #1
 8000cd2:	601a      	str	r2, [r3, #0]
  
  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e00a      	b.n	8000cf0 <HAL_LCD_Init+0x68>
  {
    hlcd->Instance->RAM[counter] = 0;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	3301      	adds	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b0f      	cmp	r3, #15
 8000cf4:	d9f1      	bls.n	8000cda <HAL_LCD_Init+0x52>
  }
  /* Enable the display request */
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	6892      	ldr	r2, [r2, #8]
 8000d00:	f042 0204 	orr.w	r2, r2, #4
 8000d04:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value 
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD[0] bit according to hlcd->Init.HighDrive value */
   MODIFY_REG(hlcd->Instance->FCR, \
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6859      	ldr	r1, [r3, #4]
 8000d10:	4b3a      	ldr	r3, [pc, #232]	; (8000dfc <HAL_LCD_Init+0x174>)
 8000d12:	400b      	ands	r3, r1
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	6848      	ldr	r0, [r1, #4]
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	6889      	ldr	r1, [r1, #8]
 8000d1c:	4308      	orrs	r0, r1
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000d22:	4308      	orrs	r0, r1
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000d28:	4308      	orrs	r0, r1
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	69c9      	ldr	r1, [r1, #28]
 8000d2e:	4308      	orrs	r0, r1
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	6a09      	ldr	r1, [r1, #32]
 8000d34:	4308      	orrs	r0, r1
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	6989      	ldr	r1, [r1, #24]
 8000d3a:	4308      	orrs	r0, r1
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000d40:	4301      	orrs	r1, r0
 8000d42:	430b      	orrs	r3, r1
 8000d44:	6053      	str	r3, [r2, #4]
             hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register 
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  LCD_WaitForSynchro(hlcd);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 f85a 	bl	8000e00 <LCD_WaitForSynchro>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value 
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	f022 01fe 	bic.w	r1, r2, #254	; 0xfe
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68d0      	ldr	r0, [r2, #12]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	6912      	ldr	r2, [r2, #16]
 8000d62:	4310      	orrs	r0, r2
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6952      	ldr	r2, [r2, #20]
 8000d68:	4310      	orrs	r0, r2
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d6e:	4302      	orrs	r2, r0
 8000d70:	430a      	orrs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
    (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
    (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));
  
  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	f042 0201 	orr.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000d84:	f7ff fa32 	bl	80001ec <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
      
  /* Wait Until the LCD is enabled */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000d8a:	e00c      	b.n	8000da6 <HAL_LCD_Init+0x11e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000d8c:	f7ff fa2e 	bl	80001ec <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d9a:	d904      	bls.n	8000da6 <HAL_LCD_Init+0x11e>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;     
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2208      	movs	r2, #8
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e026      	b.n	8000df4 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d1eb      	bne.n	8000d8c <HAL_LCD_Init+0x104>
    } 
  }
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000db4:	f7ff fa1a 	bl	80001ec <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  
  /*!< Wait Until the LCD Booster is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000dba:	e00c      	b.n	8000dd6 <HAL_LCD_Init+0x14e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000dbc:	f7ff fa16 	bl	80001ec <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dca:	d904      	bls.n	8000dd6 <HAL_LCD_Init+0x14e>
    {   
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2210      	movs	r2, #16
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e00e      	b.n	8000df4 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	2b10      	cmp	r3, #16
 8000de2:	d1eb      	bne.n	8000dbc <HAL_LCD_Init+0x134>
    } 
  }
 
  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	fc00000f 	.word	0xfc00000f

08000e00 <LCD_WaitForSynchro>:
  * @brief  Waits until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00; 
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000e0c:	f7ff f9ee 	bl	80001ec <HAL_GetTick>
 8000e10:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000e12:	e00c      	b.n	8000e2e <LCD_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000e14:	f7ff f9ea 	bl	80001ec <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e22:	d904      	bls.n	8000e2e <LCD_WaitForSynchro+0x2e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e007      	b.n	8000e3e <LCD_WaitForSynchro+0x3e>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 0320 	and.w	r3, r3, #32
 8000e38:	2b20      	cmp	r3, #32
 8000e3a:	d1eb      	bne.n	8000e14 <LCD_WaitForSynchro+0x14>
    }
  }

  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0e6      	sub	sp, #408	; 0x198
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8123 	beq.w	80010ae <HAL_RCC_OscConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e68:	4bbc      	ldr	r3, [pc, #752]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d00c      	beq.n	8000e8e <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e74:	4bb9      	ldr	r3, [pc, #740]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b0c      	cmp	r3, #12
 8000e7e:	d146      	bne.n	8000f0e <HAL_RCC_OscConfig+0xc6>
 8000e80:	4bb6      	ldr	r3, [pc, #728]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8c:	d13f      	bne.n	8000f0e <HAL_RCC_OscConfig+0xc6>
 8000e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e92:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e96:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000e9a:	fa93 f3a3 	rbit	r3, r3
 8000e9e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  return(result);
 8000ea2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea6:	fab3 f383 	clz	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	095b      	lsrs	r3, r3, #5
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d102      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x78>
 8000eba:	4ba8      	ldr	r3, [pc, #672]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	e001      	b.n	8000ec4 <HAL_RCC_OscConfig+0x7c>
 8000ec0:	4ba6      	ldr	r3, [pc, #664]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ec8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ecc:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000ed0:	fa92 f2a2 	rbit	r2, r2
 8000ed4:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
  return(result);
 8000ed8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8000edc:	fab2 f282 	clz	r2, r2
 8000ee0:	b252      	sxtb	r2, r2
 8000ee2:	f042 0220 	orr.w	r2, r2, #32
 8000ee6:	b252      	sxtb	r2, r2
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	f002 021f 	and.w	r2, r2, #31
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 80d8 	beq.w	80010ac <HAL_RCC_OscConfig+0x264>
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f040 80d2 	bne.w	80010ac <HAL_RCC_OscConfig+0x264>
      {
        return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f000 bf10 	b.w	8001d2e <HAL_RCC_OscConfig+0xee6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d106      	bne.n	8000f26 <HAL_RCC_OscConfig+0xde>
 8000f18:	4a90      	ldr	r2, [pc, #576]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f1a:	4b90      	ldr	r3, [pc, #576]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	e02f      	b.n	8000f86 <HAL_RCC_OscConfig+0x13e>
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10c      	bne.n	8000f4a <HAL_RCC_OscConfig+0x102>
 8000f30:	4a8a      	ldr	r2, [pc, #552]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f32:	4b8a      	ldr	r3, [pc, #552]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4a87      	ldr	r2, [pc, #540]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f3e:	4b87      	ldr	r3, [pc, #540]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	e01d      	b.n	8000f86 <HAL_RCC_OscConfig+0x13e>
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	d10c      	bne.n	8000f6e <HAL_RCC_OscConfig+0x126>
 8000f54:	4a81      	ldr	r2, [pc, #516]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f56:	4b81      	ldr	r3, [pc, #516]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4a7e      	ldr	r2, [pc, #504]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f62:	4b7e      	ldr	r3, [pc, #504]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e00b      	b.n	8000f86 <HAL_RCC_OscConfig+0x13e>
 8000f6e:	4a7b      	ldr	r2, [pc, #492]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f70:	4b7a      	ldr	r3, [pc, #488]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4a78      	ldr	r2, [pc, #480]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f7c:	4b77      	ldr	r3, [pc, #476]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f84:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d046      	beq.n	800101e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff f92c 	bl	80001ec <HAL_GetTick>
 8000f94:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f98:	e00a      	b.n	8000fb0 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f9a:	f7ff f927 	bl	80001ec <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	; 0x64
 8000fa8:	d902      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	f000 bebf 	b.w	8001d2e <HAL_RCC_OscConfig+0xee6>
 8000fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 8000fc4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d102      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x19a>
 8000fdc:	4b5f      	ldr	r3, [pc, #380]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	e001      	b.n	8000fe6 <HAL_RCC_OscConfig+0x19e>
 8000fe2:	4b5e      	ldr	r3, [pc, #376]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fee:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ff2:	fa92 f2a2 	rbit	r2, r2
 8000ff6:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
  return(result);
 8000ffa:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8000ffe:	fab2 f282 	clz	r2, r2
 8001002:	b252      	sxtb	r2, r2
 8001004:	f042 0220 	orr.w	r2, r2, #32
 8001008:	b252      	sxtb	r2, r2
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	f002 021f 	and.w	r2, r2, #31
 8001010:	2101      	movs	r1, #1
 8001012:	fa01 f202 	lsl.w	r2, r1, r2
 8001016:	4013      	ands	r3, r2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0be      	beq.n	8000f9a <HAL_RCC_OscConfig+0x152>
 800101c:	e047      	b.n	80010ae <HAL_RCC_OscConfig+0x266>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101e:	f7ff f8e5 	bl	80001ec <HAL_GetTick>
 8001022:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	e00a      	b.n	800103e <HAL_RCC_OscConfig+0x1f6>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff f8e0 	bl	80001ec <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b64      	cmp	r3, #100	; 0x64
 8001036:	d902      	bls.n	800103e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	f000 be78 	b.w	8001d2e <HAL_RCC_OscConfig+0xee6>
 800103e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001042:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001052:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	fab3 f383 	clz	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	095b      	lsrs	r3, r3, #5
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d102      	bne.n	8001070 <HAL_RCC_OscConfig+0x228>
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <HAL_RCC_OscConfig+0x314>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	e001      	b.n	8001074 <HAL_RCC_OscConfig+0x22c>
 8001070:	4b3a      	ldr	r3, [pc, #232]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8001072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001074:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001078:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001080:	fa92 f2a2 	rbit	r2, r2
 8001084:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
  return(result);
 8001088:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800108c:	fab2 f282 	clz	r2, r2
 8001090:	b252      	sxtb	r2, r2
 8001092:	f042 0220 	orr.w	r2, r2, #32
 8001096:	b252      	sxtb	r2, r2
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	f002 021f 	and.w	r2, r2, #31
 800109e:	2101      	movs	r1, #1
 80010a0:	fa01 f202 	lsl.w	r2, r1, r2
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1be      	bne.n	8001028 <HAL_RCC_OscConfig+0x1e0>
 80010aa:	e000      	b.n	80010ae <HAL_RCC_OscConfig+0x266>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 813e 	beq.w	800133a <HAL_RCC_OscConfig+0x4f2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010be:	4b27      	ldr	r3, [pc, #156]	; (800115c <HAL_RCC_OscConfig+0x314>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d00b      	beq.n	80010e2 <HAL_RCC_OscConfig+0x29a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_RCC_OscConfig+0x314>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b0c      	cmp	r3, #12
 80010d4:	d15f      	bne.n	8001196 <HAL_RCC_OscConfig+0x34e>
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_RCC_OscConfig+0x314>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d159      	bne.n	8001196 <HAL_RCC_OscConfig+0x34e>
 80010e2:	2302      	movs	r3, #2
 80010e4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80010ec:	fa93 f3a3 	rbit	r3, r3
 80010f0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 80010f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f8:	fab3 f383 	clz	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d102      	bne.n	8001112 <HAL_RCC_OscConfig+0x2ca>
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_RCC_OscConfig+0x314>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	e001      	b.n	8001116 <HAL_RCC_OscConfig+0x2ce>
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_RCC_OscConfig+0x314>)
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001116:	2202      	movs	r2, #2
 8001118:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001120:	fa92 f2a2 	rbit	r2, r2
 8001124:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
  return(result);
 8001128:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800112c:	fab2 f282 	clz	r2, r2
 8001130:	b252      	sxtb	r2, r2
 8001132:	f042 0220 	orr.w	r2, r2, #32
 8001136:	b252      	sxtb	r2, r2
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	f002 021f 	and.w	r2, r2, #31
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	4013      	ands	r3, r2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <HAL_RCC_OscConfig+0x318>
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	f000 bdea 	b.w	8001d2e <HAL_RCC_OscConfig+0xee6>
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	48b9      	ldr	r0, [pc, #740]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 8001162:	4bb9      	ldr	r3, [pc, #740]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6919      	ldr	r1, [r3, #16]
 8001170:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001174:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8001184:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001194:	e0d1      	b.n	800133a <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d073      	beq.n	8001288 <HAL_RCC_OscConfig+0x440>
 80011a0:	2301      	movs	r3, #1
 80011a2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 80011b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b6:	fab3 f383 	clz	r3, r3
 80011ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011be:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	461a      	mov	r2, r3
 80011c6:	2301      	movs	r3, #1
 80011c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ca:	f7ff f80f 	bl	80001ec <HAL_GetTick>
 80011ce:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d2:	e00a      	b.n	80011ea <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff f80a 	bl	80001ec <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d902      	bls.n	80011ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	f000 bda2 	b.w	8001d2e <HAL_RCC_OscConfig+0xee6>
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011f4:	fa93 f3a3 	rbit	r3, r3
 80011f8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80011fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d102      	bne.n	800121a <HAL_RCC_OscConfig+0x3d2>
 8001214:	4b8c      	ldr	r3, [pc, #560]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	e001      	b.n	800121e <HAL_RCC_OscConfig+0x3d6>
 800121a:	4b8b      	ldr	r3, [pc, #556]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 800121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121e:	2202      	movs	r2, #2
 8001220:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001228:	fa92 f2a2 	rbit	r2, r2
 800122c:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
  return(result);
 8001230:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001234:	fab2 f282 	clz	r2, r2
 8001238:	b252      	sxtb	r2, r2
 800123a:	f042 0220 	orr.w	r2, r2, #32
 800123e:	b252      	sxtb	r2, r2
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	f002 021f 	and.w	r2, r2, #31
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0c0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x38c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	487d      	ldr	r0, [pc, #500]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 8001254:	4b7c      	ldr	r3, [pc, #496]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6919      	ldr	r1, [r3, #16]
 8001262:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001266:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8001276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800127a:	fab3 f383 	clz	r3, r3
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	6043      	str	r3, [r0, #4]
 8001286:	e058      	b.n	800133a <HAL_RCC_OscConfig+0x4f2>
 8001288:	2301      	movs	r3, #1
 800128a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  return(result);
 800129a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129e:	fab3 f383 	clz	r3, r3
 80012a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012a6:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	461a      	mov	r2, r3
 80012ae:	2300      	movs	r3, #0
 80012b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b2:	f7fe ff9b 	bl	80001ec <HAL_GetTick>
 80012b6:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_OscConfig+0x48a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012bc:	f7fe ff96 	bl	80001ec <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d902      	bls.n	80012d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	f000 bd2e 	b.w	8001d2e <HAL_RCC_OscConfig+0xee6>
 80012d2:	2302      	movs	r3, #2
 80012d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 80012e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e8:	fab3 f383 	clz	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d102      	bne.n	8001302 <HAL_RCC_OscConfig+0x4ba>
 80012fc:	4b52      	ldr	r3, [pc, #328]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	e001      	b.n	8001306 <HAL_RCC_OscConfig+0x4be>
 8001302:	4b51      	ldr	r3, [pc, #324]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 8001304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001306:	2202      	movs	r2, #2
 8001308:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001310:	fa92 f2a2 	rbit	r2, r2
 8001314:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
  return(result);
 8001318:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800131c:	fab2 f282 	clz	r2, r2
 8001320:	b252      	sxtb	r2, r2
 8001322:	f042 0220 	orr.w	r2, r2, #32
 8001326:	b252      	sxtb	r2, r2
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	f002 021f 	and.w	r2, r2, #31
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f202 	lsl.w	r2, r1, r2
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1c0      	bne.n	80012bc <HAL_RCC_OscConfig+0x474>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 81c5 	beq.w	80016d4 <HAL_RCC_OscConfig+0x88c>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800134a:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 80de 	bne.w	8001514 <HAL_RCC_OscConfig+0x6cc>
 8001358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  return(result);
 800136c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d102      	bne.n	800138a <HAL_RCC_OscConfig+0x542>
 8001384:	4b30      	ldr	r3, [pc, #192]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	e001      	b.n	800138e <HAL_RCC_OscConfig+0x546>
 800138a:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 800138c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001392:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800139a:	fa92 f2a2 	rbit	r2, r2
 800139e:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
  return(result);
 80013a2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80013a6:	fab2 f282 	clz	r2, r2
 80013aa:	b252      	sxtb	r2, r2
 80013ac:	f042 0220 	orr.w	r2, r2, #32
 80013b0:	b252      	sxtb	r2, r2
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	f002 021f 	and.w	r2, r2, #31
 80013b8:	2101      	movs	r1, #1
 80013ba:	fa01 f202 	lsl.w	r2, r1, r2
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d007      	beq.n	80013d4 <HAL_RCC_OscConfig+0x58c>
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <HAL_RCC_OscConfig+0x58c>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f000 bcad 	b.w	8001d2e <HAL_RCC_OscConfig+0xee6>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6a1a      	ldr	r2, [r3, #32]
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d932      	bls.n	800144c <HAL_RCC_OscConfig+0x604>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 ff03 	bl	80021f8 <RCC_SetFlashLatencyFromMSIRange>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	f000 bc98 	b.w	8001d2e <HAL_RCC_OscConfig+0xee6>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013fe:	4912      	ldr	r1, [pc, #72]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_RCC_OscConfig+0x600>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69d9      	ldr	r1, [r3, #28]
 8001422:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001426:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  return(result);
 8001436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	6043      	str	r3, [r0, #4]
 8001446:	e031      	b.n	80014ac <HAL_RCC_OscConfig+0x664>
 8001448:	40023800 	.word	0x40023800
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144c:	49b9      	ldr	r1, [pc, #740]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 800144e:	4bb9      	ldr	r3, [pc, #740]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001460:	48b4      	ldr	r0, [pc, #720]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 8001462:	4bb4      	ldr	r3, [pc, #720]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	69d9      	ldr	r1, [r3, #28]
 8001470:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001474:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800147c:	fa93 f3a3 	rbit	r3, r3
 8001480:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  return(result);
 8001484:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	6043      	str	r3, [r0, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 feac 	bl	80021f8 <RCC_SetFlashLatencyFromMSIRange>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <HAL_RCC_OscConfig+0x664>
          {
            return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	f000 bc41 	b.w	8001d2e <HAL_RCC_OscConfig+0xee6>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6a1a      	ldr	r2, [r3, #32]
 80014b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 80014c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	fa22 f303 	lsr.w	r3, r2, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80014dc:	4a95      	ldr	r2, [pc, #596]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 80014de:	6892      	ldr	r2, [r2, #8]
 80014e0:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 80014e4:	22f0      	movs	r2, #240	; 0xf0
 80014e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80014ee:	fa92 f2a2 	rbit	r2, r2
 80014f2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
  return(result);
 80014f6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80014fa:	fab2 f282 	clz	r2, r2
 80014fe:	fa21 f202 	lsr.w	r2, r1, r2
 8001502:	498d      	ldr	r1, [pc, #564]	; (8001738 <HAL_RCC_OscConfig+0x8f0>)
 8001504:	5c8a      	ldrb	r2, [r1, r2]
 8001506:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001508:	4a8c      	ldr	r2, [pc, #560]	; (800173c <HAL_RCC_OscConfig+0x8f4>)
 800150a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 800150c:	2000      	movs	r0, #0
 800150e:	f7fe fe43 	bl	8000198 <HAL_InitTick>
 8001512:	e0df      	b.n	80016d4 <HAL_RCC_OscConfig+0x88c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d07f      	beq.n	800161e <HAL_RCC_OscConfig+0x7d6>
 800151e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 8001532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800153e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	461a      	mov	r2, r3
 8001546:	2301      	movs	r3, #1
 8001548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7fe fe4f 	bl	80001ec <HAL_GetTick>
 800154e:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001552:	e009      	b.n	8001568 <HAL_RCC_OscConfig+0x720>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001554:	f7fe fe4a 	bl	80001ec <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x720>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e3e2      	b.n	8001d2e <HAL_RCC_OscConfig+0xee6>
 8001568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 800157c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d102      	bne.n	800159a <HAL_RCC_OscConfig+0x752>
 8001594:	4b67      	ldr	r3, [pc, #412]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	e001      	b.n	800159e <HAL_RCC_OscConfig+0x756>
 800159a:	4b66      	ldr	r3, [pc, #408]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80015aa:	fa92 f2a2 	rbit	r2, r2
 80015ae:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
  return(result);
 80015b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80015b6:	fab2 f282 	clz	r2, r2
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	f042 0220 	orr.w	r2, r2, #32
 80015c0:	b252      	sxtb	r2, r2
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	f002 021f 	and.w	r2, r2, #31
 80015c8:	2101      	movs	r1, #1
 80015ca:	fa01 f202 	lsl.w	r2, r1, r2
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0bf      	beq.n	8001554 <HAL_RCC_OscConfig+0x70c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d4:	4957      	ldr	r1, [pc, #348]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 80015d6:	4b57      	ldr	r3, [pc, #348]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e8:	4852      	ldr	r0, [pc, #328]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 80015ea:	4b52      	ldr	r3, [pc, #328]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	69d9      	ldr	r1, [r3, #28]
 80015f8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80015fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001604:	fa93 f3a3 	rbit	r3, r3
 8001608:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return(result);
 800160c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	6043      	str	r3, [r0, #4]
 800161c:	e05a      	b.n	80016d4 <HAL_RCC_OscConfig+0x88c>
 800161e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 8001632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800163e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	461a      	mov	r2, r3
 8001646:	2300      	movs	r3, #0
 8001648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7fe fdcf 	bl	80001ec <HAL_GetTick>
 800164e:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001652:	e009      	b.n	8001668 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001654:	f7fe fdca 	bl	80001ec <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e362      	b.n	8001d2e <HAL_RCC_OscConfig+0xee6>
 8001668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  return(result);
 800167c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d102      	bne.n	800169a <HAL_RCC_OscConfig+0x852>
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	e001      	b.n	800169e <HAL_RCC_OscConfig+0x856>
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <HAL_RCC_OscConfig+0x8ec>)
 800169c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80016aa:	fa92 f2a2 	rbit	r2, r2
 80016ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
  return(result);
 80016b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80016b6:	fab2 f282 	clz	r2, r2
 80016ba:	b252      	sxtb	r2, r2
 80016bc:	f042 0220 	orr.w	r2, r2, #32
 80016c0:	b252      	sxtb	r2, r2
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	f002 021f 	and.w	r2, r2, #31
 80016c8:	2101      	movs	r1, #1
 80016ca:	fa01 f202 	lsl.w	r2, r1, r2
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1bf      	bne.n	8001654 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80ae 	beq.w	8001840 <HAL_RCC_OscConfig+0x9f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d055      	beq.n	800179a <HAL_RCC_OscConfig+0x952>
 80016ee:	2301      	movs	r3, #1
 80016f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8001700:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_RCC_OscConfig+0x8f8>)
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	461a      	mov	r2, r3
 8001712:	2301      	movs	r3, #1
 8001714:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001716:	f7fe fd69 	bl	80001ec <HAL_GetTick>
 800171a:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	e011      	b.n	8001744 <HAL_RCC_OscConfig+0x8fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001720:	f7fe fd64 	bl	80001ec <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d909      	bls.n	8001744 <HAL_RCC_OscConfig+0x8fc>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e2fc      	b.n	8001d2e <HAL_RCC_OscConfig+0xee6>
 8001734:	40023800 	.word	0x40023800
 8001738:	0800304c 	.word	0x0800304c
 800173c:	20000000 	.word	0x20000000
 8001740:	1091c1a0 	.word	0x1091c1a0
 8001744:	2302      	movs	r3, #2
 8001746:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800174e:	fa93 f2a3 	rbit	r2, r3
 8001752:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001756:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001758:	4ba5      	ldr	r3, [pc, #660]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 800175a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800175c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001760:	2102      	movs	r1, #2
 8001762:	6019      	str	r1, [r3, #0]
 8001764:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f1a3 	rbit	r1, r3
 800176e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001772:	6019      	str	r1, [r3, #0]
  return(result);
 8001774:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b25b      	sxtb	r3, r3
 8001780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001784:	b25b      	sxtb	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0c3      	beq.n	8001720 <HAL_RCC_OscConfig+0x8d8>
 8001798:	e052      	b.n	8001840 <HAL_RCC_OscConfig+0x9f8>
 800179a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017b0:	601a      	str	r2, [r3, #0]
  return(result);
 80017b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017b6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	4b8d      	ldr	r3, [pc, #564]	; (80019f4 <HAL_RCC_OscConfig+0xbac>)
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	461a      	mov	r2, r3
 80017c6:	2300      	movs	r3, #0
 80017c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7fe fd0f 	bl	80001ec <HAL_GetTick>
 80017ce:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d2:	e009      	b.n	80017e8 <HAL_RCC_OscConfig+0x9a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d4:	f7fe fd0a 	bl	80001ec <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x9a0>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e2a2      	b.n	8001d2e <HAL_RCC_OscConfig+0xee6>
 80017e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017ec:	2202      	movs	r2, #2
 80017ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fa93 f2a3 	rbit	r2, r3
 80017fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	4b7b      	ldr	r3, [pc, #492]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 8001802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001804:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001808:	2102      	movs	r1, #2
 800180a:	6019      	str	r1, [r3, #0]
 800180c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f1a3 	rbit	r1, r3
 8001816:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800181a:	6019      	str	r1, [r3, #0]
  return(result);
 800181c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b25b      	sxtb	r3, r3
 8001828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182c:	b25b      	sxtb	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1c9      	bne.n	80017d4 <HAL_RCC_OscConfig+0x98c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 810e 	beq.w	8001a6c <HAL_RCC_OscConfig+0xc24>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001856:	4b66      	ldr	r3, [pc, #408]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d112      	bne.n	8001888 <HAL_RCC_OscConfig+0xa40>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4a63      	ldr	r2, [pc, #396]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 8001864:	4b62      	ldr	r3, [pc, #392]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	6253      	str	r3, [r2, #36]	; 0x24
 800186e:	4b60      	ldr	r3, [pc, #384]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <HAL_RCC_OscConfig+0xbb0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d11a      	bne.n	80018ca <HAL_RCC_OscConfig+0xa82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001894:	4a58      	ldr	r2, [pc, #352]	; (80019f8 <HAL_RCC_OscConfig+0xbb0>)
 8001896:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <HAL_RCC_OscConfig+0xbb0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a0:	f7fe fca4 	bl	80001ec <HAL_GetTick>
 80018a4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	e009      	b.n	80018be <HAL_RCC_OscConfig+0xa76>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7fe fc9f 	bl	80001ec <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0xa76>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e237      	b.n	8001d2e <HAL_RCC_OscConfig+0xee6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	4b4e      	ldr	r3, [pc, #312]	; (80019f8 <HAL_RCC_OscConfig+0xbb0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0ef      	beq.n	80018aa <HAL_RCC_OscConfig+0xa62>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0xa9a>
 80018d4:	4a46      	ldr	r2, [pc, #280]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 80018d6:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018de:	6353      	str	r3, [r2, #52]	; 0x34
 80018e0:	e02f      	b.n	8001942 <HAL_RCC_OscConfig+0xafa>
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10c      	bne.n	8001906 <HAL_RCC_OscConfig+0xabe>
 80018ec:	4a40      	ldr	r2, [pc, #256]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 80018ee:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 80018f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018f6:	6353      	str	r3, [r2, #52]	; 0x34
 80018f8:	4a3d      	ldr	r2, [pc, #244]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 80018fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001902:	6353      	str	r3, [r2, #52]	; 0x34
 8001904:	e01d      	b.n	8001942 <HAL_RCC_OscConfig+0xafa>
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b05      	cmp	r3, #5
 800190e:	d10c      	bne.n	800192a <HAL_RCC_OscConfig+0xae2>
 8001910:	4a37      	ldr	r2, [pc, #220]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 8001912:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 8001914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	6353      	str	r3, [r2, #52]	; 0x34
 800191c:	4a34      	ldr	r2, [pc, #208]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 800191e:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 8001920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	6353      	str	r3, [r2, #52]	; 0x34
 8001928:	e00b      	b.n	8001942 <HAL_RCC_OscConfig+0xafa>
 800192a:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 800192c:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 800192e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001934:	6353      	str	r3, [r2, #52]	; 0x34
 8001936:	4a2e      	ldr	r2, [pc, #184]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 8001938:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 800193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001940:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d03f      	beq.n	80019cc <HAL_RCC_OscConfig+0xb84>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7fe fc4e 	bl	80001ec <HAL_GetTick>
 8001950:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	e00b      	b.n	800196e <HAL_RCC_OscConfig+0xb26>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7fe fc49 	bl	80001ec <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xb26>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1df      	b.n	8001d2e <HAL_RCC_OscConfig+0xee6>
 800196e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001986:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_RCC_OscConfig+0xba8>)
 800198a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001990:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001994:	6019      	str	r1, [r3, #0]
 8001996:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f1a3 	rbit	r1, r3
 80019a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019a4:	6019      	str	r1, [r3, #0]
  return(result);
 80019a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0c5      	beq.n	8001956 <HAL_RCC_OscConfig+0xb0e>
 80019ca:	e045      	b.n	8001a58 <HAL_RCC_OscConfig+0xc10>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7fe fc0e 	bl	80001ec <HAL_GetTick>
 80019d0:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d4:	e012      	b.n	80019fc <HAL_RCC_OscConfig+0xbb4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7fe fc09 	bl	80001ec <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d908      	bls.n	80019fc <HAL_RCC_OscConfig+0xbb4>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e19f      	b.n	8001d2e <HAL_RCC_OscConfig+0xee6>
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	1091c1a0 	.word	0x1091c1a0
 80019f8:	40007000 	.word	0x40007000
 80019fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	fa93 f2a3 	rbit	r2, r3
 8001a10:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a16:	4bb2      	ldr	r3, [pc, #712]	; (8001ce0 <HAL_RCC_OscConfig+0xe98>)
 8001a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a22:	6019      	str	r1, [r3, #0]
 8001a24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fa93 f1a3 	rbit	r1, r3
 8001a2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a32:	6019      	str	r1, [r3, #0]
  return(result);
 8001a34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b25b      	sxtb	r3, r3
 8001a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1be      	bne.n	80019d6 <HAL_RCC_OscConfig+0xb8e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a58:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0xc24>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a60:	4a9f      	ldr	r2, [pc, #636]	; (8001ce0 <HAL_RCC_OscConfig+0xe98>)
 8001a62:	4b9f      	ldr	r3, [pc, #636]	; (8001ce0 <HAL_RCC_OscConfig+0xe98>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 815a 	beq.w	8001d2c <HAL_RCC_OscConfig+0xee4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a78:	4b99      	ldr	r3, [pc, #612]	; (8001ce0 <HAL_RCC_OscConfig+0xe98>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b0c      	cmp	r3, #12
 8001a82:	f000 8151 	beq.w	8001d28 <HAL_RCC_OscConfig+0xee0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	f040 80e1 	bne.w	8001c54 <HAL_RCC_OscConfig+0xe0c>
 8001a92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aaa:	601a      	str	r2, [r3, #0]
  return(result);
 8001aac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ab0:	681b      	ldr	r3, [r3, #0]
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aba:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7fe fb91 	bl	80001ec <HAL_GetTick>
 8001aca:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ace:	e009      	b.n	8001ae4 <HAL_RCC_OscConfig+0xc9c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7fe fb8c 	bl	80001ec <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0xc9c>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e124      	b.n	8001d2e <HAL_RCC_OscConfig+0xee6>
 8001ae4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	fa93 f2a3 	rbit	r2, r3
 8001af8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001afc:	601a      	str	r2, [r3, #0]
  return(result);
 8001afe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d102      	bne.n	8001b1e <HAL_RCC_OscConfig+0xcd6>
 8001b18:	4b71      	ldr	r3, [pc, #452]	; (8001ce0 <HAL_RCC_OscConfig+0xe98>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	e001      	b.n	8001b22 <HAL_RCC_OscConfig+0xcda>
 8001b1e:	4b70      	ldr	r3, [pc, #448]	; (8001ce0 <HAL_RCC_OscConfig+0xe98>)
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001b26:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b2a:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	fa92 f1a2 	rbit	r1, r2
 8001b36:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b3a:	6011      	str	r1, [r2, #0]
  return(result);
 8001b3c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	fab2 f282 	clz	r2, r2
 8001b46:	b252      	sxtb	r2, r2
 8001b48:	f042 0220 	orr.w	r2, r2, #32
 8001b4c:	b252      	sxtb	r2, r2
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f002 021f 	and.w	r2, r2, #31
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1b7      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xc88>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b60:	485f      	ldr	r0, [pc, #380]	; (8001ce0 <HAL_RCC_OscConfig+0xe98>)
 8001b62:	4b5f      	ldr	r3, [pc, #380]	; (8001ce0 <HAL_RCC_OscConfig+0xe98>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	4319      	orrs	r1, r3
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	4313      	orrs	r3, r2
 8001b82:	6083      	str	r3, [r0, #8]
 8001b84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b9c:	601a      	str	r2, [r3, #0]
  return(result);
 8001b9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ba2:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bac:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7fe fb18 	bl	80001ec <HAL_GetTick>
 8001bbc:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc0:	e009      	b.n	8001bd6 <HAL_RCC_OscConfig+0xd8e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7fe fb13 	bl	80001ec <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xd8e>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e0ab      	b.n	8001d2e <HAL_RCC_OscConfig+0xee6>
 8001bd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bee:	601a      	str	r2, [r3, #0]
  return(result);
 8001bf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bf4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d102      	bne.n	8001c10 <HAL_RCC_OscConfig+0xdc8>
 8001c0a:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <HAL_RCC_OscConfig+0xe98>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e001      	b.n	8001c14 <HAL_RCC_OscConfig+0xdcc>
 8001c10:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <HAL_RCC_OscConfig+0xe98>)
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001c18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c1c:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	fa92 f1a2 	rbit	r1, r2
 8001c28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c2c:	6011      	str	r1, [r2, #0]
  return(result);
 8001c2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	fab2 f282 	clz	r2, r2
 8001c38:	b252      	sxtb	r2, r2
 8001c3a:	f042 0220 	orr.w	r2, r2, #32
 8001c3e:	b252      	sxtb	r2, r2
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f002 021f 	and.w	r2, r2, #31
 8001c46:	2101      	movs	r1, #1
 8001c48:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0b7      	beq.n	8001bc2 <HAL_RCC_OscConfig+0xd7a>
 8001c52:	e06b      	b.n	8001d2c <HAL_RCC_OscConfig+0xee4>
 8001c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	fa93 f2a3 	rbit	r2, r3
 8001c68:	f107 0320 	add.w	r3, r7, #32
 8001c6c:	601a      	str	r2, [r3, #0]
  return(result);
 8001c6e:	f107 0320 	add.w	r3, r7, #32
 8001c72:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c7c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	461a      	mov	r2, r3
 8001c84:	2300      	movs	r3, #0
 8001c86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7fe fab0 	bl	80001ec <HAL_GetTick>
 8001c8c:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c90:	e009      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe5e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c92:	f7fe faab 	bl	80001ec <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xe5e>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e043      	b.n	8001d2e <HAL_RCC_OscConfig+0xee6>
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f107 0318 	add.w	r3, r7, #24
 8001cbe:	601a      	str	r2, [r3, #0]
  return(result);
 8001cc0:	f107 0318 	add.w	r3, r7, #24
 8001cc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d104      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xe9c>
 8001cda:	4b01      	ldr	r3, [pc, #4]	; (8001ce0 <HAL_RCC_OscConfig+0xe98>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	e003      	b.n	8001ce8 <HAL_RCC_OscConfig+0xea0>
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_RCC_OscConfig+0xef0>)
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce8:	f107 0214 	add.w	r2, r7, #20
 8001cec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cf0:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f107 0214 	add.w	r2, r7, #20
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	fa92 f1a2 	rbit	r1, r2
 8001cfc:	f107 0210 	add.w	r2, r7, #16
 8001d00:	6011      	str	r1, [r2, #0]
  return(result);
 8001d02:	f107 0210 	add.w	r2, r7, #16
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	fab2 f282 	clz	r2, r2
 8001d0c:	b252      	sxtb	r2, r2
 8001d0e:	f042 0220 	orr.w	r2, r2, #32
 8001d12:	b252      	sxtb	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f002 021f 	and.w	r2, r2, #31
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1b5      	bne.n	8001c92 <HAL_RCC_OscConfig+0xe4a>
 8001d26:	e001      	b.n	8001d2c <HAL_RCC_OscConfig+0xee4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0xee6>
    }
  }
  
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b096      	sub	sp, #88	; 0x58
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	657b      	str	r3, [r7, #84]	; 0x54
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d4a:	4ba9      	ldr	r3, [pc, #676]	; (8001ff0 <HAL_RCC_ClockConfig+0x2b4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0201 	and.w	r2, r3, #1
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d219      	bcs.n	8001d8c <HAL_RCC_ClockConfig+0x50>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d105      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x2e>
 8001d5e:	4aa4      	ldr	r2, [pc, #656]	; (8001ff0 <HAL_RCC_ClockConfig+0x2b4>)
 8001d60:	4ba3      	ldr	r3, [pc, #652]	; (8001ff0 <HAL_RCC_ClockConfig+0x2b4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	49a1      	ldr	r1, [pc, #644]	; (8001ff0 <HAL_RCC_ClockConfig+0x2b4>)
 8001d6c:	4ba0      	ldr	r3, [pc, #640]	; (8001ff0 <HAL_RCC_ClockConfig+0x2b4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 0201 	bic.w	r2, r3, #1
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d7a:	4b9d      	ldr	r3, [pc, #628]	; (8001ff0 <HAL_RCC_ClockConfig+0x2b4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x50>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e1a2      	b.n	80020d2 <HAL_RCC_ClockConfig+0x396>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4996      	ldr	r1, [pc, #600]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001d9a:	4b96      	ldr	r3, [pc, #600]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8131 	beq.w	800201a <HAL_RCC_ClockConfig+0x2de>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d130      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xe6>
 8001dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d102      	bne.n	8001dea <HAL_RCC_ClockConfig+0xae>
 8001de4:	4b83      	ldr	r3, [pc, #524]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	e001      	b.n	8001dee <HAL_RCC_ClockConfig+0xb2>
 8001dea:	4b82      	ldr	r3, [pc, #520]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001df2:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001df6:	fa92 f2a2 	rbit	r2, r2
 8001dfa:	647a      	str	r2, [r7, #68]	; 0x44
  return(result);
 8001dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dfe:	fab2 f282 	clz	r2, r2
 8001e02:	b252      	sxtb	r2, r2
 8001e04:	f042 0220 	orr.w	r2, r2, #32
 8001e08:	b252      	sxtb	r2, r2
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	f002 021f 	and.w	r2, r2, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f202 	lsl.w	r2, r1, r2
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f040 8098 	bne.w	8001f4e <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e157      	b.n	80020d2 <HAL_RCC_ClockConfig+0x396>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d12f      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x14e>
 8001e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e2e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d102      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x118>
 8001e4e:	4b69      	ldr	r3, [pc, #420]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	e001      	b.n	8001e58 <HAL_RCC_ClockConfig+0x11c>
 8001e54:	4b67      	ldr	r3, [pc, #412]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5c:	63ba      	str	r2, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e60:	fa92 f2a2 	rbit	r2, r2
 8001e64:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e68:	fab2 f282 	clz	r2, r2
 8001e6c:	b252      	sxtb	r2, r2
 8001e6e:	f042 0220 	orr.w	r2, r2, #32
 8001e72:	b252      	sxtb	r2, r2
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	f002 021f 	and.w	r2, r2, #31
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d163      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e123      	b.n	80020d2 <HAL_RCC_ClockConfig+0x396>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d12d      	bne.n	8001eee <HAL_RCC_ClockConfig+0x1b2>
 8001e92:	2302      	movs	r3, #2
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d102      	bne.n	8001eba <HAL_RCC_ClockConfig+0x17e>
 8001eb4:	4b4f      	ldr	r3, [pc, #316]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	e001      	b.n	8001ebe <HAL_RCC_ClockConfig+0x182>
 8001eba:	4b4e      	ldr	r3, [pc, #312]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec4:	fa92 f2a2 	rbit	r2, r2
 8001ec8:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	fab2 f282 	clz	r2, r2
 8001ed0:	b252      	sxtb	r2, r2
 8001ed2:	f042 0220 	orr.w	r2, r2, #32
 8001ed6:	b252      	sxtb	r2, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f002 021f 	and.w	r2, r2, #31
 8001ede:	2101      	movs	r1, #1
 8001ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d131      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e0f1      	b.n	80020d2 <HAL_RCC_ClockConfig+0x396>
 8001eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	61fb      	str	r3, [r7, #28]
  return(result);
 8001efc:	69fb      	ldr	r3, [r7, #28]
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x1dc>
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e001      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e0>
 8001f18:	4b36      	ldr	r3, [pc, #216]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	fa92 f2a2 	rbit	r2, r2
 8001f28:	617a      	str	r2, [r7, #20]
  return(result);
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	fab2 f282 	clz	r2, r2
 8001f30:	b252      	sxtb	r2, r2
 8001f32:	f042 0220 	orr.w	r2, r2, #32
 8001f36:	b252      	sxtb	r2, r2
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f002 021f 	and.w	r2, r2, #31
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0c1      	b.n	80020d2 <HAL_RCC_ClockConfig+0x396>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4929      	ldr	r1, [pc, #164]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 0203 	bic.w	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f60:	f7fe f944 	bl	80001ec <HAL_GetTick>
 8001f64:	6578      	str	r0, [r7, #84]	; 0x54
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d112      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x258>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x24a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7fe f93c 	bl	80001ec <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x24a>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0a5      	b.n	80020d2 <HAL_RCC_ClockConfig+0x396>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d1ee      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x234>
 8001f92:	e042      	b.n	800201a <HAL_RCC_ClockConfig+0x2de>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d112      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x286>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x278>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9e:	f7fe f925 	bl	80001ec <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e08e      	b.n	80020d2 <HAL_RCC_ClockConfig+0x396>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b0c      	cmp	r3, #12
 8001fbe:	d1ee      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x262>
 8001fc0:	e02b      	b.n	800201a <HAL_RCC_ClockConfig+0x2de>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d121      	bne.n	800200e <HAL_RCC_ClockConfig+0x2d2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x2a6>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7fe f90e 	bl	80001ec <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e077      	b.n	80020d2 <HAL_RCC_ClockConfig+0x396>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_RCC_ClockConfig+0x2b8>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d1ee      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x290>
 8001fee:	e014      	b.n	800201a <HAL_RCC_ClockConfig+0x2de>
 8001ff0:	40023c00 	.word	0x40023c00
 8001ff4:	40023800 	.word	0x40023800
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7fe f8f8 	bl	80001ec <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e061      	b.n	80020d2 <HAL_RCC_ClockConfig+0x396>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <HAL_RCC_ClockConfig+0x3a0>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1ee      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x2bc>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800201a:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_RCC_ClockConfig+0x3a4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0201 	and.w	r2, r3, #1
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d919      	bls.n	800205c <HAL_RCC_ClockConfig+0x320>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <HAL_RCC_ClockConfig+0x2fe>
 800202e:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <HAL_RCC_ClockConfig+0x3a4>)
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_RCC_ClockConfig+0x3a4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4929      	ldr	r1, [pc, #164]	; (80020e0 <HAL_RCC_ClockConfig+0x3a4>)
 800203c:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <HAL_RCC_ClockConfig+0x3a4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 0201 	bic.w	r2, r3, #1
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800204a:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_RCC_ClockConfig+0x3a4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0201 	and.w	r2, r3, #1
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x320>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e03a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x396>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x33e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	491c      	ldr	r1, [pc, #112]	; (80020dc <HAL_RCC_ClockConfig+0x3a0>)
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_RCC_ClockConfig+0x3a0>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x35e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002086:	4915      	ldr	r1, [pc, #84]	; (80020dc <HAL_RCC_ClockConfig+0x3a0>)
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_RCC_ClockConfig+0x3a0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800209a:	f000 f827 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 800209e:	4601      	mov	r1, r0
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_RCC_ClockConfig+0x3a0>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020a8:	23f0      	movs	r3, #240	; 0xf0
 80020aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x3a8>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	fa21 f303 	lsr.w	r3, r1, r3
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_RCC_ClockConfig+0x3ac>)
 80020c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7fe f864 	bl	8000198 <HAL_InitTick>
  
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3758      	adds	r7, #88	; 0x58
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40023c00 	.word	0x40023c00
 80020e4:	0800304c 	.word	0x0800304c
 80020e8:	20000000 	.word	0x20000000

080020ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b08d      	sub	sp, #52	; 0x34
 80020f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, pllm = 0U, plld = 0U, pllvco = 0U, msiclkrange = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	2300      	movs	r3, #0
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
  
  tmpreg = RCC->CFGR;
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d006      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x3c>
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d007      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x42>
 800211e:	2b04      	cmp	r3, #4
 8002120:	d142      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0xbc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002122:	4b32      	ldr	r3, [pc, #200]	; (80021ec <HAL_RCC_GetSysClockFreq+0x100>)
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002126:	e058      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800212c:	e055      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002134:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	60bb      	str	r3, [r7, #8]
  return(result);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	4a29      	ldr	r2, [pc, #164]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	623b      	str	r3, [r7, #32]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002158:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800215c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	613b      	str	r3, [r7, #16]
  return(result);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	4a1b      	ldr	r2, [pc, #108]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002184:	fb02 f203 	mul.w	r2, r2, r3
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002190:	e007      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0xb6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	4a15      	ldr	r2, [pc, #84]	; (80021ec <HAL_RCC_GetSysClockFreq+0x100>)
 8002196:	fb02 f203 	mul.w	r2, r2, r3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      sysclockfreq = pllvco;
 80021a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80021a6:	e018      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80021b0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021b4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	603b      	str	r3, [r7, #0]
  return(result);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	61bb      	str	r3, [r7, #24]
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	3301      	adds	r3, #1
 80021ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80021d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021da:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3734      	adds	r7, #52	; 0x34
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	00f42400 	.word	0x00f42400
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	08003040 	.word	0x08003040

080021f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002208:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d12c      	bne.n	800226e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002214:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e016      	b.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x62>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	4a20      	ldr	r2, [pc, #128]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002236:	6253      	str	r3, [r2, #36]	; 0x24
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800224c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4a18      	ldr	r2, [pc, #96]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002258:	6253      	str	r3, [r2, #36]	; 0x24
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002260:	d105      	bne.n	800226e <RCC_SetFlashLatencyFromMSIRange+0x76>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002268:	d101      	bne.n	800226e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800226a:	2301      	movs	r3, #1
 800226c:	613b      	str	r3, [r7, #16]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x88>
 8002274:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	490d      	ldr	r1, [pc, #52]	; (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 0201 	bic.w	r2, r3, #1
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0201 	and.w	r2, r3, #1
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0xaa>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <RCC_SetFlashLatencyFromMSIRange+0xac>
  }
  
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000
 80022b8:	40023c00 	.word	0x40023c00

080022bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08e      	sub	sp, #56	; 0x38
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t temp_reg = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d106      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80fe 	beq.w	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ec:	4b7f      	ldr	r3, [pc, #508]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10e      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	4a7c      	ldr	r2, [pc, #496]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022fa:	4b7c      	ldr	r3, [pc, #496]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002302:	6253      	str	r3, [r2, #36]	; 0x24
 8002304:	4b79      	ldr	r3, [pc, #484]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d118      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002322:	4a73      	ldr	r2, [pc, #460]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002324:	4b72      	ldr	r3, [pc, #456]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7fd ff5d 	bl	80001ec <HAL_GetTick>
 8002332:	6338      	str	r0, [r7, #48]	; 0x30

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	e008      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002336:	f7fd ff59 	bl	80001ec <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	; 0x64
 8002342:	d901      	bls.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e0cd      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	4b69      	ldr	r3, [pc, #420]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002354:	4b65      	ldr	r3, [pc, #404]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	429a      	cmp	r2, r3
 800236a:	d106      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0xbe>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002376:	429a      	cmp	r2, r3
 8002378:	d00e      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xdc>
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002386:	d107      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002388:	4b58      	ldr	r3, [pc, #352]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8002394:	2301      	movs	r3, #1
 8002396:	e0a5      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002398:	4b54      	ldr	r3, [pc, #336]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80023a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d077      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d005      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x120>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d063      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d05d      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80023dc:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80023ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	61fb      	str	r3, [r7, #28]
  return(result);
 80023f4:	69fb      	ldr	r3, [r7, #28]
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	2301      	movs	r3, #1
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	4b35      	ldr	r3, [pc, #212]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	461a      	mov	r2, r3
 8002426:	2300      	movs	r3, #0
 8002428:	6013      	str	r3, [r2, #0]
      
      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800242a:	4a30      	ldr	r2, [pc, #192]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	6353      	str	r3, [r2, #52]	; 0x34
      
       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d02e      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7fd fed7 	bl	80001ec <HAL_GetTick>
 800243e:	6338      	str	r0, [r7, #48]	; 0x30
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	e00a      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fd fed3 	bl	80001ec <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e045      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800245c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	617b      	str	r3, [r7, #20]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800246a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	60fb      	str	r3, [r7, #12]
  return(result);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b25b      	sxtb	r3, r3
 8002480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002484:	b25b      	sxtb	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0d4      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x186>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024a4:	d10a      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024a6:	4911      	ldr	r1, [pc, #68]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
 80024bc:	490b      	ldr	r1, [pc, #44]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ca:	4313      	orrs	r3, r2
 80024cc:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d105      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d6:	4a05      	ldr	r2, [pc, #20]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }
  
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3738      	adds	r7, #56	; 0x38
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40007000 	.word	0x40007000
 80024f4:	1091c1a0 	.word	0x1091c1a0

080024f8 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e01d      	b.n	8002546 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fc92 	bl	8002e48 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f000 f92c 	bl	8002794 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	68d2      	ldr	r2, [r2, #12]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	f042 0201 	orr.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b02      	cmp	r3, #2
 8002596:	d122      	bne.n	80025de <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d11b      	bne.n	80025de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0202 	mvn.w	r2, #2
 80025ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	751a      	strb	r2, [r3, #20]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f8ca 	bl	800275e <HAL_TIM_IC_CaptureCallback>
 80025ca:	e005      	b.n	80025d8 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f8bd 	bl	800274c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8cc 	bl	8002770 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	751a      	strb	r2, [r3, #20]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d122      	bne.n	8002632 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d11b      	bne.n	8002632 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f06f 0204 	mvn.w	r2, #4
 8002602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	751a      	strb	r2, [r3, #20]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8a0 	bl	800275e <HAL_TIM_IC_CaptureCallback>
 800261e:	e005      	b.n	800262c <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f893 	bl	800274c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8a2 	bl	8002770 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	751a      	strb	r2, [r3, #20]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b08      	cmp	r3, #8
 800263e:	d122      	bne.n	8002686 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11b      	bne.n	8002686 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f06f 0208 	mvn.w	r2, #8
 8002656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2204      	movs	r2, #4
 800265c:	751a      	strb	r2, [r3, #20]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f876 	bl	800275e <HAL_TIM_IC_CaptureCallback>
 8002672:	e005      	b.n	8002680 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f869 	bl	800274c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f878 	bl	8002770 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	751a      	strb	r2, [r3, #20]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b10      	cmp	r3, #16
 8002692:	d122      	bne.n	80026da <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d11b      	bne.n	80026da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f06f 0210 	mvn.w	r2, #16
 80026aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2208      	movs	r2, #8
 80026b0:	751a      	strb	r2, [r3, #20]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f84c 	bl	800275e <HAL_TIM_IC_CaptureCallback>
 80026c6:	e005      	b.n	80026d4 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f83f 	bl	800274c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f84e 	bl	8002770 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	751a      	strb	r2, [r3, #20]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d10e      	bne.n	8002706 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d107      	bne.n	8002706 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f06f 0201 	mvn.w	r2, #1
 80026fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f81a 	bl	800273a <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b40      	cmp	r3, #64	; 0x40
 8002712:	d10e      	bne.n	8002732 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b40      	cmp	r3, #64	; 0x40
 8002720:	d107      	bne.n	8002732 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800272a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f828 	bl	8002782 <HAL_TIM_TriggerCallback>
    }
  }
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ae:	d00f      	beq.n	80027d0 <TIM_Base_SetConfig+0x3c>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a28      	ldr	r2, [pc, #160]	; (8002854 <TIM_Base_SetConfig+0xc0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00b      	beq.n	80027d0 <TIM_Base_SetConfig+0x3c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a27      	ldr	r2, [pc, #156]	; (8002858 <TIM_Base_SetConfig+0xc4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d007      	beq.n	80027d0 <TIM_Base_SetConfig+0x3c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a26      	ldr	r2, [pc, #152]	; (800285c <TIM_Base_SetConfig+0xc8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d003      	beq.n	80027d0 <TIM_Base_SetConfig+0x3c>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a25      	ldr	r2, [pc, #148]	; (8002860 <TIM_Base_SetConfig+0xcc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d108      	bne.n	80027e2 <TIM_Base_SetConfig+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e8:	d017      	beq.n	800281a <TIM_Base_SetConfig+0x86>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a19      	ldr	r2, [pc, #100]	; (8002854 <TIM_Base_SetConfig+0xc0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <TIM_Base_SetConfig+0x86>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <TIM_Base_SetConfig+0xc4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00f      	beq.n	800281a <TIM_Base_SetConfig+0x86>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a17      	ldr	r2, [pc, #92]	; (800285c <TIM_Base_SetConfig+0xc8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00b      	beq.n	800281a <TIM_Base_SetConfig+0x86>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a16      	ldr	r2, [pc, #88]	; (8002860 <TIM_Base_SetConfig+0xcc>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d007      	beq.n	800281a <TIM_Base_SetConfig+0x86>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a15      	ldr	r2, [pc, #84]	; (8002864 <TIM_Base_SetConfig+0xd0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d003      	beq.n	800281a <TIM_Base_SetConfig+0x86>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a14      	ldr	r2, [pc, #80]	; (8002868 <TIM_Base_SetConfig+0xd4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d108      	bne.n	800282c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	615a      	str	r2, [r3, #20]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40000400 	.word	0x40000400
 8002858:	40000800 	.word	0x40000800
 800285c:	40000c00 	.word	0x40000c00
 8002860:	40010800 	.word	0x40010800
 8002864:	40010c00 	.word	0x40010c00
 8002868:	40011000 	.word	0x40011000

0800286c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002880:	2302      	movs	r3, #2
 8002882:	e032      	b.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	6852      	ldr	r2, [r2, #4]
 800289e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028a2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	6851      	ldr	r1, [r2, #4]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	6892      	ldr	r2, [r2, #8]
 80028c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028c4:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	6891      	ldr	r1, [r2, #8]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	6852      	ldr	r2, [r2, #4]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  __HAL_UNLOCK(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028f8:	f7fd fc40 	bl	800017c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028fc:	f000 f810 	bl	8002920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002900:	f000 f938 	bl	8002b74 <MX_GPIO_Init>
  MX_ADC_Init();
 8002904:	f000 f870 	bl	80029e8 <MX_ADC_Init>
  MX_LCD_Init();
 8002908:	f000 f8c6 	bl	8002a98 <MX_LCD_Init>
  MX_TS_Init();
 800290c:	f000 f92c 	bl	8002b68 <MX_TS_Init>
  MX_TIM6_Init();
 8002910:	f000 f8f6 	bl	8002b00 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002914:	4801      	ldr	r0, [pc, #4]	; (800291c <main+0x28>)
 8002916:	f7ff fe1a 	bl	800254e <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800291a:	e7fe      	b.n	800291a <main+0x26>
 800291c:	20000024 	.word	0x20000024

08002920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b096      	sub	sp, #88	; 0x58
 8002924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292a:	2234      	movs	r2, #52	; 0x34
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fb72 	bl	8003018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800294e:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <SystemClock_Config+0xc4>)
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <SystemClock_Config+0xc4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002958:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800295c:	6013      	str	r3, [r2, #0]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800295e:	2306      	movs	r3, #6
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002962:	2301      	movs	r3, #1
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002966:	2301      	movs	r3, #1
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800296a:	2310      	movs	r3, #16
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800296e:	2302      	movs	r3, #2
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002972:	2300      	movs	r3, #0
 8002974:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002976:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800297a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800297c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002980:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fa5e 	bl	8000e48 <HAL_RCC_OscConfig>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002992:	f000 f961 	bl	8002c58 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002996:	230f      	movs	r3, #15
 8002998:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800299a:	2303      	movs	r3, #3
 800299c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029aa:	f107 0310 	add.w	r3, r7, #16
 80029ae:	2101      	movs	r1, #1
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff f9c3 	bl	8001d3c <HAL_RCC_ClockConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80029bc:	f000 f94c 	bl	8002c58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LCD;
 80029c0:	2302      	movs	r3, #2
 80029c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSE;
 80029c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029c8:	60fb      	str	r3, [r7, #12]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fc75 	bl	80022bc <HAL_RCCEx_PeriphCLKConfig>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80029d8:	f000 f93e 	bl	8002c58 <Error_Handler>
  }
}
 80029dc:	bf00      	nop
 80029de:	3758      	adds	r7, #88	; 0x58
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40007000 	.word	0x40007000

080029e8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <MX_ADC_Init+0xa8>)
 80029fa:	4a26      	ldr	r2, [pc, #152]	; (8002a94 <MX_ADC_Init+0xac>)
 80029fc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8002a34:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002a56:	480e      	ldr	r0, [pc, #56]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a58:	f7fd fbd2 	bl	8000200 <HAL_ADC_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8002a62:	f000 f8f9 	bl	8002c58 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002a66:	2304      	movs	r3, #4
 8002a68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	4619      	mov	r1, r3
 8002a76:	4806      	ldr	r0, [pc, #24]	; (8002a90 <MX_ADC_Init+0xa8>)
 8002a78:	f7fd fd00 	bl	800047c <HAL_ADC_ConfigChannel>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_ADC_Init+0x9e>
  {
    Error_Handler();
 8002a82:	f000 f8e9 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000098 	.word	0x20000098
 8002a94:	40012400 	.word	0x40012400

08002a98 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <MX_LCD_Init+0x60>)
 8002a9e:	4a17      	ldr	r2, [pc, #92]	; (8002afc <MX_LCD_Init+0x64>)
 8002aa0:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <MX_LCD_Init+0x60>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <MX_LCD_Init+0x60>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <MX_LCD_Init+0x60>)
 8002ab0:	220c      	movs	r2, #12
 8002ab2:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <MX_LCD_Init+0x60>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <MX_LCD_Init+0x60>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <MX_LCD_Init+0x60>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <MX_LCD_Init+0x60>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <MX_LCD_Init+0x60>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <MX_LCD_Init+0x60>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <MX_LCD_Init+0x60>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <MX_LCD_Init+0x60>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8002ae4:	4804      	ldr	r0, [pc, #16]	; (8002af8 <MX_LCD_Init+0x60>)
 8002ae6:	f7fe f8cf 	bl	8000c88 <HAL_LCD_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_LCD_Init+0x5c>
  {
    Error_Handler();
 8002af0:	f000 f8b2 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	2000005c 	.word	0x2000005c
 8002afc:	40002400 	.word	0x40002400

08002b00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b06:	463b      	mov	r3, r7
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <MX_TIM6_Init+0x60>)
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <MX_TIM6_Init+0x64>)
 8002b12:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31999;
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <MX_TIM6_Init+0x60>)
 8002b16:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002b1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1c:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <MX_TIM6_Init+0x60>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <MX_TIM6_Init+0x60>)
 8002b24:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b28:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <MX_TIM6_Init+0x60>)
 8002b2c:	f7ff fce4 	bl	80024f8 <HAL_TIM_Base_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
 8002b36:	f000 f88f 	bl	8002c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b42:	463b      	mov	r3, r7
 8002b44:	4619      	mov	r1, r3
 8002b46:	4806      	ldr	r0, [pc, #24]	; (8002b60 <MX_TIM6_Init+0x60>)
 8002b48:	f7ff fe90 	bl	800286c <HAL_TIMEx_MasterConfigSynchronization>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM6_Init+0x56>
  {
    Error_Handler();
 8002b52:	f000 f881 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000024 	.word	0x20000024
 8002b64:	40001000 	.word	0x40001000

08002b68 <MX_TS_Init>:
  * @brief TS Initialization Function
  * @param None
  * @retval None
  */
static void MX_TS_Init(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END TS_Init 1 */
  /* USER CODE BEGIN TS_Init 2 */

  /* USER CODE END TS_Init 2 */

}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8a:	4a2e      	ldr	r2, [pc, #184]	; (8002c44 <MX_GPIO_Init+0xd0>)
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <MX_GPIO_Init+0xd0>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	61d3      	str	r3, [r2, #28]
 8002b96:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <MX_GPIO_Init+0xd0>)
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <MX_GPIO_Init+0xd0>)
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <MX_GPIO_Init+0xd0>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	61d3      	str	r3, [r2, #28]
 8002bae:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <MX_GPIO_Init+0xd0>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	4a22      	ldr	r2, [pc, #136]	; (8002c44 <MX_GPIO_Init+0xd0>)
 8002bbc:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <MX_GPIO_Init+0xd0>)
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	61d3      	str	r3, [r2, #28]
 8002bc6:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <MX_GPIO_Init+0xd0>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_SET);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bd8:	481b      	ldr	r0, [pc, #108]	; (8002c48 <MX_GPIO_Init+0xd4>)
 8002bda:	f7fe f83c 	bl	8000c56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002bde:	2200      	movs	r2, #0
 8002be0:	21c0      	movs	r1, #192	; 0xc0
 8002be2:	481a      	ldr	r0, [pc, #104]	; (8002c4c <MX_GPIO_Init+0xd8>)
 8002be4:	f7fe f837 	bl	8000c56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IDD_CNT_EN_Pin */
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
 8002be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IDD_CNT_EN_GPIO_Port, &GPIO_InitStruct);
 8002bfa:	f107 030c 	add.w	r3, r7, #12
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4811      	ldr	r0, [pc, #68]	; (8002c48 <MX_GPIO_Init+0xd4>)
 8002c02:	f7fd fe93 	bl	800092c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c06:	2301      	movs	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_GPIO_Init+0xdc>)
 8002c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c12:	f107 030c 	add.w	r3, r7, #12
 8002c16:	4619      	mov	r1, r3
 8002c18:	480e      	ldr	r0, [pc, #56]	; (8002c54 <MX_GPIO_Init+0xe0>)
 8002c1a:	f7fd fe87 	bl	800092c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002c1e:	23c0      	movs	r3, #192	; 0xc0
 8002c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c22:	2301      	movs	r3, #1
 8002c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2e:	f107 030c 	add.w	r3, r7, #12
 8002c32:	4619      	mov	r1, r3
 8002c34:	4805      	ldr	r0, [pc, #20]	; (8002c4c <MX_GPIO_Init+0xd8>)
 8002c36:	f7fd fe79 	bl	800092c <HAL_GPIO_Init>

}
 8002c3a:	bf00      	nop
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40020800 	.word	0x40020800
 8002c4c:	40020400 	.word	0x40020400
 8002c50:	10120000 	.word	0x10120000
 8002c54:	40020000 	.word	0x40020000

08002c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002c6a:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <HAL_MspInit+0x5c>)
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <HAL_MspInit+0x5c>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c74:	6253      	str	r3, [r2, #36]	; 0x24
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_MspInit+0x5c>)
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <HAL_MspInit+0x5c>)
 8002c84:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_MspInit+0x5c>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <HAL_MspInit+0x5c>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_MspInit+0x5c>)
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_MspInit+0x5c>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6253      	str	r3, [r2, #36]	; 0x24
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_MspInit+0x5c>)
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002cb2:	2007      	movs	r0, #7
 8002cb4:	f7fd fdf8 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800

08002cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a15      	ldr	r2, [pc, #84]	; (8002d38 <HAL_ADC_MspInit+0x74>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d123      	bne.n	8002d2e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ce6:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <HAL_ADC_MspInit+0x78>)
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_ADC_MspInit+0x78>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_ADC_MspInit+0x78>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <HAL_ADC_MspInit+0x78>)
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_ADC_MspInit+0x78>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	61d3      	str	r3, [r2, #28]
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_ADC_MspInit+0x78>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8002d16:	2310      	movs	r3, #16
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4619      	mov	r1, r3
 8002d28:	4805      	ldr	r0, [pc, #20]	; (8002d40 <HAL_ADC_MspInit+0x7c>)
 8002d2a:	f7fd fdff 	bl	800092c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d2e:	bf00      	nop
 8002d30:	3728      	adds	r7, #40	; 0x28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40012400 	.word	0x40012400
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020000 	.word	0x40020000

08002d44 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	; 0x30
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 031c 	add.w	r3, r7, #28
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a34      	ldr	r2, [pc, #208]	; (8002e34 <HAL_LCD_MspInit+0xf0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d162      	bne.n	8002e2c <HAL_LCD_MspInit+0xe8>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8002d66:	4a34      	ldr	r2, [pc, #208]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002d68:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d70:	6253      	str	r3, [r2, #36]	; 0x24
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7e:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	61d3      	str	r3, [r2, #28]
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	4a28      	ldr	r2, [pc, #160]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	61d3      	str	r3, [r2, #28]
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dae:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	61d3      	str	r3, [r2, #28]
 8002dba:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <HAL_LCD_MspInit+0xf4>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB8     ------> LCD_SEG16
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin 
 8002dc6:	f640 73cf 	movw	r3, #4047	; 0xfcf
 8002dca:	61fb      	str	r3, [r7, #28]
                          |SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin 
                          |SEG22_Pin|SEG23_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002dd8:	230b      	movs	r3, #11
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ddc:	f107 031c 	add.w	r3, r7, #28
 8002de0:	4619      	mov	r1, r3
 8002de2:	4816      	ldr	r0, [pc, #88]	; (8002e3c <HAL_LCD_MspInit+0xf8>)
 8002de4:	f7fd fda2 	bl	800092c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin 
 8002de8:	f248 730e 	movw	r3, #34574	; 0x870e
 8002dec:	61fb      	str	r3, [r7, #28]
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002dfa:	230b      	movs	r3, #11
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfe:	f107 031c 	add.w	r3, r7, #28
 8002e02:	4619      	mov	r1, r3
 8002e04:	480e      	ldr	r0, [pc, #56]	; (8002e40 <HAL_LCD_MspInit+0xfc>)
 8002e06:	f7fd fd91 	bl	800092c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin 
 8002e0a:	f64f 7338 	movw	r3, #65336	; 0xff38
 8002e0e:	61fb      	str	r3, [r7, #28]
                          |SEG10_Pin|SEG11_Pin|SEG3_Pin|SEG4_Pin 
                          |SEG5_Pin|SEG13_Pin|COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002e1c:	230b      	movs	r3, #11
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e20:	f107 031c 	add.w	r3, r7, #28
 8002e24:	4619      	mov	r1, r3
 8002e26:	4807      	ldr	r0, [pc, #28]	; (8002e44 <HAL_LCD_MspInit+0x100>)
 8002e28:	f7fd fd80 	bl	800092c <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8002e2c:	bf00      	nop
 8002e2e:	3730      	adds	r7, #48	; 0x30
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40002400 	.word	0x40002400
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40020800 	.word	0x40020800
 8002e40:	40020000 	.word	0x40020000
 8002e44:	40020400 	.word	0x40020400

08002e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM6)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0d      	ldr	r2, [pc, #52]	; (8002e8c <HAL_TIM_Base_MspInit+0x44>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d113      	bne.n	8002e82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e5a:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <HAL_TIM_Base_MspInit+0x48>)
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_TIM_Base_MspInit+0x48>)
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f043 0310 	orr.w	r3, r3, #16
 8002e64:	6253      	str	r3, [r2, #36]	; 0x24
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_TIM_Base_MspInit+0x48>)
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	202b      	movs	r0, #43	; 0x2b
 8002e78:	f7fd fd21 	bl	80008be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002e7c:	202b      	movs	r0, #43	; 0x2b
 8002e7e:	f7fd fd3a 	bl	80008f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40001000 	.word	0x40001000
 8002e90:	40023800 	.word	0x40023800

08002e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <HardFault_Handler+0x4>

08002ea6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eaa:	e7fe      	b.n	8002eaa <MemManage_Handler+0x4>

08002eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb0:	e7fe      	b.n	8002eb0 <BusFault_Handler+0x4>

08002eb2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb6:	e7fe      	b.n	8002eb6 <UsageFault_Handler+0x4>

08002eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee0:	f7fd f976 	bl	80001d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
 HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, !HAL_GPIO_ReadPin(LD4_GPIO_Port, LD4_Pin));
 8002eec:	2140      	movs	r1, #64	; 0x40
 8002eee:	4809      	ldr	r0, [pc, #36]	; (8002f14 <TIM6_IRQHandler+0x2c>)
 8002ef0:	f7fd fe9a 	bl	8000c28 <HAL_GPIO_ReadPin>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	2140      	movs	r1, #64	; 0x40
 8002f04:	4803      	ldr	r0, [pc, #12]	; (8002f14 <TIM6_IRQHandler+0x2c>)
 8002f06:	f7fd fea6 	bl	8000c56 <HAL_GPIO_WritePin>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f0a:	4803      	ldr	r0, [pc, #12]	; (8002f18 <TIM6_IRQHandler+0x30>)
 8002f0c:	f7ff fb39 	bl	8002582 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40020400 	.word	0x40020400
 8002f18:	20000024 	.word	0x20000024

08002f1c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002f20:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <SystemInit+0x5c>)
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <SystemInit+0x5c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002f2c:	4912      	ldr	r1, [pc, #72]	; (8002f78 <SystemInit+0x5c>)
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <SystemInit+0x5c>)
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <SystemInit+0x60>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002f38:	4a0f      	ldr	r2, [pc, #60]	; (8002f78 <SystemInit+0x5c>)
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <SystemInit+0x5c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002f42:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8002f46:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f48:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <SystemInit+0x5c>)
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <SystemInit+0x5c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f52:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002f54:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <SystemInit+0x5c>)
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <SystemInit+0x5c>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8002f5e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <SystemInit+0x5c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <SystemInit+0x64>)
 8002f68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f6c:	609a      	str	r2, [r3, #8]
#endif
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	88ffc00c 	.word	0x88ffc00c
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f86:	e003      	b.n	8002f90 <LoopCopyDataInit>

08002f88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f8e:	3104      	adds	r1, #4

08002f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f90:	480a      	ldr	r0, [pc, #40]	; (8002fbc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f98:	d3f6      	bcc.n	8002f88 <CopyDataInit>
  ldr r2, =_sbss
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f9c:	e002      	b.n	8002fa4 <LoopFillZerobss>

08002f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f9e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002fa0:	f842 3b04 	str.w	r3, [r2], #4

08002fa4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002fa6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002fa8:	d3f9      	bcc.n	8002f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002faa:	f7ff ffb7 	bl	8002f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fae:	f000 f80f 	bl	8002fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fb2:	f7ff fc9f 	bl	80028f4 <main>
  bx lr
 8002fb6:	4770      	bx	lr
  ldr r3, =_sidata
 8002fb8:	08003064 	.word	0x08003064
  ldr r0, =_sdata
 8002fbc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002fc0:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8002fc4:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8002fc8:	200000ec 	.word	0x200000ec

08002fcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fcc:	e7fe      	b.n	8002fcc <ADC1_IRQHandler>
	...

08002fd0 <__libc_init_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	4e0c      	ldr	r6, [pc, #48]	; (8003008 <__libc_init_array+0x38>)
 8002fd6:	4c0d      	ldr	r4, [pc, #52]	; (800300c <__libc_init_array+0x3c>)
 8002fd8:	1ba4      	subs	r4, r4, r6
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	42a5      	cmp	r5, r4
 8002fde:	d109      	bne.n	8002ff4 <__libc_init_array+0x24>
 8002fe0:	f000 f822 	bl	8003028 <_init>
 8002fe4:	2500      	movs	r5, #0
 8002fe6:	4e0a      	ldr	r6, [pc, #40]	; (8003010 <__libc_init_array+0x40>)
 8002fe8:	4c0a      	ldr	r4, [pc, #40]	; (8003014 <__libc_init_array+0x44>)
 8002fea:	1ba4      	subs	r4, r4, r6
 8002fec:	10a4      	asrs	r4, r4, #2
 8002fee:	42a5      	cmp	r5, r4
 8002ff0:	d105      	bne.n	8002ffe <__libc_init_array+0x2e>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff8:	4798      	blx	r3
 8002ffa:	3501      	adds	r5, #1
 8002ffc:	e7ee      	b.n	8002fdc <__libc_init_array+0xc>
 8002ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003002:	4798      	blx	r3
 8003004:	3501      	adds	r5, #1
 8003006:	e7f2      	b.n	8002fee <__libc_init_array+0x1e>
 8003008:	0800305c 	.word	0x0800305c
 800300c:	0800305c 	.word	0x0800305c
 8003010:	0800305c 	.word	0x0800305c
 8003014:	08003060 	.word	0x08003060

08003018 <memset>:
 8003018:	4603      	mov	r3, r0
 800301a:	4402      	add	r2, r0
 800301c:	4293      	cmp	r3, r2
 800301e:	d100      	bne.n	8003022 <memset+0xa>
 8003020:	4770      	bx	lr
 8003022:	f803 1b01 	strb.w	r1, [r3], #1
 8003026:	e7f9      	b.n	800301c <memset+0x4>

08003028 <_init>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	bf00      	nop
 800302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302e:	bc08      	pop	{r3}
 8003030:	469e      	mov	lr, r3
 8003032:	4770      	bx	lr

08003034 <_fini>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr
