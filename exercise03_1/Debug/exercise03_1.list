
exercise03_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018c4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001a00  08001a00  00011a00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a1c  08001a1c  00011a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a20  08001a20  00011a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e8  20000004  08001a28  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000ec  08001a28  000200ec  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000120d0  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023dd  00000000  00000000  000320fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000532f  00000000  00000000  000344da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000718  00000000  00000000  00039810  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bf8  00000000  00000000  00039f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004a05  00000000  00000000  0003ab20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003084  00000000  00000000  0003f525  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000425a9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000013bc  00000000  00000000  00042628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	080019e8 	.word	0x080019e8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	080019e8 	.word	0x080019e8

0800017c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_InitTick+0x24>)
{
 800017e:	b510      	push	{r4, lr}
 8000180:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000188:	fbb0 f0f3 	udiv	r0, r0, r3
 800018c:	f000 f9e0 	bl	8000550 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000190:	2200      	movs	r2, #0
 8000192:	4621      	mov	r1, r4
 8000194:	f04f 30ff 	mov.w	r0, #4294967295
 8000198:	f000 f99a 	bl	80004d0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800019c:	2000      	movs	r0, #0
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a6:	2003      	movs	r0, #3
 80001a8:	f000 f980 	bl	80004ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f7ff ffe5 	bl	800017c <HAL_InitTick>
  HAL_MspInit();
 80001b2:	f001 fab1 	bl	8001718 <HAL_MspInit>
}
 80001b6:	2000      	movs	r0, #0
 80001b8:	bd08      	pop	{r3, pc}
	...

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001bc:	4a02      	ldr	r2, [pc, #8]	; (80001c8 <HAL_IncTick+0xc>)
 80001be:	6813      	ldr	r3, [r2, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000020 	.word	0x20000020

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000020 	.word	0x20000020

080001d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80001d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80001da:	4604      	mov	r4, r0
 80001dc:	b908      	cbnz	r0, 80001e2 <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 80001de:	2001      	movs	r0, #1
 80001e0:	e092      	b.n	8000308 <HAL_ADC_Init+0x130>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80001e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80001e4:	b973      	cbnz	r3, 8000204 <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 80001e6:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 80001e8:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80001ec:	4b54      	ldr	r3, [pc, #336]	; (8000340 <HAL_ADC_Init+0x168>)
 80001ee:	6a1a      	ldr	r2, [r3, #32]
 80001f0:	f042 0201 	orr.w	r2, r2, #1
 80001f4:	621a      	str	r2, [r3, #32]
 80001f6:	6a1b      	ldr	r3, [r3, #32]
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8000200:	f001 fab0 	bl	8001764 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000204:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000206:	06db      	lsls	r3, r3, #27
 8000208:	d4e9      	bmi.n	80001de <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 800020a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800020c:	4a4d      	ldr	r2, [pc, #308]	; (8000344 <HAL_ADC_Init+0x16c>)
    ADC_STATE_CLR_SET(hadc->State,
 800020e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000212:	f023 0302 	bic.w	r3, r3, #2
 8000216:	f043 0302 	orr.w	r3, r3, #2
 800021a:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800021c:	6853      	ldr	r3, [r2, #4]
 800021e:	6861      	ldr	r1, [r4, #4]
 8000220:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000224:	430b      	orrs	r3, r1
 8000226:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800022c:	fa90 f0a0 	rbit	r0, r0
 8000230:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000232:	fab0 f080 	clz	r0, r0
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8000236:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000238:	fa93 f3a3 	rbit	r3, r3
 800023c:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000240:	6965      	ldr	r5, [r4, #20]
 8000242:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8000244:	fa01 f303 	lsl.w	r3, r1, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000248:	432a      	orrs	r2, r5
 800024a:	6a25      	ldr	r5, [r4, #32]
 800024c:	432a      	orrs	r2, r5
 800024e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000250:	fa05 f000 	lsl.w	r0, r5, r0
 8000254:	4302      	orrs	r2, r0
                hadc->Init.ChannelsBank                              |
 8000256:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000258:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800025a:	6925      	ldr	r5, [r4, #16]
 800025c:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800025e:	bf1c      	itt	ne
 8000260:	6ba0      	ldrne	r0, [r4, #56]	; 0x38
 8000262:	4302      	orrne	r2, r0
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000264:	6820      	ldr	r0, [r4, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000266:	bf18      	it	ne
 8000268:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800026a:	6802      	ldr	r2, [r0, #0]
 800026c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8000270:	d123      	bne.n	80002ba <HAL_ADC_Init+0xe2>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000272:	69a6      	ldr	r6, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000274:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000276:	4333      	orrs	r3, r6
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000278:	68a6      	ldr	r6, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800027a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800027e:	ea46 0607 	orr.w	r6, r6, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000282:	d043      	beq.n	800030c <HAL_ADC_Init+0x134>
 8000284:	2d01      	cmp	r5, #1
 8000286:	bf08      	it	eq
 8000288:	f44f 7280 	moveq.w	r2, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 800028c:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800028e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000290:	2e01      	cmp	r6, #1
 8000292:	d10d      	bne.n	80002b0 <HAL_ADC_Init+0xd8>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000294:	2900      	cmp	r1, #0
 8000296:	d13b      	bne.n	8000310 <HAL_ADC_Init+0x138>
 8000298:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800029c:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002a0:	fab1 f681 	clz	r6, r1
 80002a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80002a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80002aa:	3901      	subs	r1, #1
 80002ac:	40b1      	lsls	r1, r6
 80002ae:	430a      	orrs	r2, r1
        MODIFY_REG(hadc->Instance->CR1,
 80002b0:	6846      	ldr	r6, [r0, #4]
 80002b2:	4925      	ldr	r1, [pc, #148]	; (8000348 <HAL_ADC_Init+0x170>)
 80002b4:	4031      	ands	r1, r6
 80002b6:	430a      	orrs	r2, r1
 80002b8:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 80002ba:	6881      	ldr	r1, [r0, #8]
 80002bc:	4a23      	ldr	r2, [pc, #140]	; (800034c <HAL_ADC_Init+0x174>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002be:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 80002c2:	ea02 0201 	and.w	r2, r2, r1
 80002c6:	ea42 0203 	orr.w	r2, r2, r3
 80002ca:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002cc:	d001      	beq.n	80002d2 <HAL_ADC_Init+0xfa>
 80002ce:	2d01      	cmp	r5, #1
 80002d0:	d127      	bne.n	8000322 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80002d2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80002d4:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80002d8:	fa92 f2a2 	rbit	r2, r2
 80002dc:	fab2 f182 	clz	r1, r2
 80002e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002e2:	3a01      	subs	r2, #1
 80002e4:	408a      	lsls	r2, r1
 80002e6:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 80002ea:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 80002ec:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80002ee:	6881      	ldr	r1, [r0, #8]
 80002f0:	4a17      	ldr	r2, [pc, #92]	; (8000350 <HAL_ADC_Init+0x178>)
 80002f2:	400a      	ands	r2, r1
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d118      	bne.n	800032a <HAL_ADC_Init+0x152>
      ADC_CLEAR_ERRORCODE(hadc);
 80002f8:	2000      	movs	r0, #0
 80002fa:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80002fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80002fe:	f023 0303 	bic.w	r3, r3, #3
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000308:	b003      	add	sp, #12
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800030c:	462a      	mov	r2, r5
 800030e:	e7bd      	b.n	800028c <HAL_ADC_Init+0xb4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000310:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000312:	f041 0120 	orr.w	r1, r1, #32
 8000316:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000318:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800031a:	f041 0101 	orr.w	r1, r1, #1
 800031e:	6521      	str	r1, [r4, #80]	; 0x50
 8000320:	e7c6      	b.n	80002b0 <HAL_ADC_Init+0xd8>
      MODIFY_REG(hadc->Instance->SQR1,
 8000322:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000324:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000328:	e7e0      	b.n	80002ec <HAL_ADC_Init+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 800032a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800032c:	f023 0312 	bic.w	r3, r3, #18
 8000330:	f043 0310 	orr.w	r3, r3, #16
 8000334:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000336:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6523      	str	r3, [r4, #80]	; 0x50
 800033e:	e74e      	b.n	80001de <HAL_ADC_Init+0x6>
 8000340:	40023800 	.word	0x40023800
 8000344:	40012700 	.word	0x40012700
 8000348:	fcfc16ff 	.word	0xfcfc16ff
 800034c:	c0fff189 	.word	0xc0fff189
 8000350:	bf80fffe 	.word	0xbf80fffe

08000354 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8000354:	2300      	movs	r3, #0
{
 8000356:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8000358:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800035a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800035e:	2b01      	cmp	r3, #1
 8000360:	f000 809c 	beq.w	800049c <HAL_ADC_ConfigChannel+0x148>
 8000364:	2301      	movs	r3, #1
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000366:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000368:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 800036c:	2d06      	cmp	r5, #6
 800036e:	6804      	ldr	r4, [r0, #0]
 8000370:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000374:	680a      	ldr	r2, [r1, #0]
 8000376:	d821      	bhi.n	80003bc <HAL_ADC_ConfigChannel+0x68>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000378:	442b      	add	r3, r5
 800037a:	251f      	movs	r5, #31
 800037c:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800037e:	3b05      	subs	r3, #5
 8000380:	409d      	lsls	r5, r3
 8000382:	ea26 0505 	bic.w	r5, r6, r5
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	432b      	orrs	r3, r5
 800038c:	6423      	str	r3, [r4, #64]	; 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800038e:	2a09      	cmp	r2, #9
 8000390:	d84a      	bhi.n	8000428 <HAL_ADC_ConfigChannel+0xd4>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8000392:	2507      	movs	r5, #7
 8000394:	6963      	ldr	r3, [r4, #20]
 8000396:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800039a:	6889      	ldr	r1, [r1, #8]
 800039c:	40b5      	lsls	r5, r6
 800039e:	ea23 0305 	bic.w	r3, r3, r5
 80003a2:	40b1      	lsls	r1, r6
 80003a4:	430b      	orrs	r3, r1
 80003a6:	6163      	str	r3, [r4, #20]
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80003a8:	f1a2 0310 	sub.w	r3, r2, #16
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d95d      	bls.n	800046c <HAL_ADC_ConfigChannel+0x118>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80003b0:	2300      	movs	r3, #0
 80003b2:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80003b6:	4618      	mov	r0, r3
}
 80003b8:	b002      	add	sp, #8
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 80003bc:	2d0c      	cmp	r5, #12
 80003be:	d80b      	bhi.n	80003d8 <HAL_ADC_ConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SQR4,
 80003c0:	442b      	add	r3, r5
 80003c2:	251f      	movs	r5, #31
 80003c4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 80003c6:	3b23      	subs	r3, #35	; 0x23
 80003c8:	409d      	lsls	r5, r3
 80003ca:	ea26 0505 	bic.w	r5, r6, r5
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	432b      	orrs	r3, r5
 80003d4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80003d6:	e7da      	b.n	800038e <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 80003d8:	2d12      	cmp	r5, #18
 80003da:	d80b      	bhi.n	80003f4 <HAL_ADC_ConfigChannel+0xa0>
    MODIFY_REG(hadc->Instance->SQR3,
 80003dc:	442b      	add	r3, r5
 80003de:	251f      	movs	r5, #31
 80003e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80003e2:	3b41      	subs	r3, #65	; 0x41
 80003e4:	409d      	lsls	r5, r3
 80003e6:	ea26 0505 	bic.w	r5, r6, r5
 80003ea:	fa02 f303 	lsl.w	r3, r2, r3
 80003ee:	432b      	orrs	r3, r5
 80003f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80003f2:	e7cc      	b.n	800038e <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 80003f4:	2d18      	cmp	r5, #24
 80003f6:	d80b      	bhi.n	8000410 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR2,
 80003f8:	442b      	add	r3, r5
 80003fa:	251f      	movs	r5, #31
 80003fc:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80003fe:	3b5f      	subs	r3, #95	; 0x5f
 8000400:	409d      	lsls	r5, r3
 8000402:	ea26 0505 	bic.w	r5, r6, r5
 8000406:	fa02 f303 	lsl.w	r3, r2, r3
 800040a:	432b      	orrs	r3, r5
 800040c:	6363      	str	r3, [r4, #52]	; 0x34
 800040e:	e7be      	b.n	800038e <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 8000410:	442b      	add	r3, r5
 8000412:	251f      	movs	r5, #31
 8000414:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8000416:	3b7d      	subs	r3, #125	; 0x7d
 8000418:	409d      	lsls	r5, r3
 800041a:	ea26 0505 	bic.w	r5, r6, r5
 800041e:	fa02 f303 	lsl.w	r3, r2, r3
 8000422:	432b      	orrs	r3, r5
 8000424:	6323      	str	r3, [r4, #48]	; 0x30
 8000426:	e7b2      	b.n	800038e <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8000428:	2a13      	cmp	r2, #19
 800042a:	d80d      	bhi.n	8000448 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SMPR2,
 800042c:	2607      	movs	r6, #7
 800042e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8000432:	6923      	ldr	r3, [r4, #16]
 8000434:	3d1e      	subs	r5, #30
 8000436:	6889      	ldr	r1, [r1, #8]
 8000438:	40ae      	lsls	r6, r5
 800043a:	ea23 0306 	bic.w	r3, r3, r6
 800043e:	fa01 f505 	lsl.w	r5, r1, r5
 8000442:	432b      	orrs	r3, r5
 8000444:	6123      	str	r3, [r4, #16]
 8000446:	e7af      	b.n	80003a8 <HAL_ADC_ConfigChannel+0x54>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8000448:	2a1a      	cmp	r2, #26
 800044a:	d80d      	bhi.n	8000468 <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR1,
 800044c:	2607      	movs	r6, #7
 800044e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8000452:	68e3      	ldr	r3, [r4, #12]
 8000454:	3d3c      	subs	r5, #60	; 0x3c
 8000456:	6889      	ldr	r1, [r1, #8]
 8000458:	40ae      	lsls	r6, r5
 800045a:	ea23 0306 	bic.w	r3, r3, r6
 800045e:	fa01 f505 	lsl.w	r5, r1, r5
 8000462:	432b      	orrs	r3, r5
 8000464:	60e3      	str	r3, [r4, #12]
 8000466:	e79f      	b.n	80003a8 <HAL_ADC_ConfigChannel+0x54>
  __ASM volatile ("nop");
 8000468:	bf00      	nop
 800046a:	e79d      	b.n	80003a8 <HAL_ADC_ConfigChannel+0x54>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_ADC_ConfigChannel+0x14c>)
 800046e:	6859      	ldr	r1, [r3, #4]
 8000470:	0209      	lsls	r1, r1, #8
 8000472:	d49d      	bmi.n	80003b0 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000474:	6859      	ldr	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000476:	2a10      	cmp	r2, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000478:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800047c:	6059      	str	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800047e:	d197      	bne.n	80003b0 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <HAL_ADC_ConfigChannel+0x150>)
 8000482:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <HAL_ADC_ConfigChannel+0x154>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	fbb3 f2f2 	udiv	r2, r3, r2
 800048a:	230a      	movs	r3, #10
 800048c:	4353      	muls	r3, r2
            wait_loop_index--;
 800048e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8000490:	9b01      	ldr	r3, [sp, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d08c      	beq.n	80003b0 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 8000496:	9b01      	ldr	r3, [sp, #4]
 8000498:	3b01      	subs	r3, #1
 800049a:	e7f8      	b.n	800048e <HAL_ADC_ConfigChannel+0x13a>
  __HAL_LOCK(hadc);
 800049c:	2002      	movs	r0, #2
 800049e:	e78b      	b.n	80003b8 <HAL_ADC_ConfigChannel+0x64>
 80004a0:	40012700 	.word	0x40012700
 80004a4:	20000000 	.word	0x20000000
 80004a8:	000f4240 	.word	0x000f4240

080004ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004ac:	4a07      	ldr	r2, [pc, #28]	; (80004cc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80004ae:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004b0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80004b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004ba:	041b      	lsls	r3, r3, #16
 80004bc:	0c1b      	lsrs	r3, r3, #16
 80004be:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80004c6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80004c8:	60d3      	str	r3, [r2, #12]
 80004ca:	4770      	bx	lr
 80004cc:	e000ed00 	.word	0xe000ed00

080004d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d0:	4b17      	ldr	r3, [pc, #92]	; (8000530 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	68dc      	ldr	r4, [r3, #12]
 80004d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004e0:	2b04      	cmp	r3, #4
 80004e2:	bf28      	it	cs
 80004e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004e6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004e8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ec:	bf98      	it	ls
 80004ee:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004f0:	fa05 f303 	lsl.w	r3, r5, r3
 80004f4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004f8:	bf88      	it	hi
 80004fa:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004fc:	4019      	ands	r1, r3
 80004fe:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000500:	fa05 f404 	lsl.w	r4, r5, r4
 8000504:	3c01      	subs	r4, #1
 8000506:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000508:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800050a:	ea42 0201 	orr.w	r2, r2, r1
 800050e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000512:	bfaf      	iteee	ge
 8000514:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000518:	4b06      	ldrlt	r3, [pc, #24]	; (8000534 <HAL_NVIC_SetPriority+0x64>)
 800051a:	f000 000f 	andlt.w	r0, r0, #15
 800051e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000520:	bfa5      	ittet	ge
 8000522:	b2d2      	uxtbge	r2, r2
 8000524:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000528:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800052e:	bd30      	pop	{r4, r5, pc}
 8000530:	e000ed00 	.word	0xe000ed00
 8000534:	e000ed14 	.word	0xe000ed14

08000538 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000538:	2301      	movs	r3, #1
 800053a:	0942      	lsrs	r2, r0, #5
 800053c:	f000 001f 	and.w	r0, r0, #31
 8000540:	fa03 f000 	lsl.w	r0, r3, r0
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <HAL_NVIC_EnableIRQ+0x14>)
 8000546:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800054a:	4770      	bx	lr
 800054c:	e000e100 	.word	0xe000e100

08000550 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000550:	3801      	subs	r0, #1
 8000552:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000556:	d20a      	bcs.n	800056e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000558:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800055e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000560:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000564:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000566:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000568:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800056e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000e010 	.word	0xe000e010
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 800057c:	2300      	movs	r3, #0
{ 
 800057e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000582:	4a62      	ldr	r2, [pc, #392]	; (800070c <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000584:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000588:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8000714 <HAL_GPIO_Init+0x198>
{ 
 800058c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800058e:	fa38 f403 	lsrs.w	r4, r8, r3
 8000592:	d102      	bne.n	800059a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 8000594:	b005      	add	sp, #20
 8000596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800059a:	2401      	movs	r4, #1
 800059c:	409c      	lsls	r4, r3
    if(iocurrent)
 800059e:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005a2:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 80005a4:	f000 80a7 	beq.w	80006f6 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005a8:	684c      	ldr	r4, [r1, #4]
 80005aa:	f024 0a10 	bic.w	sl, r4, #16
 80005ae:	f1ba 0f02 	cmp.w	sl, #2
 80005b2:	d116      	bne.n	80005e2 <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80005b4:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 80005b8:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80005bc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80005c0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80005c4:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80005c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80005cc:	fa0e fe0b 	lsl.w	lr, lr, fp
 80005d0:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80005d4:	690d      	ldr	r5, [r1, #16]
 80005d6:	fa05 f50b 	lsl.w	r5, r5, fp
 80005da:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 80005de:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80005e2:	2503      	movs	r5, #3
 80005e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005e8:	fa05 f50c 	lsl.w	r5, r5, ip
 80005ec:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 80005ee:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80005f2:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80005f6:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80005fa:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005fe:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000602:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000606:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 800060a:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800060e:	d816      	bhi.n	800063e <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 8000610:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000614:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000616:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800061a:	fa07 fa0c 	lsl.w	sl, r7, ip
 800061e:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000622:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000626:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800062a:	9f01      	ldr	r7, [sp, #4]
 800062c:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000630:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000634:	fa0e fe03 	lsl.w	lr, lr, r3
 8000638:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 800063c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800063e:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000640:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000642:	688f      	ldr	r7, [r1, #8]
 8000644:	fa07 f70c 	lsl.w	r7, r7, ip
 8000648:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800064a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800064c:	00e5      	lsls	r5, r4, #3
 800064e:	d552      	bpl.n	80006f6 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000650:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000654:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000658:	f023 0703 	bic.w	r7, r3, #3
 800065c:	f045 0501 	orr.w	r5, r5, #1
 8000660:	f8c9 5020 	str.w	r5, [r9, #32]
 8000664:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000668:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800066c:	f005 0501 	and.w	r5, r5, #1
 8000670:	9503      	str	r5, [sp, #12]
 8000672:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000676:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800067c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000680:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000682:	fa0e fe0c 	lsl.w	lr, lr, ip
 8000686:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800068a:	4d21      	ldr	r5, [pc, #132]	; (8000710 <HAL_GPIO_Init+0x194>)
 800068c:	42a8      	cmp	r0, r5
 800068e:	d034      	beq.n	80006fa <HAL_GPIO_Init+0x17e>
 8000690:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000694:	42a8      	cmp	r0, r5
 8000696:	d032      	beq.n	80006fe <HAL_GPIO_Init+0x182>
 8000698:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800069c:	42a8      	cmp	r0, r5
 800069e:	d030      	beq.n	8000702 <HAL_GPIO_Init+0x186>
 80006a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006a4:	42a8      	cmp	r0, r5
 80006a6:	d02e      	beq.n	8000706 <HAL_GPIO_Init+0x18a>
 80006a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006ac:	42a8      	cmp	r0, r5
 80006ae:	bf14      	ite	ne
 80006b0:	2505      	movne	r5, #5
 80006b2:	2504      	moveq	r5, #4
 80006b4:	fa05 f50c 	lsl.w	r5, r5, ip
 80006b8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80006bc:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006be:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 80006c0:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006c6:	bf0c      	ite	eq
 80006c8:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80006ca:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80006cc:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80006ce:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006d0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006d4:	bf0c      	ite	eq
 80006d6:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80006d8:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80006da:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80006dc:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006de:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006e2:	bf0c      	ite	eq
 80006e4:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80006e6:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80006e8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80006ea:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006ec:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006ee:	bf54      	ite	pl
 80006f0:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 80006f2:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80006f4:	60d5      	str	r5, [r2, #12]
    position++;
 80006f6:	3301      	adds	r3, #1
 80006f8:	e749      	b.n	800058e <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006fa:	2500      	movs	r5, #0
 80006fc:	e7da      	b.n	80006b4 <HAL_GPIO_Init+0x138>
 80006fe:	2501      	movs	r5, #1
 8000700:	e7d8      	b.n	80006b4 <HAL_GPIO_Init+0x138>
 8000702:	2502      	movs	r5, #2
 8000704:	e7d6      	b.n	80006b4 <HAL_GPIO_Init+0x138>
 8000706:	2503      	movs	r5, #3
 8000708:	e7d4      	b.n	80006b4 <HAL_GPIO_Init+0x138>
 800070a:	bf00      	nop
 800070c:	40010400 	.word	0x40010400
 8000710:	40020000 	.word	0x40020000
 8000714:	40023800 	.word	0x40023800

08000718 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000718:	6903      	ldr	r3, [r0, #16]
 800071a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800071c:	bf14      	ite	ne
 800071e:	2001      	movne	r0, #1
 8000720:	2000      	moveq	r0, #0
 8000722:	4770      	bx	lr

08000724 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000724:	b10a      	cbz	r2, 800072a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000726:	6181      	str	r1, [r0, #24]
 8000728:	4770      	bx	lr
 800072a:	0409      	lsls	r1, r1, #16
 800072c:	e7fb      	b.n	8000726 <HAL_GPIO_WritePin+0x2>

0800072e <LCD_WaitForSynchro>:
  * @brief  Waits until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 800072e:	b538      	push	{r3, r4, r5, lr}
 8000730:	4604      	mov	r4, r0
  uint32_t tickstart = 0x00; 
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000732:	f7ff fd4b 	bl	80001cc <HAL_GetTick>
 8000736:	4605      	mov	r5, r0

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000738:	6823      	ldr	r3, [r4, #0]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	069b      	lsls	r3, r3, #26
 800073e:	d501      	bpl.n	8000744 <LCD_WaitForSynchro+0x16>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8000740:	2000      	movs	r0, #0
}
 8000742:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000744:	f7ff fd42 	bl	80001cc <HAL_GetTick>
 8000748:	1b40      	subs	r0, r0, r5
 800074a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800074e:	d9f3      	bls.n	8000738 <LCD_WaitForSynchro+0xa>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8000750:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000752:	2003      	movs	r0, #3
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8000754:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8000756:	bd38      	pop	{r3, r4, r5, pc}

08000758 <HAL_LCD_Init>:
{
 8000758:	b538      	push	{r3, r4, r5, lr}
  if(hlcd == NULL)
 800075a:	4604      	mov	r4, r0
 800075c:	2800      	cmp	r0, #0
 800075e:	d06b      	beq.n	8000838 <HAL_LCD_Init+0xe0>
  if(hlcd->State == HAL_LCD_STATE_RESET)
 8000760:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000764:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000768:	b91b      	cbnz	r3, 8000772 <HAL_LCD_Init+0x1a>
    hlcd->Lock = HAL_UNLOCKED;
 800076a:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_LCD_MspInit(hlcd);
 800076e:	f001 f827 	bl	80017c0 <HAL_LCD_MspInit>
  hlcd->State = HAL_LCD_STATE_BUSY;
 8000772:	2302      	movs	r3, #2
  __HAL_LCD_DISABLE(hlcd);
 8000774:	6822      	ldr	r2, [r4, #0]
  hlcd->State = HAL_LCD_STATE_BUSY;
 8000776:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_LCD_DISABLE(hlcd);
 800077a:	6813      	ldr	r3, [r2, #0]
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	6013      	str	r3, [r2, #0]
 8000782:	2300      	movs	r3, #0
    hlcd->Instance->RAM[counter] = 0;
 8000784:	4618      	mov	r0, r3
 8000786:	1d19      	adds	r1, r3, #4
 8000788:	3301      	adds	r3, #1
 800078a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800078e:	2b10      	cmp	r3, #16
    hlcd->Instance->RAM[counter] = 0;
 8000790:	6048      	str	r0, [r1, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000792:	d1f8      	bne.n	8000786 <HAL_LCD_Init+0x2e>
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 8000794:	6893      	ldr	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 8000796:	68a1      	ldr	r1, [r4, #8]
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6093      	str	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 800079e:	6863      	ldr	r3, [r4, #4]
 80007a0:	6850      	ldr	r0, [r2, #4]
 80007a2:	430b      	orrs	r3, r1
 80007a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80007a6:	430b      	orrs	r3, r1
 80007a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007aa:	430b      	orrs	r3, r1
 80007ac:	69e1      	ldr	r1, [r4, #28]
 80007ae:	430b      	orrs	r3, r1
 80007b0:	6a21      	ldr	r1, [r4, #32]
 80007b2:	430b      	orrs	r3, r1
 80007b4:	69a1      	ldr	r1, [r4, #24]
 80007b6:	430b      	orrs	r3, r1
 80007b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80007ba:	430b      	orrs	r3, r1
 80007bc:	491f      	ldr	r1, [pc, #124]	; (800083c <HAL_LCD_Init+0xe4>)
 80007be:	4001      	ands	r1, r0
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6053      	str	r3, [r2, #4]
  LCD_WaitForSynchro(hlcd);
 80007c4:	4620      	mov	r0, r4
 80007c6:	f7ff ffb2 	bl	800072e <LCD_WaitForSynchro>
  MODIFY_REG(hlcd->Instance->CR, \
 80007ca:	6920      	ldr	r0, [r4, #16]
 80007cc:	68e3      	ldr	r3, [r4, #12]
 80007ce:	6822      	ldr	r2, [r4, #0]
 80007d0:	4303      	orrs	r3, r0
 80007d2:	6960      	ldr	r0, [r4, #20]
 80007d4:	6811      	ldr	r1, [r2, #0]
 80007d6:	4303      	orrs	r3, r0
 80007d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80007da:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
 80007de:	4303      	orrs	r3, r0
 80007e0:	430b      	orrs	r3, r1
 80007e2:	6013      	str	r3, [r2, #0]
  __HAL_LCD_ENABLE(hlcd);
 80007e4:	6813      	ldr	r3, [r2, #0]
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80007ec:	f7ff fcee 	bl	80001cc <HAL_GetTick>
 80007f0:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	07da      	lsls	r2, r3, #31
 80007f8:	d50c      	bpl.n	8000814 <HAL_LCD_Init+0xbc>
  tickstart = HAL_GetTick();
 80007fa:	f7ff fce7 	bl	80001cc <HAL_GetTick>
 80007fe:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	06db      	lsls	r3, r3, #27
 8000806:	d50f      	bpl.n	8000828 <HAL_LCD_Init+0xd0>
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8000808:	2000      	movs	r0, #0
  hlcd->State= HAL_LCD_STATE_READY;
 800080a:	2301      	movs	r3, #1
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800080c:	63a0      	str	r0, [r4, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 800080e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000812:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000814:	f7ff fcda 	bl	80001cc <HAL_GetTick>
 8000818:	1b40      	subs	r0, r0, r5
 800081a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800081e:	d9e8      	bls.n	80007f2 <HAL_LCD_Init+0x9a>
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;     
 8000820:	2308      	movs	r3, #8
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 8000822:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8000824:	2003      	movs	r0, #3
 8000826:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000828:	f7ff fcd0 	bl	80001cc <HAL_GetTick>
 800082c:	1b40      	subs	r0, r0, r5
 800082e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000832:	d9e5      	bls.n	8000800 <HAL_LCD_Init+0xa8>
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 8000834:	2310      	movs	r3, #16
 8000836:	e7f4      	b.n	8000822 <HAL_LCD_Init+0xca>
    return HAL_ERROR;
 8000838:	2001      	movs	r0, #1
}
 800083a:	bd38      	pop	{r3, r4, r5, pc}
 800083c:	fc00000f 	.word	0xfc00000f

08000840 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8000842:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800084a:	d00c      	beq.n	8000866 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 800084c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800084e:	491a      	ldr	r1, [pc, #104]	; (80008b8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000850:	680b      	ldr	r3, [r1, #0]
 8000852:	f023 0301 	bic.w	r3, r3, #1
 8000856:	4313      	orrs	r3, r2
 8000858:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800085a:	6808      	ldr	r0, [r1, #0]
 800085c:	f000 0001 	and.w	r0, r0, #1
 8000860:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000862:	b002      	add	sp, #8
 8000864:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000868:	4914      	ldr	r1, [pc, #80]	; (80008bc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800086a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800086e:	d00f      	beq.n	8000890 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000870:	680a      	ldr	r2, [r1, #0]
 8000872:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000876:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800087a:	d1e7      	bne.n	800084c <RCC_SetFlashLatencyFromMSIRange+0xc>
 800087c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000880:	d1e4      	bne.n	800084c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000884:	6813      	ldr	r3, [r2, #0]
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 800088c:	2201      	movs	r2, #1
 800088e:	e7de      	b.n	800084e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000892:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
 8000898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800089a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800089e:	9201      	str	r2, [sp, #4]
 80008a0:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80008a2:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80008a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80008a6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80008aa:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80008ae:	6259      	str	r1, [r3, #36]	; 0x24
 80008b0:	e7e1      	b.n	8000876 <RCC_SetFlashLatencyFromMSIRange+0x36>
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40023c00 	.word	0x40023c00
 80008bc:	40007000 	.word	0x40007000

080008c0 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008c0:	6803      	ldr	r3, [r0, #0]
{
 80008c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008c6:	07d9      	lsls	r1, r3, #31
{
 80008c8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ca:	d46a      	bmi.n	80009a2 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	079a      	lsls	r2, r3, #30
 80008d0:	f100 80e6 	bmi.w	8000aa0 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	06de      	lsls	r6, r3, #27
 80008d8:	d555      	bpl.n	8000986 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80008da:	4dc1      	ldr	r5, [pc, #772]	; (8000be0 <HAL_RCC_OscConfig+0x320>)
 80008dc:	68ab      	ldr	r3, [r5, #8]
 80008de:	f013 0f0c 	tst.w	r3, #12
 80008e2:	f040 8183 	bne.w	8000bec <HAL_RCC_OscConfig+0x32c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ea:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80008ee:	6829      	ldr	r1, [r5, #0]
 80008f0:	fa93 f3a3 	rbit	r3, r3
 80008f4:	fab3 f383 	clz	r3, r3
 80008f8:	2201      	movs	r2, #1
 80008fa:	f003 031f 	and.w	r3, r3, #31
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	420b      	tst	r3, r1
 8000904:	d002      	beq.n	800090c <HAL_RCC_OscConfig+0x4c>
 8000906:	69a3      	ldr	r3, [r4, #24]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d06e      	beq.n	80009ea <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800090c:	4db4      	ldr	r5, [pc, #720]	; (8000be0 <HAL_RCC_OscConfig+0x320>)
 800090e:	6a20      	ldr	r0, [r4, #32]
 8000910:	686b      	ldr	r3, [r5, #4]
 8000912:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000916:	4298      	cmp	r0, r3
 8000918:	f240 814a 	bls.w	8000bb0 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800091c:	f7ff ff90 	bl	8000840 <RCC_SetFlashLatencyFromMSIRange>
 8000920:	2800      	cmp	r0, #0
 8000922:	d162      	bne.n	80009ea <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000924:	686b      	ldr	r3, [r5, #4]
 8000926:	6a22      	ldr	r2, [r4, #32]
 8000928:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800092c:	4313      	orrs	r3, r2
 800092e:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000930:	6869      	ldr	r1, [r5, #4]
 8000932:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000936:	fa93 f3a3 	rbit	r3, r3
 800093a:	fab3 f283 	clz	r2, r3
 800093e:	69e3      	ldr	r3, [r4, #28]
 8000940:	4093      	lsls	r3, r2
 8000942:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000946:	4313      	orrs	r3, r2
 8000948:	606b      	str	r3, [r5, #4]
 800094a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800094e:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000952:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000956:	4ba2      	ldr	r3, [pc, #648]	; (8000be0 <HAL_RCC_OscConfig+0x320>)
 8000958:	21f0      	movs	r1, #240	; 0xf0
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	fa91 f1a1 	rbit	r1, r1
 8000960:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000964:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000966:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800096a:	40c3      	lsrs	r3, r0
 800096c:	1c58      	adds	r0, r3, #1
 800096e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000972:	40ca      	lsrs	r2, r1
 8000974:	499b      	ldr	r1, [pc, #620]	; (8000be4 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000976:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000978:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800097a:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800097c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800097e:	4a9a      	ldr	r2, [pc, #616]	; (8000be8 <HAL_RCC_OscConfig+0x328>)
 8000980:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000982:	f7ff fbfb 	bl	800017c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000986:	6823      	ldr	r3, [r4, #0]
 8000988:	071d      	lsls	r5, r3, #28
 800098a:	f100 8191 	bmi.w	8000cb0 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800098e:	6823      	ldr	r3, [r4, #0]
 8000990:	0758      	lsls	r0, r3, #29
 8000992:	f100 81d3 	bmi.w	8000d3c <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000996:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000998:	2a00      	cmp	r2, #0
 800099a:	f040 8257 	bne.w	8000e4c <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 800099e:	2000      	movs	r0, #0
 80009a0:	e024      	b.n	80009ec <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009a2:	4b8f      	ldr	r3, [pc, #572]	; (8000be0 <HAL_RCC_OscConfig+0x320>)
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	f002 020c 	and.w	r2, r2, #12
 80009aa:	2a08      	cmp	r2, #8
 80009ac:	d007      	beq.n	80009be <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	f002 020c 	and.w	r2, r2, #12
 80009b4:	2a0c      	cmp	r2, #12
 80009b6:	d11c      	bne.n	80009f2 <HAL_RCC_OscConfig+0x132>
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	03db      	lsls	r3, r3, #15
 80009bc:	d519      	bpl.n	80009f2 <HAL_RCC_OscConfig+0x132>
 80009be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009c2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009c6:	4a86      	ldr	r2, [pc, #536]	; (8000be0 <HAL_RCC_OscConfig+0x320>)
 80009c8:	6811      	ldr	r1, [r2, #0]
 80009ca:	fa93 f3a3 	rbit	r3, r3
 80009ce:	fab3 f383 	clz	r3, r3
 80009d2:	2201      	movs	r2, #1
 80009d4:	f003 031f 	and.w	r3, r3, #31
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	420b      	tst	r3, r1
 80009de:	f43f af75 	beq.w	80008cc <HAL_RCC_OscConfig+0xc>
 80009e2:	6863      	ldr	r3, [r4, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f47f af71 	bne.w	80008cc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80009ea:	2001      	movs	r0, #1
}
 80009ec:	b003      	add	sp, #12
 80009ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f2:	6863      	ldr	r3, [r4, #4]
 80009f4:	4d7a      	ldr	r5, [pc, #488]	; (8000be0 <HAL_RCC_OscConfig+0x320>)
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d120      	bne.n	8000a3c <HAL_RCC_OscConfig+0x17c>
 80009fa:	682b      	ldr	r3, [r5, #0]
 80009fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a02:	f7ff fbe3 	bl	80001cc <HAL_GetTick>
 8000a06:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000a0a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a0c:	2601      	movs	r6, #1
 8000a0e:	4f74      	ldr	r7, [pc, #464]	; (8000be0 <HAL_RCC_OscConfig+0x320>)
 8000a10:	fa95 f3a5 	rbit	r3, r5
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	fa95 f3a5 	rbit	r3, r5
 8000a1a:	fab3 f383 	clz	r3, r3
 8000a1e:	f003 031f 	and.w	r3, r3, #31
 8000a22:	fa06 f303 	lsl.w	r3, r6, r3
 8000a26:	4213      	tst	r3, r2
 8000a28:	f47f af50 	bne.w	80008cc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a2c:	f7ff fbce 	bl	80001cc <HAL_GetTick>
 8000a30:	eba0 0008 	sub.w	r0, r0, r8
 8000a34:	2864      	cmp	r0, #100	; 0x64
 8000a36:	d9eb      	bls.n	8000a10 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000a38:	2003      	movs	r0, #3
 8000a3a:	e7d7      	b.n	80009ec <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a3c:	bb13      	cbnz	r3, 8000a84 <HAL_RCC_OscConfig+0x1c4>
 8000a3e:	682b      	ldr	r3, [r5, #0]
 8000a40:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a48:	602b      	str	r3, [r5, #0]
 8000a4a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a4c:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a54:	f7ff fbba 	bl	80001cc <HAL_GetTick>
 8000a58:	4680      	mov	r8, r0
 8000a5a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a5e:	682a      	ldr	r2, [r5, #0]
 8000a60:	fa96 f3a6 	rbit	r3, r6
 8000a64:	fab3 f383 	clz	r3, r3
 8000a68:	f003 031f 	and.w	r3, r3, #31
 8000a6c:	fa07 f303 	lsl.w	r3, r7, r3
 8000a70:	4213      	tst	r3, r2
 8000a72:	f43f af2b 	beq.w	80008cc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a76:	f7ff fba9 	bl	80001cc <HAL_GetTick>
 8000a7a:	eba0 0008 	sub.w	r0, r0, r8
 8000a7e:	2864      	cmp	r0, #100	; 0x64
 8000a80:	d9eb      	bls.n	8000a5a <HAL_RCC_OscConfig+0x19a>
 8000a82:	e7d9      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a84:	2b05      	cmp	r3, #5
 8000a86:	682b      	ldr	r3, [r5, #0]
 8000a88:	d103      	bne.n	8000a92 <HAL_RCC_OscConfig+0x1d2>
 8000a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8e:	602b      	str	r3, [r5, #0]
 8000a90:	e7b3      	b.n	80009fa <HAL_RCC_OscConfig+0x13a>
 8000a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a96:	602b      	str	r3, [r5, #0]
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a9e:	e7af      	b.n	8000a00 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000aa0:	4b4f      	ldr	r3, [pc, #316]	; (8000be0 <HAL_RCC_OscConfig+0x320>)
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	f002 020c 	and.w	r2, r2, #12
 8000aa8:	2a04      	cmp	r2, #4
 8000aaa:	d007      	beq.n	8000abc <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	f002 020c 	and.w	r2, r2, #12
 8000ab2:	2a0c      	cmp	r2, #12
 8000ab4:	d124      	bne.n	8000b00 <HAL_RCC_OscConfig+0x240>
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	03df      	lsls	r7, r3, #15
 8000aba:	d421      	bmi.n	8000b00 <HAL_RCC_OscConfig+0x240>
 8000abc:	2302      	movs	r3, #2
 8000abe:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ac2:	4a47      	ldr	r2, [pc, #284]	; (8000be0 <HAL_RCC_OscConfig+0x320>)
 8000ac4:	6810      	ldr	r0, [r2, #0]
 8000ac6:	fa93 f3a3 	rbit	r3, r3
 8000aca:	fab3 f383 	clz	r3, r3
 8000ace:	2101      	movs	r1, #1
 8000ad0:	f003 031f 	and.w	r3, r3, #31
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	4203      	tst	r3, r0
 8000ada:	4613      	mov	r3, r2
 8000adc:	d002      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x224>
 8000ade:	68e2      	ldr	r2, [r4, #12]
 8000ae0:	428a      	cmp	r2, r1
 8000ae2:	d182      	bne.n	80009ea <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ae4:	6858      	ldr	r0, [r3, #4]
 8000ae6:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000aea:	fa92 f2a2 	rbit	r2, r2
 8000aee:	fab2 f182 	clz	r1, r2
 8000af2:	6922      	ldr	r2, [r4, #16]
 8000af4:	408a      	lsls	r2, r1
 8000af6:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8000afa:	430a      	orrs	r2, r1
 8000afc:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000afe:	e6e9      	b.n	80008d4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b00:	68e2      	ldr	r2, [r4, #12]
 8000b02:	2501      	movs	r5, #1
 8000b04:	b382      	cbz	r2, 8000b68 <HAL_RCC_OscConfig+0x2a8>
 8000b06:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000b0a:	fab3 f383 	clz	r3, r3
 8000b0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b12:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000b1a:	f7ff fb57 	bl	80001cc <HAL_GetTick>
 8000b1e:	2702      	movs	r7, #2
 8000b20:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b22:	4e2f      	ldr	r6, [pc, #188]	; (8000be0 <HAL_RCC_OscConfig+0x320>)
 8000b24:	fa97 f3a7 	rbit	r3, r7
 8000b28:	6832      	ldr	r2, [r6, #0]
 8000b2a:	fa97 f3a7 	rbit	r3, r7
 8000b2e:	fab3 f383 	clz	r3, r3
 8000b32:	f003 031f 	and.w	r3, r3, #31
 8000b36:	fa05 f303 	lsl.w	r3, r5, r3
 8000b3a:	4213      	tst	r3, r2
 8000b3c:	d00d      	beq.n	8000b5a <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3e:	6871      	ldr	r1, [r6, #4]
 8000b40:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b44:	fa93 f3a3 	rbit	r3, r3
 8000b48:	fab3 f283 	clz	r2, r3
 8000b4c:	6923      	ldr	r3, [r4, #16]
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8000b54:	4313      	orrs	r3, r2
 8000b56:	6073      	str	r3, [r6, #4]
 8000b58:	e6bc      	b.n	80008d4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b5a:	f7ff fb37 	bl	80001cc <HAL_GetTick>
 8000b5e:	eba0 0008 	sub.w	r0, r0, r8
 8000b62:	2802      	cmp	r0, #2
 8000b64:	d9de      	bls.n	8000b24 <HAL_RCC_OscConfig+0x264>
 8000b66:	e767      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
 8000b68:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000b6c:	fab3 f383 	clz	r3, r3
 8000b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b74:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fb26 	bl	80001cc <HAL_GetTick>
 8000b80:	2602      	movs	r6, #2
 8000b82:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b84:	4f16      	ldr	r7, [pc, #88]	; (8000be0 <HAL_RCC_OscConfig+0x320>)
 8000b86:	fa96 f3a6 	rbit	r3, r6
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	fa96 f3a6 	rbit	r3, r6
 8000b90:	fab3 f383 	clz	r3, r3
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	fa05 f303 	lsl.w	r3, r5, r3
 8000b9c:	4213      	tst	r3, r2
 8000b9e:	f43f ae99 	beq.w	80008d4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ba2:	f7ff fb13 	bl	80001cc <HAL_GetTick>
 8000ba6:	eba0 0008 	sub.w	r0, r0, r8
 8000baa:	2802      	cmp	r0, #2
 8000bac:	d9eb      	bls.n	8000b86 <HAL_RCC_OscConfig+0x2c6>
 8000bae:	e743      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bb0:	686b      	ldr	r3, [r5, #4]
 8000bb2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bba:	6869      	ldr	r1, [r5, #4]
 8000bbc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000bc0:	fa93 f3a3 	rbit	r3, r3
 8000bc4:	fab3 f283 	clz	r2, r3
 8000bc8:	69e3      	ldr	r3, [r4, #28]
 8000bca:	4093      	lsls	r3, r2
 8000bcc:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bd4:	f7ff fe34 	bl	8000840 <RCC_SetFlashLatencyFromMSIRange>
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	f43f aeb6 	beq.w	800094a <HAL_RCC_OscConfig+0x8a>
 8000bde:	e704      	b.n	80009ea <HAL_RCC_OscConfig+0x12a>
 8000be0:	40023800 	.word	0x40023800
 8000be4:	08001a00 	.word	0x08001a00
 8000be8:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bec:	69a2      	ldr	r2, [r4, #24]
 8000bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d037      	beq.n	8000c66 <HAL_RCC_OscConfig+0x3a6>
 8000bf6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8000bfa:	fab3 f383 	clz	r3, r3
 8000bfe:	2601      	movs	r6, #1
 8000c00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c04:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fade 	bl	80001cc <HAL_GetTick>
 8000c10:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000c14:	4680      	mov	r8, r0
 8000c16:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000c1a:	682a      	ldr	r2, [r5, #0]
 8000c1c:	fa97 f3a7 	rbit	r3, r7
 8000c20:	fab3 f383 	clz	r3, r3
 8000c24:	f003 031f 	and.w	r3, r3, #31
 8000c28:	fa06 f303 	lsl.w	r3, r6, r3
 8000c2c:	4213      	tst	r3, r2
 8000c2e:	d013      	beq.n	8000c58 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c30:	686b      	ldr	r3, [r5, #4]
 8000c32:	6a22      	ldr	r2, [r4, #32]
 8000c34:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c3c:	6869      	ldr	r1, [r5, #4]
 8000c3e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000c42:	fa93 f3a3 	rbit	r3, r3
 8000c46:	fab3 f283 	clz	r2, r3
 8000c4a:	69e3      	ldr	r3, [r4, #28]
 8000c4c:	4093      	lsls	r3, r2
 8000c4e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000c52:	4313      	orrs	r3, r2
 8000c54:	606b      	str	r3, [r5, #4]
 8000c56:	e696      	b.n	8000986 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c58:	f7ff fab8 	bl	80001cc <HAL_GetTick>
 8000c5c:	eba0 0008 	sub.w	r0, r0, r8
 8000c60:	2802      	cmp	r0, #2
 8000c62:	d9d8      	bls.n	8000c16 <HAL_RCC_OscConfig+0x356>
 8000c64:	e6e8      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
 8000c66:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8000c6a:	fab3 f383 	clz	r3, r3
 8000c6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c72:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c7a:	f7ff faa7 	bl	80001cc <HAL_GetTick>
 8000c7e:	f44f 7600 	mov.w	r6, #512	; 0x200
 8000c82:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000c84:	2701      	movs	r7, #1
 8000c86:	fa96 f3a6 	rbit	r3, r6
 8000c8a:	682a      	ldr	r2, [r5, #0]
 8000c8c:	fa96 f3a6 	rbit	r3, r6
 8000c90:	fab3 f383 	clz	r3, r3
 8000c94:	f003 031f 	and.w	r3, r3, #31
 8000c98:	fa07 f303 	lsl.w	r3, r7, r3
 8000c9c:	4213      	tst	r3, r2
 8000c9e:	f43f ae72 	beq.w	8000986 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ca2:	f7ff fa93 	bl	80001cc <HAL_GetTick>
 8000ca6:	eba0 0008 	sub.w	r0, r0, r8
 8000caa:	2802      	cmp	r0, #2
 8000cac:	d9eb      	bls.n	8000c86 <HAL_RCC_OscConfig+0x3c6>
 8000cae:	e6c3      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cb0:	6962      	ldr	r2, [r4, #20]
 8000cb2:	2501      	movs	r5, #1
 8000cb4:	49a9      	ldr	r1, [pc, #676]	; (8000f5c <HAL_RCC_OscConfig+0x69c>)
 8000cb6:	b302      	cbz	r2, 8000cfa <HAL_RCC_OscConfig+0x43a>
 8000cb8:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8000cbc:	fab3 f383 	clz	r3, r3
 8000cc0:	440b      	add	r3, r1
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8000cc6:	f7ff fa81 	bl	80001cc <HAL_GetTick>
 8000cca:	2602      	movs	r6, #2
 8000ccc:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cce:	4fa4      	ldr	r7, [pc, #656]	; (8000f60 <HAL_RCC_OscConfig+0x6a0>)
 8000cd0:	fa96 f3a6 	rbit	r3, r6
 8000cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cd6:	fa96 f3a6 	rbit	r3, r6
 8000cda:	fab3 f383 	clz	r3, r3
 8000cde:	f003 031f 	and.w	r3, r3, #31
 8000ce2:	fa05 f303 	lsl.w	r3, r5, r3
 8000ce6:	4213      	tst	r3, r2
 8000ce8:	f47f ae51 	bne.w	800098e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cec:	f7ff fa6e 	bl	80001cc <HAL_GetTick>
 8000cf0:	eba0 0008 	sub.w	r0, r0, r8
 8000cf4:	2802      	cmp	r0, #2
 8000cf6:	d9eb      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x410>
 8000cf8:	e69e      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
 8000cfa:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	440b      	add	r3, r1
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d08:	f7ff fa60 	bl	80001cc <HAL_GetTick>
 8000d0c:	2602      	movs	r6, #2
 8000d0e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d10:	4f93      	ldr	r7, [pc, #588]	; (8000f60 <HAL_RCC_OscConfig+0x6a0>)
 8000d12:	fa96 f3a6 	rbit	r3, r6
 8000d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d18:	fa96 f3a6 	rbit	r3, r6
 8000d1c:	fab3 f383 	clz	r3, r3
 8000d20:	f003 031f 	and.w	r3, r3, #31
 8000d24:	fa05 f303 	lsl.w	r3, r5, r3
 8000d28:	4213      	tst	r3, r2
 8000d2a:	f43f ae30 	beq.w	800098e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d2e:	f7ff fa4d 	bl	80001cc <HAL_GetTick>
 8000d32:	eba0 0008 	sub.w	r0, r0, r8
 8000d36:	2802      	cmp	r0, #2
 8000d38:	d9eb      	bls.n	8000d12 <HAL_RCC_OscConfig+0x452>
 8000d3a:	e67d      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3c:	4b88      	ldr	r3, [pc, #544]	; (8000f60 <HAL_RCC_OscConfig+0x6a0>)
 8000d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d40:	00d1      	lsls	r1, r2, #3
 8000d42:	d434      	bmi.n	8000dae <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8000d44:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d58:	4d82      	ldr	r5, [pc, #520]	; (8000f64 <HAL_RCC_OscConfig+0x6a4>)
 8000d5a:	682b      	ldr	r3, [r5, #0]
 8000d5c:	05da      	lsls	r2, r3, #23
 8000d5e:	d528      	bpl.n	8000db2 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d60:	68a3      	ldr	r3, [r4, #8]
 8000d62:	4d7f      	ldr	r5, [pc, #508]	; (8000f60 <HAL_RCC_OscConfig+0x6a0>)
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d134      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x512>
 8000d68:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000d70:	f7ff fa2c 	bl	80001cc <HAL_GetTick>
 8000d74:	f44f 7500 	mov.w	r5, #512	; 0x200
 8000d78:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7a:	2701      	movs	r7, #1
 8000d7c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000f60 <HAL_RCC_OscConfig+0x6a0>
 8000d80:	fa95 f3a5 	rbit	r3, r5
 8000d84:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8000d88:	fa95 f3a5 	rbit	r3, r5
 8000d8c:	fab3 f383 	clz	r3, r3
 8000d90:	f003 031f 	and.w	r3, r3, #31
 8000d94:	fa07 f303 	lsl.w	r3, r7, r3
 8000d98:	4213      	tst	r3, r2
 8000d9a:	d04e      	beq.n	8000e3a <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	f43f adfa 	beq.w	8000996 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000da2:	4a6f      	ldr	r2, [pc, #444]	; (8000f60 <HAL_RCC_OscConfig+0x6a0>)
 8000da4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000daa:	6253      	str	r3, [r2, #36]	; 0x24
 8000dac:	e5f3      	b.n	8000996 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8000dae:	2600      	movs	r6, #0
 8000db0:	e7d2      	b.n	8000d58 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db2:	682b      	ldr	r3, [r5, #0]
 8000db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000dba:	f7ff fa07 	bl	80001cc <HAL_GetTick>
 8000dbe:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc0:	682b      	ldr	r3, [r5, #0]
 8000dc2:	05db      	lsls	r3, r3, #23
 8000dc4:	d4cc      	bmi.n	8000d60 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dc6:	f7ff fa01 	bl	80001cc <HAL_GetTick>
 8000dca:	1bc0      	subs	r0, r0, r7
 8000dcc:	2864      	cmp	r0, #100	; 0x64
 8000dce:	d9f7      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x500>
 8000dd0:	e632      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dd2:	bb23      	cbnz	r3, 8000e1e <HAL_RCC_OscConfig+0x55e>
 8000dd4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000dd6:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dde:	636b      	str	r3, [r5, #52]	; 0x34
 8000de0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000de2:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dea:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000dec:	f7ff f9ee 	bl	80001cc <HAL_GetTick>
 8000df0:	4681      	mov	r9, r0
 8000df2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000df6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000df8:	fa97 f3a7 	rbit	r3, r7
 8000dfc:	fab3 f383 	clz	r3, r3
 8000e00:	f003 031f 	and.w	r3, r3, #31
 8000e04:	fa08 f303 	lsl.w	r3, r8, r3
 8000e08:	4213      	tst	r3, r2
 8000e0a:	d0c7      	beq.n	8000d9c <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e0c:	f7ff f9de 	bl	80001cc <HAL_GetTick>
 8000e10:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e14:	eba0 0009 	sub.w	r0, r0, r9
 8000e18:	4298      	cmp	r0, r3
 8000e1a:	d9ea      	bls.n	8000df2 <HAL_RCC_OscConfig+0x532>
 8000e1c:	e60c      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e1e:	2b05      	cmp	r3, #5
 8000e20:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e22:	d103      	bne.n	8000e2c <HAL_RCC_OscConfig+0x56c>
 8000e24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e28:	636b      	str	r3, [r5, #52]	; 0x34
 8000e2a:	e79d      	b.n	8000d68 <HAL_RCC_OscConfig+0x4a8>
 8000e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e30:	636b      	str	r3, [r5, #52]	; 0x34
 8000e32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e38:	e799      	b.n	8000d6e <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3a:	f7ff f9c7 	bl	80001cc <HAL_GetTick>
 8000e3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e42:	eba0 0009 	sub.w	r0, r0, r9
 8000e46:	4298      	cmp	r0, r3
 8000e48:	d99a      	bls.n	8000d80 <HAL_RCC_OscConfig+0x4c0>
 8000e4a:	e5f5      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e4c:	4d44      	ldr	r5, [pc, #272]	; (8000f60 <HAL_RCC_OscConfig+0x6a0>)
 8000e4e:	68ab      	ldr	r3, [r5, #8]
 8000e50:	f003 030c 	and.w	r3, r3, #12
 8000e54:	2b0c      	cmp	r3, #12
 8000e56:	f43f adc8 	beq.w	80009ea <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e5a:	2a02      	cmp	r2, #2
 8000e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e60:	d156      	bne.n	8000f10 <HAL_RCC_OscConfig+0x650>
 8000e62:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000e66:	fab3 f383 	clz	r3, r3
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e70:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e78:	f7ff f9a8 	bl	80001cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e7c:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8000e7e:	4680      	mov	r8, r0
 8000e80:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e84:	2501      	movs	r5, #1
 8000e86:	fa97 f3a7 	rbit	r3, r7
 8000e8a:	6832      	ldr	r2, [r6, #0]
 8000e8c:	fa97 f3a7 	rbit	r3, r7
 8000e90:	fab3 f383 	clz	r3, r3
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	fa05 f303 	lsl.w	r3, r5, r3
 8000e9c:	4213      	tst	r3, r2
 8000e9e:	d130      	bne.n	8000f02 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ea0:	68b2      	ldr	r2, [r6, #8]
 8000ea2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ea4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000ea6:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000eaa:	430b      	orrs	r3, r1
 8000eac:	4313      	orrs	r3, r2
 8000eae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60b3      	str	r3, [r6, #8]
 8000eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000ebc:	fab3 f383 	clz	r3, r3
 8000ec0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ec4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000ecc:	f7ff f97e 	bl	80001cc <HAL_GetTick>
 8000ed0:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000ed4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ed6:	2501      	movs	r5, #1
 8000ed8:	4e21      	ldr	r6, [pc, #132]	; (8000f60 <HAL_RCC_OscConfig+0x6a0>)
 8000eda:	fa94 f3a4 	rbit	r3, r4
 8000ede:	6832      	ldr	r2, [r6, #0]
 8000ee0:	fa94 f3a4 	rbit	r3, r4
 8000ee4:	fab3 f383 	clz	r3, r3
 8000ee8:	f003 031f 	and.w	r3, r3, #31
 8000eec:	fa05 f303 	lsl.w	r3, r5, r3
 8000ef0:	4213      	tst	r3, r2
 8000ef2:	f47f ad54 	bne.w	800099e <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ef6:	f7ff f969 	bl	80001cc <HAL_GetTick>
 8000efa:	1bc0      	subs	r0, r0, r7
 8000efc:	2802      	cmp	r0, #2
 8000efe:	d9ec      	bls.n	8000eda <HAL_RCC_OscConfig+0x61a>
 8000f00:	e59a      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff f963 	bl	80001cc <HAL_GetTick>
 8000f06:	eba0 0008 	sub.w	r0, r0, r8
 8000f0a:	2802      	cmp	r0, #2
 8000f0c:	d9bb      	bls.n	8000e86 <HAL_RCC_OscConfig+0x5c6>
 8000f0e:	e593      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
 8000f10:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000f14:	fab3 f383 	clz	r3, r3
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f1e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f26:	f7ff f951 	bl	80001cc <HAL_GetTick>
 8000f2a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000f2e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f30:	2601      	movs	r6, #1
 8000f32:	fa94 f3a4 	rbit	r3, r4
 8000f36:	682a      	ldr	r2, [r5, #0]
 8000f38:	fa94 f3a4 	rbit	r3, r4
 8000f3c:	fab3 f383 	clz	r3, r3
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	fa06 f303 	lsl.w	r3, r6, r3
 8000f48:	4213      	tst	r3, r2
 8000f4a:	f43f ad28 	beq.w	800099e <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f4e:	f7ff f93d 	bl	80001cc <HAL_GetTick>
 8000f52:	1bc0      	subs	r0, r0, r7
 8000f54:	2802      	cmp	r0, #2
 8000f56:	d9ec      	bls.n	8000f32 <HAL_RCC_OscConfig+0x672>
 8000f58:	e56e      	b.n	8000a38 <HAL_RCC_OscConfig+0x178>
 8000f5a:	bf00      	nop
 8000f5c:	1091c1a0 	.word	0x1091c1a0
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40007000 	.word	0x40007000

08000f68 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000f68:	491e      	ldr	r1, [pc, #120]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8000f6a:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000f6c:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f6e:	f003 020c 	and.w	r2, r3, #12
 8000f72:	2a08      	cmp	r2, #8
 8000f74:	d005      	beq.n	8000f82 <HAL_RCC_GetSysClockFreq+0x1a>
 8000f76:	2a0c      	cmp	r2, #12
 8000f78:	d005      	beq.n	8000f86 <HAL_RCC_GetSysClockFreq+0x1e>
 8000f7a:	2a04      	cmp	r2, #4
 8000f7c:	d122      	bne.n	8000fc4 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8000f7e:	481a      	ldr	r0, [pc, #104]	; (8000fe8 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8000f80:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000f82:	481a      	ldr	r0, [pc, #104]	; (8000fec <HAL_RCC_GetSysClockFreq+0x84>)
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000f8a:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000f8e:	fab2 f282 	clz	r2, r2
 8000f92:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000f96:	fa20 f202 	lsr.w	r2, r0, r2
 8000f9a:	4815      	ldr	r0, [pc, #84]	; (8000ff0 <HAL_RCC_GetSysClockFreq+0x88>)
 8000f9c:	5c84      	ldrb	r4, [r0, r2]
 8000f9e:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8000fa2:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000fa6:	fab0 f280 	clz	r2, r0
 8000faa:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fae:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000fb0:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fb2:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000fb4:	bf4c      	ite	mi
 8000fb6:	4b0d      	ldrmi	r3, [pc, #52]	; (8000fec <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8000fb8:	4b0b      	ldrpl	r3, [pc, #44]	; (8000fe8 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000fba:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8000fbc:	4363      	muls	r3, r4
 8000fbe:	fbb3 f0f0 	udiv	r0, r3, r0
 8000fc2:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000fc4:	6848      	ldr	r0, [r1, #4]
 8000fc6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	fab3 f383 	clz	r3, r3
 8000fd2:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8000fd6:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8000fd8:	1c43      	adds	r3, r0, #1
 8000fda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000fde:	4098      	lsls	r0, r3
 8000fe0:	bd10      	pop	{r4, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	00f42400 	.word	0x00f42400
 8000fec:	007a1200 	.word	0x007a1200
 8000ff0:	08001a10 	.word	0x08001a10

08000ff4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ff4:	4b6a      	ldr	r3, [pc, #424]	; (80011a0 <HAL_RCC_ClockConfig+0x1ac>)
{
 8000ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ffa:	681a      	ldr	r2, [r3, #0]
{
 8000ffc:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ffe:	f002 0201 	and.w	r2, r2, #1
 8001002:	428a      	cmp	r2, r1
{
 8001004:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001006:	d330      	bcc.n	800106a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001008:	6832      	ldr	r2, [r6, #0]
 800100a:	0794      	lsls	r4, r2, #30
 800100c:	d440      	bmi.n	8001090 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800100e:	07d0      	lsls	r0, r2, #31
 8001010:	d446      	bmi.n	80010a0 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001012:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <HAL_RCC_ClockConfig+0x1ac>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	f002 0201 	and.w	r2, r2, #1
 800101a:	4295      	cmp	r5, r2
 800101c:	f0c0 80ae 	bcc.w	800117c <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001020:	6832      	ldr	r2, [r6, #0]
 8001022:	0751      	lsls	r1, r2, #29
 8001024:	f100 80b3 	bmi.w	800118e <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001028:	0713      	lsls	r3, r2, #28
 800102a:	d507      	bpl.n	800103c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800102c:	4a5d      	ldr	r2, [pc, #372]	; (80011a4 <HAL_RCC_ClockConfig+0x1b0>)
 800102e:	6931      	ldr	r1, [r6, #16]
 8001030:	6893      	ldr	r3, [r2, #8]
 8001032:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001036:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800103a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800103c:	f7ff ff94 	bl	8000f68 <HAL_RCC_GetSysClockFreq>
 8001040:	4b58      	ldr	r3, [pc, #352]	; (80011a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001042:	22f0      	movs	r2, #240	; 0xf0
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	fa92 f2a2 	rbit	r2, r2
 800104a:	fab2 f282 	clz	r2, r2
 800104e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001052:	40d3      	lsrs	r3, r2
 8001054:	4a54      	ldr	r2, [pc, #336]	; (80011a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001056:	5cd3      	ldrb	r3, [r2, r3]
 8001058:	40d8      	lsrs	r0, r3
 800105a:	4b54      	ldr	r3, [pc, #336]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 800105c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff f88c 	bl	800017c <HAL_InitTick>
  return HAL_OK;
 8001064:	2000      	movs	r0, #0
}
 8001066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106a:	2901      	cmp	r1, #1
 800106c:	bf02      	ittt	eq
 800106e:	681a      	ldreq	r2, [r3, #0]
 8001070:	f042 0204 	orreq.w	r2, r2, #4
 8001074:	601a      	streq	r2, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	4299      	cmp	r1, r3
 8001088:	d0be      	beq.n	8001008 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
 800108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001090:	4944      	ldr	r1, [pc, #272]	; (80011a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001092:	68b0      	ldr	r0, [r6, #8]
 8001094:	688b      	ldr	r3, [r1, #8]
 8001096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800109a:	4303      	orrs	r3, r0
 800109c:	608b      	str	r3, [r1, #8]
 800109e:	e7b6      	b.n	800100e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a0:	6872      	ldr	r2, [r6, #4]
 80010a2:	4940      	ldr	r1, [pc, #256]	; (80011a4 <HAL_RCC_ClockConfig+0x1b0>)
 80010a4:	2a02      	cmp	r2, #2
 80010a6:	d10f      	bne.n	80010c8 <HAL_RCC_ClockConfig+0xd4>
 80010a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ac:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80010b0:	6808      	ldr	r0, [r1, #0]
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	fab3 f383 	clz	r3, r3
 80010ba:	2101      	movs	r1, #1
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	4203      	tst	r3, r0
 80010c6:	e013      	b.n	80010f0 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010c8:	2a03      	cmp	r2, #3
 80010ca:	d102      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xde>
 80010cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d0:	e7ec      	b.n	80010ac <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80010d2:	2a01      	cmp	r2, #1
 80010d4:	d129      	bne.n	800112a <HAL_RCC_ClockConfig+0x136>
 80010d6:	2302      	movs	r3, #2
 80010d8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	6809      	ldr	r1, [r1, #0]
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	fab3 f383 	clz	r3, r3
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80010f0:	d0cb      	beq.n	800108a <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010f2:	4c2c      	ldr	r4, [pc, #176]	; (80011a4 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010f8:	68a3      	ldr	r3, [r4, #8]
 80010fa:	f023 0303 	bic.w	r3, r3, #3
 80010fe:	431a      	orrs	r2, r3
 8001100:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001102:	f7ff f863 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001106:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001108:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110a:	2b02      	cmp	r3, #2
 800110c:	d110      	bne.n	8001130 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800110e:	68a3      	ldr	r3, [r4, #8]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	2b08      	cmp	r3, #8
 8001116:	f43f af7c 	beq.w	8001012 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800111a:	f7ff f857 	bl	80001cc <HAL_GetTick>
 800111e:	1bc0      	subs	r0, r0, r7
 8001120:	4540      	cmp	r0, r8
 8001122:	d9f4      	bls.n	800110e <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001124:	2003      	movs	r0, #3
 8001126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800112a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112e:	e7bd      	b.n	80010ac <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001130:	2b03      	cmp	r3, #3
 8001132:	d10b      	bne.n	800114c <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001134:	68a3      	ldr	r3, [r4, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	2b0c      	cmp	r3, #12
 800113c:	f43f af69 	beq.w	8001012 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001140:	f7ff f844 	bl	80001cc <HAL_GetTick>
 8001144:	1bc0      	subs	r0, r0, r7
 8001146:	4540      	cmp	r0, r8
 8001148:	d9f4      	bls.n	8001134 <HAL_RCC_ClockConfig+0x140>
 800114a:	e7eb      	b.n	8001124 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800114c:	2b01      	cmp	r3, #1
 800114e:	d110      	bne.n	8001172 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001150:	68a3      	ldr	r3, [r4, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b04      	cmp	r3, #4
 8001158:	f43f af5b 	beq.w	8001012 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115c:	f7ff f836 	bl	80001cc <HAL_GetTick>
 8001160:	1bc0      	subs	r0, r0, r7
 8001162:	4540      	cmp	r0, r8
 8001164:	d9f4      	bls.n	8001150 <HAL_RCC_ClockConfig+0x15c>
 8001166:	e7dd      	b.n	8001124 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001168:	f7ff f830 	bl	80001cc <HAL_GetTick>
 800116c:	1bc0      	subs	r0, r0, r7
 800116e:	4540      	cmp	r0, r8
 8001170:	d8d8      	bhi.n	8001124 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001172:	68a3      	ldr	r3, [r4, #8]
 8001174:	f013 0f0c 	tst.w	r3, #12
 8001178:	d1f6      	bne.n	8001168 <HAL_RCC_ClockConfig+0x174>
 800117a:	e74a      	b.n	8001012 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	07da      	lsls	r2, r3, #31
 8001188:	f53f af7f 	bmi.w	800108a <HAL_RCC_ClockConfig+0x96>
 800118c:	e748      	b.n	8001020 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800118e:	4905      	ldr	r1, [pc, #20]	; (80011a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001190:	68f0      	ldr	r0, [r6, #12]
 8001192:	688b      	ldr	r3, [r1, #8]
 8001194:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001198:	4303      	orrs	r3, r0
 800119a:	608b      	str	r3, [r1, #8]
 800119c:	e744      	b.n	8001028 <HAL_RCC_ClockConfig+0x34>
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00
 80011a4:	40023800 	.word	0x40023800
 80011a8:	08001a00 	.word	0x08001a00
 80011ac:	20000000 	.word	0x20000000

080011b0 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80011b0:	6803      	ldr	r3, [r0, #0]
{
 80011b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80011b6:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80011b8:	0798      	lsls	r0, r3, #30
 80011ba:	d101      	bne.n	80011c0 <HAL_RCCEx_PeriphCLKConfig+0x10>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  
  return HAL_OK;
 80011bc:	2000      	movs	r0, #0
 80011be:	e055      	b.n	800126c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c0:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80011c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c4:	00d1      	lsls	r1, r2, #3
 80011c6:	d43f      	bmi.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x98>
      pwrclkchanged = SET;
 80011c8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	4e49      	ldr	r6, [pc, #292]	; (8001304 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80011de:	6833      	ldr	r3, [r6, #0]
 80011e0:	05da      	lsls	r2, r3, #23
 80011e2:	d533      	bpl.n	800124c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80011e4:	4b46      	ldr	r3, [pc, #280]	; (8001300 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80011e6:	6862      	ldr	r2, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80011e8:	6819      	ldr	r1, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80011ea:	f002 40c0 	and.w	r0, r2, #1610612736	; 0x60000000
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80011ee:	f001 41c0 	and.w	r1, r1, #1610612736	; 0x60000000
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80011f2:	4281      	cmp	r1, r0
 80011f4:	d104      	bne.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x50>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80011f6:	68a0      	ldr	r0, [r4, #8]
 80011f8:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 80011fc:	4281      	cmp	r1, r0
 80011fe:	d007      	beq.n	8001210 <HAL_RCCEx_PeriphCLKConfig+0x60>
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001200:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001204:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8001208:	d102      	bne.n	8001210 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800120a:	6819      	ldr	r1, [r3, #0]
 800120c:	0388      	lsls	r0, r1, #14
 800120e:	d475      	bmi.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001212:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 8001216:	d12c      	bne.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001218:	6860      	ldr	r0, [r4, #4]
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800121c:	f400 3140 	and.w	r1, r0, #196608	; 0x30000
 8001220:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8001224:	d106      	bne.n	8001234 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 800122c:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 8001230:	4302      	orrs	r2, r0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001236:	4311      	orrs	r1, r2
 8001238:	6359      	str	r1, [r3, #52]	; 0x34
    if(pwrclkchanged == SET)
 800123a:	2d00      	cmp	r5, #0
 800123c:	d0be      	beq.n	80011bc <HAL_RCCEx_PeriphCLKConfig+0xc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800123e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001240:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
 8001246:	e7b9      	b.n	80011bc <HAL_RCCEx_PeriphCLKConfig+0xc>
    FlagStatus       pwrclkchanged = RESET;
 8001248:	2500      	movs	r5, #0
 800124a:	e7c7      	b.n	80011dc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800124c:	6833      	ldr	r3, [r6, #0]
 800124e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001252:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001254:	f7fe ffba 	bl	80001cc <HAL_GetTick>
 8001258:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125a:	6833      	ldr	r3, [r6, #0]
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	d4c1      	bmi.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001260:	f7fe ffb4 	bl	80001cc <HAL_GetTick>
 8001264:	1bc0      	subs	r0, r0, r7
 8001266:	2864      	cmp	r0, #100	; 0x64
 8001268:	d9f7      	bls.n	800125a <HAL_RCCEx_PeriphCLKConfig+0xaa>
          return HAL_TIMEOUT;
 800126a:	2003      	movs	r0, #3
}
 800126c:	b003      	add	sp, #12
 800126e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001272:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001276:	4293      	cmp	r3, r2
 8001278:	d002      	beq.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800127a:	6822      	ldr	r2, [r4, #0]
 800127c:	07d1      	lsls	r1, r2, #31
 800127e:	d407      	bmi.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001280:	68a2      	ldr	r2, [r4, #8]
 8001282:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001286:	4293      	cmp	r3, r2
 8001288:	d0c6      	beq.n	8001218 <HAL_RCCEx_PeriphCLKConfig+0x68>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	079a      	lsls	r2, r3, #30
 800128e:	d5c3      	bpl.n	8001218 <HAL_RCCEx_PeriphCLKConfig+0x68>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001290:	4e1b      	ldr	r6, [pc, #108]	; (8001300 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001292:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001296:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8001298:	f421 3040 	bic.w	r0, r1, #196608	; 0x30000
 800129c:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	2701      	movs	r7, #1
 80012a6:	f8df e060 	ldr.w	lr, [pc, #96]	; 8001308 <HAL_RCCEx_PeriphCLKConfig+0x158>
 80012aa:	4472      	add	r2, lr
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	6017      	str	r7, [r2, #0]
 80012b0:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012b4:	fab3 f383 	clz	r3, r3
 80012b8:	2200      	movs	r2, #0
 80012ba:	4473      	add	r3, lr
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80012c0:	05cb      	lsls	r3, r1, #23
      RCC->CSR = temp_reg;
 80012c2:	6370      	str	r0, [r6, #52]	; 0x34
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80012c4:	d5a8      	bpl.n	8001218 <HAL_RCCEx_PeriphCLKConfig+0x68>
        tickstart = HAL_GetTick();
 80012c6:	f7fe ff81 	bl	80001cc <HAL_GetTick>
 80012ca:	f44f 7800 	mov.w	r8, #512	; 0x200
 80012ce:	4681      	mov	r9, r0
 80012d0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d4:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80012d6:	fa98 f3a8 	rbit	r3, r8
 80012da:	fab3 f383 	clz	r3, r3
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	fa07 f303 	lsl.w	r3, r7, r3
 80012e6:	4213      	tst	r3, r2
 80012e8:	d196      	bne.n	8001218 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7fe ff6f 	bl	80001cc <HAL_GetTick>
 80012ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80012f2:	eba0 0009 	sub.w	r0, r0, r9
 80012f6:	4298      	cmp	r0, r3
 80012f8:	d9ea      	bls.n	80012d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80012fa:	e7b6      	b.n	800126a <HAL_RCCEx_PeriphCLKConfig+0xba>
        return HAL_ERROR; 
 80012fc:	2001      	movs	r0, #1
 80012fe:	e7b5      	b.n	800126c <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8001300:	40023800 	.word	0x40023800
 8001304:	40007000 	.word	0x40007000
 8001308:	1091c1a0 	.word	0x1091c1a0

0800130c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800130c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8001310:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001312:	d00e      	beq.n	8001332 <TIM_Base_SetConfig+0x26>
 8001314:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <TIM_Base_SetConfig+0x7c>)
 8001316:	4290      	cmp	r0, r2
 8001318:	d00b      	beq.n	8001332 <TIM_Base_SetConfig+0x26>
 800131a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800131e:	4290      	cmp	r0, r2
 8001320:	d007      	beq.n	8001332 <TIM_Base_SetConfig+0x26>
 8001322:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001326:	4290      	cmp	r0, r2
 8001328:	d003      	beq.n	8001332 <TIM_Base_SetConfig+0x26>
 800132a:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 800132e:	4290      	cmp	r0, r2
 8001330:	d116      	bne.n	8001360 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001332:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001338:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 800133c:	ea43 0302 	orr.w	r3, r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001340:	d015      	beq.n	800136e <TIM_Base_SetConfig+0x62>
 8001342:	4a11      	ldr	r2, [pc, #68]	; (8001388 <TIM_Base_SetConfig+0x7c>)
 8001344:	4290      	cmp	r0, r2
 8001346:	d012      	beq.n	800136e <TIM_Base_SetConfig+0x62>
 8001348:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800134c:	4290      	cmp	r0, r2
 800134e:	d00e      	beq.n	800136e <TIM_Base_SetConfig+0x62>
 8001350:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001354:	4290      	cmp	r0, r2
 8001356:	d00a      	beq.n	800136e <TIM_Base_SetConfig+0x62>
 8001358:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 800135c:	4290      	cmp	r0, r2
 800135e:	d006      	beq.n	800136e <TIM_Base_SetConfig+0x62>
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <TIM_Base_SetConfig+0x80>)
 8001362:	4290      	cmp	r0, r2
 8001364:	d003      	beq.n	800136e <TIM_Base_SetConfig+0x62>
 8001366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800136a:	4290      	cmp	r0, r2
 800136c:	d103      	bne.n	8001376 <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800136e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001374:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001376:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001378:	688b      	ldr	r3, [r1, #8]
 800137a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800137c:	680b      	ldr	r3, [r1, #0]
 800137e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 8001380:	2301      	movs	r3, #1
 8001382:	6143      	str	r3, [r0, #20]
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40000400 	.word	0x40000400
 800138c:	40010c00 	.word	0x40010c00

08001390 <HAL_TIM_Base_Init>:
{
 8001390:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001392:	4604      	mov	r4, r0
 8001394:	b1a0      	cbz	r0, 80013c0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001396:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800139a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800139e:	b91b      	cbnz	r3, 80013a8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80013a0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Base_MspInit(htim);
 80013a4:	f000 fa6c 	bl	8001880 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80013a8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013aa:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80013ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013b0:	1d21      	adds	r1, r4, #4
 80013b2:	f7ff ffab 	bl	800130c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80013b6:	2301      	movs	r3, #1
  return HAL_OK;
 80013b8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80013ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80013be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80013c0:	2001      	movs	r0, #1
}
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013c4:	6803      	ldr	r3, [r0, #0]
}
 80013c6:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	4770      	bx	lr

080013da <HAL_TIM_PeriodElapsedCallback>:
 80013da:	4770      	bx	lr

080013dc <HAL_TIM_OC_DelayElapsedCallback>:
 80013dc:	4770      	bx	lr

080013de <HAL_TIM_IC_CaptureCallback>:
 80013de:	4770      	bx	lr

080013e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80013e0:	4770      	bx	lr

080013e2 <HAL_TIM_TriggerCallback>:
 80013e2:	4770      	bx	lr

080013e4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013e4:	6803      	ldr	r3, [r0, #0]
{
 80013e6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013e8:	691a      	ldr	r2, [r3, #16]
{
 80013ea:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013ec:	0791      	lsls	r1, r2, #30
 80013ee:	d50e      	bpl.n	800140e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	0792      	lsls	r2, r2, #30
 80013f4:	d50b      	bpl.n	800140e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013f6:	f06f 0202 	mvn.w	r2, #2
 80013fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013fc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80013fe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001400:	7502      	strb	r2, [r0, #20]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001402:	0799      	lsls	r1, r3, #30
 8001404:	d05c      	beq.n	80014c0 <HAL_TIM_IRQHandler+0xdc>
          HAL_TIM_IC_CaptureCallback(htim);
 8001406:	f7ff ffea 	bl	80013de <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800140a:	2300      	movs	r3, #0
 800140c:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	0752      	lsls	r2, r2, #29
 8001414:	d510      	bpl.n	8001438 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	0750      	lsls	r0, r2, #29
 800141a:	d50d      	bpl.n	8001438 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800141c:	f06f 0204 	mvn.w	r2, #4
 8001420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001422:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001424:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001426:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001428:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800142c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800142e:	d04d      	beq.n	80014cc <HAL_TIM_IRQHandler+0xe8>
        HAL_TIM_IC_CaptureCallback(htim);
 8001430:	f7ff ffd5 	bl	80013de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001434:	2300      	movs	r3, #0
 8001436:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	0711      	lsls	r1, r2, #28
 800143e:	d50f      	bpl.n	8001460 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	0712      	lsls	r2, r2, #28
 8001444:	d50c      	bpl.n	8001460 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001446:	f06f 0208 	mvn.w	r2, #8
 800144a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800144c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800144e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001450:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001452:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001454:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001456:	d03f      	beq.n	80014d8 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8001458:	f7ff ffc1 	bl	80013de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800145c:	2300      	movs	r3, #0
 800145e:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	06d0      	lsls	r0, r2, #27
 8001466:	d510      	bpl.n	800148a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	06d1      	lsls	r1, r2, #27
 800146c:	d50d      	bpl.n	800148a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800146e:	f06f 0210 	mvn.w	r2, #16
 8001472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001474:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001476:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001478:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800147a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800147e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001480:	d030      	beq.n	80014e4 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 8001482:	f7ff ffac 	bl	80013de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001486:	2300      	movs	r3, #0
 8001488:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	691a      	ldr	r2, [r3, #16]
 800148e:	07d2      	lsls	r2, r2, #31
 8001490:	d508      	bpl.n	80014a4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	07d0      	lsls	r0, r2, #31
 8001496:	d505      	bpl.n	80014a4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001498:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800149c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800149e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80014a0:	f7ff ff9b 	bl	80013da <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	0651      	lsls	r1, r2, #25
 80014aa:	d508      	bpl.n	80014be <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	0652      	lsls	r2, r2, #25
 80014b0:	d505      	bpl.n	80014be <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80014b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80014ba:	f7ff ff92 	bl	80013e2 <HAL_TIM_TriggerCallback>
 80014be:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014c0:	f7ff ff8c 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff ff8b 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80014ca:	e79e      	b.n	800140a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014cc:	f7ff ff86 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014d0:	4620      	mov	r0, r4
 80014d2:	f7ff ff85 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80014d6:	e7ad      	b.n	8001434 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014d8:	f7ff ff80 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff ff7f 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80014e2:	e7bb      	b.n	800145c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014e4:	f7ff ff7a 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014e8:	4620      	mov	r0, r4
 80014ea:	f7ff ff79 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80014ee:	e7ca      	b.n	8001486 <HAL_TIM_IRQHandler+0xa2>

080014f0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80014f0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 80014f4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	f04f 0302 	mov.w	r3, #2
 80014fc:	d018      	beq.n	8001530 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80014fe:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001502:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001504:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001506:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001508:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800150a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800150e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4322      	orrs	r2, r4
 8001514:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800151c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	430a      	orrs	r2, r1
 8001522:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001524:	2301      	movs	r3, #1
 8001526:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  __HAL_UNLOCK(htim);
 800152a:	2300      	movs	r3, #0
 800152c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 8001530:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001532:	bd10      	pop	{r4, pc}

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001536:	2400      	movs	r4, #0
{
 8001538:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	2234      	movs	r2, #52	; 0x34
 800153c:	2100      	movs	r1, #0
 800153e:	a809      	add	r0, sp, #36	; 0x24
 8001540:	f000 fa4a 	bl	80019d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	2100      	movs	r1, #0
 8001546:	2214      	movs	r2, #20
 8001548:	a804      	add	r0, sp, #16
 800154a:	f000 fa45 	bl	80019d8 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800154e:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <SystemClock_Config+0x7c>)
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	9401      	str	r4, [sp, #4]
 8001552:	9402      	str	r4, [sp, #8]
 8001554:	9403      	str	r4, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001556:	6813      	ldr	r3, [r2, #0]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001558:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800155a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800155e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001562:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001564:	2306      	movs	r3, #6
 8001566:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001568:	2310      	movs	r3, #16
 800156a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800156c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001570:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001572:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001574:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001578:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800157a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800157c:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157e:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001580:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001582:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f7ff f99c 	bl	80008c0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001588:	230f      	movs	r3, #15
 800158a:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800158e:	4629      	mov	r1, r5
 8001590:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001592:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001594:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001596:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001598:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800159a:	f7ff fd2b 	bl	8000ff4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LCD;
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSE;
 800159e:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LCD;
 80015a4:	9601      	str	r6, [sp, #4]
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015a6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a8:	f7ff fe02 	bl	80011b0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80015ac:	b016      	add	sp, #88	; 0x58
 80015ae:	bd70      	pop	{r4, r5, r6, pc}
 80015b0:	40007000 	.word	0x40007000

080015b4 <main>:
{
 80015b4:	b500      	push	{lr}
 80015b6:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80015b8:	f7fe fdf4 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 80015bc:	f7ff ffba 	bl	8001534 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	2214      	movs	r2, #20
 80015c2:	2100      	movs	r1, #0
 80015c4:	a803      	add	r0, sp, #12
 80015c6:	f000 fa07 	bl	80019d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	4b48      	ldr	r3, [pc, #288]	; (80016ec <main+0x138>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_SET);
 80015cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d0:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_SET);
 80015d2:	4847      	ldr	r0, [pc, #284]	; (80016f0 <main+0x13c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d4:	f042 0204 	orr.w	r2, r2, #4
 80015d8:	61da      	str	r2, [r3, #28]
 80015da:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IDD_CNT_EN_Pin */
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	f002 0204 	and.w	r2, r2, #4
 80015e2:	9200      	str	r2, [sp, #0]
 80015e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	61da      	str	r2, [r3, #28]
 80015f0:	69da      	ldr	r2, [r3, #28]
  hadc.Instance = ADC1;
 80015f2:	4d40      	ldr	r5, [pc, #256]	; (80016f4 <main+0x140>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	f002 0201 	and.w	r2, r2, #1
 80015f8:	9201      	str	r2, [sp, #4]
 80015fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	f042 0202 	orr.w	r2, r2, #2
 8001602:	61da      	str	r2, [r3, #28]
 8001604:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_SET);
 8001606:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_SET);
 8001610:	f7ff f888 	bl	8000724 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	21c0      	movs	r1, #192	; 0xc0
 8001618:	4837      	ldr	r0, [pc, #220]	; (80016f8 <main+0x144>)
 800161a:	f7ff f883 	bl	8000724 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
 800161e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(IDD_CNT_EN_GPIO_Port, &GPIO_InitStruct);
 8001622:	a903      	add	r1, sp, #12
 8001624:	4832      	ldr	r0, [pc, #200]	; (80016f0 <main+0x13c>)
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
 8001626:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(IDD_CNT_EN_GPIO_Port, &GPIO_InitStruct);
 800162e:	f7fe ffa5 	bl	800057c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001632:	4b32      	ldr	r3, [pc, #200]	; (80016fc <main+0x148>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001634:	a903      	add	r1, sp, #12
 8001636:	4832      	ldr	r0, [pc, #200]	; (8001700 <main+0x14c>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001638:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 800163a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800163e:	f7fe ff9d 	bl	800057c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001642:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	a903      	add	r1, sp, #12
 8001646:	482c      	ldr	r0, [pc, #176]	; (80016f8 <main+0x144>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001648:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f7fe ff94 	bl	800057c <HAL_GPIO_Init>
  hadc.Instance = ADC1;
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <main+0x150>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001656:	4628      	mov	r0, r5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001658:	e885 0018 	stmia.w	r5, {r3, r4}
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 800165c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001660:	636b      	str	r3, [r5, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001662:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001666:	60ac      	str	r4, [r5, #8]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001668:	63ab      	str	r3, [r5, #56]	; 0x38
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800166a:	60ec      	str	r4, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800166c:	612c      	str	r4, [r5, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800166e:	616c      	str	r4, [r5, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001670:	61ac      	str	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001672:	61ec      	str	r4, [r5, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001674:	622c      	str	r4, [r5, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001676:	626c      	str	r4, [r5, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001678:	62ae      	str	r6, [r5, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800167a:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 800167c:	63ec      	str	r4, [r5, #60]	; 0x3c
  ADC_ChannelConfTypeDef sConfig = {0};
 800167e:	9403      	str	r4, [sp, #12]
 8001680:	9404      	str	r4, [sp, #16]
 8001682:	9405      	str	r4, [sp, #20]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001684:	f7fe fda8 	bl	80001d8 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8001688:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800168a:	a903      	add	r1, sp, #12
 800168c:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 800168e:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001690:	9604      	str	r6, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001692:	9405      	str	r4, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001694:	f7fe fe5e 	bl	8000354 <HAL_ADC_ConfigChannel>
  hlcd.Instance = LCD;
 8001698:	481b      	ldr	r0, [pc, #108]	; (8001708 <main+0x154>)
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <main+0x158>)
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800169c:	6084      	str	r4, [r0, #8]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800169e:	e880 0018 	stmia.w	r0, {r3, r4}
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80016a2:	230c      	movs	r3, #12
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80016a4:	6104      	str	r4, [r0, #16]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80016a6:	60c3      	str	r3, [r0, #12]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80016a8:	6144      	str	r4, [r0, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80016aa:	6184      	str	r4, [r0, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80016ac:	61c4      	str	r4, [r0, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80016ae:	6204      	str	r4, [r0, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80016b0:	6304      	str	r4, [r0, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80016b2:	6284      	str	r4, [r0, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80016b4:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80016b6:	f7ff f84f 	bl	8000758 <HAL_LCD_Init>
  htim6.Init.Prescaler = 31999;
 80016ba:	f647 43ff 	movw	r3, #31999	; 0x7cff
  htim6.Instance = TIM6;
 80016be:	4d14      	ldr	r5, [pc, #80]	; (8001710 <main+0x15c>)
  htim6.Init.Prescaler = 31999;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <main+0x160>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016c2:	4628      	mov	r0, r5
  htim6.Init.Prescaler = 31999;
 80016c4:	e885 000c 	stmia.w	r5, {r2, r3}
  htim6.Init.Period = 1000;
 80016c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016cc:	9403      	str	r4, [sp, #12]
  htim6.Init.Period = 1000;
 80016ce:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	9404      	str	r4, [sp, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016d4:	f7ff fe5c 	bl	8001390 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016d8:	a903      	add	r1, sp, #12
 80016da:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016e0:	f7ff ff06 	bl	80014f0 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim6);
 80016e4:	4628      	mov	r0, r5
 80016e6:	f7ff fe6d 	bl	80013c4 <HAL_TIM_Base_Start_IT>
 80016ea:	e7fe      	b.n	80016ea <main+0x136>
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020800 	.word	0x40020800
 80016f4:	20000098 	.word	0x20000098
 80016f8:	40020400 	.word	0x40020400
 80016fc:	10120000 	.word	0x10120000
 8001700:	40020000 	.word	0x40020000
 8001704:	40012400 	.word	0x40012400
 8001708:	2000005c 	.word	0x2000005c
 800170c:	40002400 	.word	0x40002400
 8001710:	20000024 	.word	0x20000024
 8001714:	40001000 	.word	0x40001000

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_MspInit+0x48>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800171c:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 800171e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001720:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001724:	625a      	str	r2, [r3, #36]	; 0x24
 8001726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001728:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800172c:	9201      	str	r2, [sp, #4]
 800172e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001730:	6a1a      	ldr	r2, [r3, #32]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	621a      	str	r2, [r3, #32]
 8001738:	6a1a      	ldr	r2, [r3, #32]
 800173a:	f002 0201 	and.w	r2, r2, #1
 800173e:	9202      	str	r2, [sp, #8]
 8001740:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001744:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	9303      	str	r3, [sp, #12]
 8001752:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001754:	f7fe feaa 	bl	80004ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001758:	b005      	add	sp, #20
 800175a:	f85d fb04 	ldr.w	pc, [sp], #4
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800

08001764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001764:	b510      	push	{r4, lr}
 8001766:	4604      	mov	r4, r0
 8001768:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	2214      	movs	r2, #20
 800176c:	2100      	movs	r1, #0
 800176e:	a803      	add	r0, sp, #12
 8001770:	f000 f932 	bl	80019d8 <memset>
  if(hadc->Instance==ADC1)
 8001774:	6822      	ldr	r2, [r4, #0]
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_ADC_MspInit+0x54>)
 8001778:	429a      	cmp	r2, r3
 800177a:	d11b      	bne.n	80017b4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800177c:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8001780:	6a1a      	ldr	r2, [r3, #32]
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8001782:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001788:	621a      	str	r2, [r3, #32]
 800178a:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 800178c:	480b      	ldr	r0, [pc, #44]	; (80017bc <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800178e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	69da      	ldr	r2, [r3, #28]
 8001798:	f042 0201 	orr.w	r2, r2, #1
 800179c:	61da      	str	r2, [r3, #28]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 80017a8:	2310      	movs	r3, #16
 80017aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ac:	2303      	movs	r3, #3
 80017ae:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f7fe fee4 	bl	800057c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017b4:	b008      	add	sp, #32
 80017b6:	bd10      	pop	{r4, pc}
 80017b8:	40012400 	.word	0x40012400
 80017bc:	40020000 	.word	0x40020000

080017c0 <HAL_LCD_MspInit>:
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	2214      	movs	r2, #20
{
 80017c2:	b570      	push	{r4, r5, r6, lr}
 80017c4:	4604      	mov	r4, r0
 80017c6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	eb0d 0002 	add.w	r0, sp, r2
 80017cc:	2100      	movs	r1, #0
 80017ce:	f000 f903 	bl	80019d8 <memset>
  if(hlcd->Instance==LCD)
 80017d2:	6822      	ldr	r2, [r4, #0]
 80017d4:	4b26      	ldr	r3, [pc, #152]	; (8001870 <HAL_LCD_MspInit+0xb0>)
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d147      	bne.n	800186a <HAL_LCD_MspInit+0xaa>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 80017da:	f503 3305 	add.w	r3, r3, #136192	; 0x21400
 80017de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin 
                          |SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin 
                          |SEG22_Pin|SEG23_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2602      	movs	r6, #2
    __HAL_RCC_LCD_CLK_ENABLE();
 80017e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
 80017e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80017ea:	250b      	movs	r5, #11
    __HAL_RCC_LCD_CLK_ENABLE();
 80017ec:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80017f0:	9201      	str	r2, [sp, #4]
 80017f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	f042 0204 	orr.w	r2, r2, #4
 80017fc:	61da      	str	r2, [r3, #28]
 80017fe:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001800:	481c      	ldr	r0, [pc, #112]	; (8001874 <HAL_LCD_MspInit+0xb4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	f002 0204 	and.w	r2, r2, #4
 8001806:	9202      	str	r2, [sp, #8]
 8001808:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	69da      	ldr	r2, [r3, #28]

    GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin 
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	61da      	str	r2, [r3, #28]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	f002 0201 	and.w	r2, r2, #1
 800181a:	9203      	str	r2, [sp, #12]
 800181c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	69da      	ldr	r2, [r3, #28]
 8001820:	f042 0202 	orr.w	r2, r2, #2
 8001824:	61da      	str	r2, [r3, #28]
 8001826:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	9304      	str	r3, [sp, #16]
 8001830:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin 
 8001832:	f640 73cf 	movw	r3, #4047	; 0xfcf
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001836:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin 
 8001838:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	f7fe fe9f 	bl	800057c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin 
 800183e:	f248 730e 	movw	r3, #34574	; 0x870e
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	a905      	add	r1, sp, #20
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <HAL_LCD_MspInit+0xb8>)
    GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin 
 8001846:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800184e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f7fe fe94 	bl	800057c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin 
 8001854:	f64f 7338 	movw	r3, #65336	; 0xff38
                          |SEG5_Pin|SEG13_Pin|COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	a905      	add	r1, sp, #20
 800185a:	4808      	ldr	r0, [pc, #32]	; (800187c <HAL_LCD_MspInit+0xbc>)
    GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin 
 800185c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001864:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f7fe fe89 	bl	800057c <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 800186a:	b00a      	add	sp, #40	; 0x28
 800186c:	bd70      	pop	{r4, r5, r6, pc}
 800186e:	bf00      	nop
 8001870:	40002400 	.word	0x40002400
 8001874:	40020800 	.word	0x40020800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020400 	.word	0x40020400

08001880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001880:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_TIM_Base_MspInit+0x38>)
 8001884:	6802      	ldr	r2, [r0, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d112      	bne.n	80018b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800188a:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 800188e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001890:	202b      	movs	r0, #43	; 0x2b
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001892:	f042 0210 	orr.w	r2, r2, #16
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001898:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800189c:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80018a6:	f7fe fe13 	bl	80004d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80018aa:	202b      	movs	r0, #43	; 0x2b
 80018ac:	f7fe fe44 	bl	8000538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018b0:	b003      	add	sp, #12
 80018b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018b6:	bf00      	nop
 80018b8:	40001000 	.word	0x40001000

080018bc <NMI_Handler>:
 80018bc:	4770      	bx	lr

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	e7fe      	b.n	80018be <HardFault_Handler>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	e7fe      	b.n	80018c2 <BusFault_Handler>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	e7fe      	b.n	80018c4 <UsageFault_Handler>

080018c6 <SVC_Handler>:
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:
 80018c8:	4770      	bx	lr

080018ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018cc:	f7fe bc76 	b.w	80001bc <HAL_IncTick>

080018d0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80018d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */
 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, !HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin));
 80018d2:	4c08      	ldr	r4, [pc, #32]	; (80018f4 <TIM6_IRQHandler+0x24>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7fe ff1e 	bl	8000718 <HAL_GPIO_ReadPin>
 80018dc:	fab0 f280 	clz	r2, r0
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	4620      	mov	r0, r4
 80018e4:	0952      	lsrs	r2, r2, #5
 80018e6:	f7fe ff1d 	bl	8000724 <HAL_GPIO_WritePin>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80018ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_TIM_IRQHandler(&htim6);
 80018ee:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM6_IRQHandler+0x28>)
 80018f0:	f7ff bd78 	b.w	80013e4 <HAL_TIM_IRQHandler>
 80018f4:	40020400 	.word	0x40020400
 80018f8:	20000024 	.word	0x20000024

080018fc <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <SystemInit+0x3c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001904:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001906:	6899      	ldr	r1, [r3, #8]
 8001908:	4a0c      	ldr	r2, [pc, #48]	; (800193c <SystemInit+0x40>)
 800190a:	400a      	ands	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8001914:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8001918:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001920:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001928:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800192e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001932:	4b03      	ldr	r3, [pc, #12]	; (8001940 <SystemInit+0x44>)
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	4770      	bx	lr
 8001938:	40023800 	.word	0x40023800
 800193c:	88ffc00c 	.word	0x88ffc00c
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001944:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001946:	e003      	b.n	8001950 <LoopCopyDataInit>

08001948 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800194a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800194c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800194e:	3104      	adds	r1, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001950:	480a      	ldr	r0, [pc, #40]	; (800197c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001954:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001956:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001958:	d3f6      	bcc.n	8001948 <CopyDataInit>
  ldr r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800195c:	e002      	b.n	8001964 <LoopFillZerobss>

0800195e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001960:	f842 3b04 	str.w	r3, [r2], #4

08001964 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001966:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001968:	d3f9      	bcc.n	800195e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800196a:	f7ff ffc7 	bl	80018fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f000 f80f 	bl	8001990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001972:	f7ff fe1f 	bl	80015b4 <main>
  bx lr
 8001976:	4770      	bx	lr
  ldr r3, =_sidata
 8001978:	08001a24 	.word	0x08001a24
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001980:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001984:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001988:	200000ec 	.word	0x200000ec

0800198c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC1_IRQHandler>
	...

08001990 <__libc_init_array>:
 8001990:	b570      	push	{r4, r5, r6, lr}
 8001992:	2500      	movs	r5, #0
 8001994:	4e0c      	ldr	r6, [pc, #48]	; (80019c8 <__libc_init_array+0x38>)
 8001996:	4c0d      	ldr	r4, [pc, #52]	; (80019cc <__libc_init_array+0x3c>)
 8001998:	1ba4      	subs	r4, r4, r6
 800199a:	10a4      	asrs	r4, r4, #2
 800199c:	42a5      	cmp	r5, r4
 800199e:	d109      	bne.n	80019b4 <__libc_init_array+0x24>
 80019a0:	f000 f822 	bl	80019e8 <_init>
 80019a4:	2500      	movs	r5, #0
 80019a6:	4e0a      	ldr	r6, [pc, #40]	; (80019d0 <__libc_init_array+0x40>)
 80019a8:	4c0a      	ldr	r4, [pc, #40]	; (80019d4 <__libc_init_array+0x44>)
 80019aa:	1ba4      	subs	r4, r4, r6
 80019ac:	10a4      	asrs	r4, r4, #2
 80019ae:	42a5      	cmp	r5, r4
 80019b0:	d105      	bne.n	80019be <__libc_init_array+0x2e>
 80019b2:	bd70      	pop	{r4, r5, r6, pc}
 80019b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019b8:	4798      	blx	r3
 80019ba:	3501      	adds	r5, #1
 80019bc:	e7ee      	b.n	800199c <__libc_init_array+0xc>
 80019be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019c2:	4798      	blx	r3
 80019c4:	3501      	adds	r5, #1
 80019c6:	e7f2      	b.n	80019ae <__libc_init_array+0x1e>
 80019c8:	08001a1c 	.word	0x08001a1c
 80019cc:	08001a1c 	.word	0x08001a1c
 80019d0:	08001a1c 	.word	0x08001a1c
 80019d4:	08001a20 	.word	0x08001a20

080019d8 <memset>:
 80019d8:	4603      	mov	r3, r0
 80019da:	4402      	add	r2, r0
 80019dc:	4293      	cmp	r3, r2
 80019de:	d100      	bne.n	80019e2 <memset+0xa>
 80019e0:	4770      	bx	lr
 80019e2:	f803 1b01 	strb.w	r1, [r3], #1
 80019e6:	e7f9      	b.n	80019dc <memset+0x4>

080019e8 <_init>:
 80019e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ea:	bf00      	nop
 80019ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ee:	bc08      	pop	{r3}
 80019f0:	469e      	mov	lr, r3
 80019f2:	4770      	bx	lr

080019f4 <_fini>:
 80019f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f6:	bf00      	nop
 80019f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fa:	bc08      	pop	{r3}
 80019fc:	469e      	mov	lr, r3
 80019fe:	4770      	bx	lr
