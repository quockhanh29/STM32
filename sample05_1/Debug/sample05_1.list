
sample05_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f10  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800307c  0800307c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  20000004  08003088  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000d4  08003088  000200d4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e6a5  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f52  00000000  00000000  0002e6d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000668  00000000  00000000  00030628  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  00030c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003df2  00000000  00000000  00031220  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002508  00000000  00000000  00035012  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003751a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000017c4  00000000  00000000  00037598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08003034 	.word	0x08003034

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08003034 	.word	0x08003034

0800017c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000180:	2003      	movs	r0, #3
 8000182:	f000 fb79 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f000 f806 	bl	8000198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800018c:	f002 fd8c 	bl	8002ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
	...

08000198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 80001a0:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <HAL_InitTick+0x30>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a09      	ldr	r2, [pc, #36]	; (80001cc <HAL_InitTick+0x34>)
 80001a6:	fba2 2303 	umull	r2, r3, r2, r3
 80001aa:	099b      	lsrs	r3, r3, #6
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 fb8a 	bl	80008c6 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001b2:	2200      	movs	r2, #0
 80001b4:	6879      	ldr	r1, [r7, #4]
 80001b6:	f04f 30ff 	mov.w	r0, #4294967295
 80001ba:	f000 fb68 	bl	800088e <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	3708      	adds	r7, #8
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	20000000 	.word	0x20000000
 80001cc:	10624dd3 	.word	0x10624dd3

080001d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  uwTick++;
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <HAL_IncTick+0x18>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	3301      	adds	r3, #1
 80001da:	4a03      	ldr	r2, [pc, #12]	; (80001e8 <HAL_IncTick+0x18>)
 80001dc:	6013      	str	r3, [r2, #0]
}
 80001de:	bf00      	nop
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000020 	.word	0x20000020

080001ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  return uwTick;
 80001f0:	4b02      	ldr	r3, [pc, #8]	; (80001fc <HAL_GetTick+0x10>)
 80001f2:	681b      	ldr	r3, [r3, #0]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	20000020 	.word	0x20000020

08000200 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b08e      	sub	sp, #56	; 0x38
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000208:	2300      	movs	r3, #0
 800020a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d101      	bne.n	8000220 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800021c:	2301      	movs	r3, #1
 800021e:	e11e      	b.n	800045e <HAL_ADC_Init+0x25e>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	2b00      	cmp	r3, #0
 800022c:	d115      	bne.n	800025a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2200      	movs	r2, #0
 8000238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800023c:	4a8a      	ldr	r2, [pc, #552]	; (8000468 <HAL_ADC_Init+0x268>)
 800023e:	4b8a      	ldr	r3, [pc, #552]	; (8000468 <HAL_ADC_Init+0x268>)
 8000240:	6a1b      	ldr	r3, [r3, #32]
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6213      	str	r3, [r2, #32]
 8000248:	4b87      	ldr	r3, [pc, #540]	; (8000468 <HAL_ADC_Init+0x268>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	60bb      	str	r3, [r7, #8]
 8000252:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f002 fd57 	bl	8002d08 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025e:	f003 0310 	and.w	r3, r3, #16
 8000262:	2b00      	cmp	r3, #0
 8000264:	f040 80f6 	bne.w	8000454 <HAL_ADC_Init+0x254>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000270:	f023 0302 	bic.w	r3, r3, #2
 8000274:	f043 0202 	orr.w	r2, r3, #2
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800027c:	497b      	ldr	r1, [pc, #492]	; (800046c <HAL_ADC_Init+0x26c>)
 800027e:	4b7b      	ldr	r3, [pc, #492]	; (800046c <HAL_ADC_Init+0x26c>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	4313      	orrs	r3, r2
 800028c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                 |
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                              |
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                 |
 8000296:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800029c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002a0:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	fa93 f3a3 	rbit	r3, r3
 80002a8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	fab3 f383 	clz	r3, r3
 80002b0:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                              |
 80002b4:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                              |
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 80002ba:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80002c0:	2302      	movs	r3, #2
 80002c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002c6:	fa93 f3a3 	rbit	r3, r3
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80002cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ce:	fab3 f383 	clz	r3, r3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                              |
 80002d6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                 |
 80002d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80002da:	4313      	orrs	r3, r2
 80002dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002e2:	2b10      	cmp	r3, #16
 80002e4:	d007      	beq.n	80002f6 <HAL_ADC_Init+0xf6>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80002ee:	4313      	orrs	r3, r2
 80002f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80002f2:	4313      	orrs	r3, r2
 80002f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000300:	2b40      	cmp	r3, #64	; 0x40
 8000302:	d04d      	beq.n	80003a0 <HAL_ADC_Init+0x1a0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800030a:	4313      	orrs	r3, r2
 800030c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000316:	431a      	orrs	r2, r3
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000320:	d003      	beq.n	800032a <HAL_ADC_Init+0x12a>
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d102      	bne.n	8000330 <HAL_ADC_Init+0x130>
 800032a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032e:	e000      	b.n	8000332 <HAL_ADC_Init+0x132>
 8000330:	2300      	movs	r3, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000332:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000336:	4313      	orrs	r3, r2
 8000338:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033e:	2b01      	cmp	r3, #1
 8000340:	d124      	bne.n	800038c <HAL_ADC_Init+0x18c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000346:	2b00      	cmp	r3, #0
 8000348:	d114      	bne.n	8000374 <HAL_ADC_Init+0x174>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	1e5a      	subs	r2, r3, #1
 8000350:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000354:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000356:	69bb      	ldr	r3, [r7, #24]
 8000358:	fa93 f3a3 	rbit	r3, r3
 800035c:	617b      	str	r3, [r7, #20]
  return(result);
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	fab3 f383 	clz	r3, r3
 8000364:	fa02 f303 	lsl.w	r3, r2, r3
 8000368:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800036c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800036e:	4313      	orrs	r3, r2
 8000370:	633b      	str	r3, [r7, #48]	; 0x30
 8000372:	e00b      	b.n	800038c <HAL_ADC_Init+0x18c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000378:	f043 0220 	orr.w	r2, r3, #32
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000384:	f043 0201 	orr.w	r2, r3, #1
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	6859      	ldr	r1, [r3, #4]
 8000396:	4b36      	ldr	r3, [pc, #216]	; (8000470 <HAL_ADC_Init+0x270>)
 8000398:	400b      	ands	r3, r1
 800039a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800039c:	430b      	orrs	r3, r1
 800039e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	6899      	ldr	r1, [r3, #8]
 80003aa:	4b32      	ldr	r3, [pc, #200]	; (8000474 <HAL_ADC_Init+0x274>)
 80003ac:	400b      	ands	r3, r1
 80003ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80003b0:	430b      	orrs	r3, r1
 80003b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003bc:	d003      	beq.n	80003c6 <HAL_ADC_Init+0x1c6>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	691b      	ldr	r3, [r3, #16]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d118      	bne.n	80003f8 <HAL_ADC_Init+0x1f8>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	6812      	ldr	r2, [r2, #0]
 80003ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80003d0:	f022 71f8 	bic.w	r1, r2, #32505856	; 0x1f00000
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80003d8:	1e50      	subs	r0, r2, #1
 80003da:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80003de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003e0:	693a      	ldr	r2, [r7, #16]
 80003e2:	fa92 f2a2 	rbit	r2, r2
 80003e6:	60fa      	str	r2, [r7, #12]
  return(result);
 80003e8:	68fa      	ldr	r2, [r7, #12]
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	fa00 f202 	lsl.w	r2, r0, r2
 80003f2:	430a      	orrs	r2, r1
 80003f4:	631a      	str	r2, [r3, #48]	; 0x30
 80003f6:	e007      	b.n	8000408 <HAL_ADC_Init+0x208>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	6812      	ldr	r2, [r2, #0]
 8000400:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000402:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000406:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	689a      	ldr	r2, [r3, #8]
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <HAL_ADC_Init+0x278>)
 8000410:	4013      	ands	r3, r2
 8000412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000414:	4293      	cmp	r3, r2
 8000416:	d10b      	bne.n	8000430 <HAL_ADC_Init+0x230>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2200      	movs	r2, #0
 800041c:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	f023 0303 	bic.w	r3, r3, #3
 8000426:	f043 0201 	orr.w	r2, r3, #1
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	64da      	str	r2, [r3, #76]	; 0x4c
 800042e:	e014      	b.n	800045a <HAL_ADC_Init+0x25a>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000434:	f023 0312 	bic.w	r3, r3, #18
 8000438:	f043 0210 	orr.w	r2, r3, #16
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000444:	f043 0201 	orr.w	r2, r3, #1
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800044c:	2301      	movs	r3, #1
 800044e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000452:	e002      	b.n	800045a <HAL_ADC_Init+0x25a>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000454:	2301      	movs	r3, #1
 8000456:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800045a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800045e:	4618      	mov	r0, r3
 8000460:	3738      	adds	r7, #56	; 0x38
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40023800 	.word	0x40023800
 800046c:	40012700 	.word	0x40012700
 8000470:	fcfc16ff 	.word	0xfcfc16ff
 8000474:	c0fff189 	.word	0xc0fff189
 8000478:	bf80fffe 	.word	0xbf80fffe

0800047c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800047c:	b490      	push	{r4, r7}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000486:	2300      	movs	r3, #0
 8000488:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000494:	2b01      	cmp	r3, #1
 8000496:	d101      	bne.n	800049c <HAL_ADC_ConfigChannel+0x20>
 8000498:	2302      	movs	r3, #2
 800049a:	e134      	b.n	8000706 <HAL_ADC_ConfigChannel+0x28a>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2201      	movs	r2, #1
 80004a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	2b06      	cmp	r3, #6
 80004aa:	d81c      	bhi.n	80004e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	6819      	ldr	r1, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	685a      	ldr	r2, [r3, #4]
 80004ba:	4613      	mov	r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	4413      	add	r3, r2
 80004c0:	3b05      	subs	r3, #5
 80004c2:	221f      	movs	r2, #31
 80004c4:	fa02 f303 	lsl.w	r3, r2, r3
 80004c8:	43db      	mvns	r3, r3
 80004ca:	4018      	ands	r0, r3
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	681c      	ldr	r4, [r3, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	685a      	ldr	r2, [r3, #4]
 80004d4:	4613      	mov	r3, r2
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	3b05      	subs	r3, #5
 80004dc:	fa04 f303 	lsl.w	r3, r4, r3
 80004e0:	4303      	orrs	r3, r0
 80004e2:	640b      	str	r3, [r1, #64]	; 0x40
 80004e4:	e07e      	b.n	80005e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	2b0c      	cmp	r3, #12
 80004ec:	d81c      	bhi.n	8000528 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6819      	ldr	r1, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	685a      	ldr	r2, [r3, #4]
 80004fc:	4613      	mov	r3, r2
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	4413      	add	r3, r2
 8000502:	3b23      	subs	r3, #35	; 0x23
 8000504:	221f      	movs	r2, #31
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	43db      	mvns	r3, r3
 800050c:	4018      	ands	r0, r3
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	681c      	ldr	r4, [r3, #0]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	4613      	mov	r3, r2
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	4413      	add	r3, r2
 800051c:	3b23      	subs	r3, #35	; 0x23
 800051e:	fa04 f303 	lsl.w	r3, r4, r3
 8000522:	4303      	orrs	r3, r0
 8000524:	63cb      	str	r3, [r1, #60]	; 0x3c
 8000526:	e05d      	b.n	80005e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	2b12      	cmp	r3, #18
 800052e:	d81c      	bhi.n	800056a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6819      	ldr	r1, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	4613      	mov	r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	4413      	add	r3, r2
 8000544:	3b41      	subs	r3, #65	; 0x41
 8000546:	221f      	movs	r2, #31
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	4018      	ands	r0, r3
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	681c      	ldr	r4, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	4613      	mov	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	3b41      	subs	r3, #65	; 0x41
 8000560:	fa04 f303 	lsl.w	r3, r4, r3
 8000564:	4303      	orrs	r3, r0
 8000566:	638b      	str	r3, [r1, #56]	; 0x38
 8000568:	e03c      	b.n	80005e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	2b18      	cmp	r3, #24
 8000570:	d81c      	bhi.n	80005ac <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6819      	ldr	r1, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	3b5f      	subs	r3, #95	; 0x5f
 8000588:	221f      	movs	r2, #31
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	4018      	ands	r0, r3
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	681c      	ldr	r4, [r3, #0]
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685a      	ldr	r2, [r3, #4]
 800059a:	4613      	mov	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	4413      	add	r3, r2
 80005a0:	3b5f      	subs	r3, #95	; 0x5f
 80005a2:	fa04 f303 	lsl.w	r3, r4, r3
 80005a6:	4303      	orrs	r3, r0
 80005a8:	634b      	str	r3, [r1, #52]	; 0x34
 80005aa:	e01b      	b.n	80005e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	685a      	ldr	r2, [r3, #4]
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	3b7d      	subs	r3, #125	; 0x7d
 80005c2:	221f      	movs	r2, #31
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	43db      	mvns	r3, r3
 80005ca:	4018      	ands	r0, r3
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	681c      	ldr	r4, [r3, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	685a      	ldr	r2, [r3, #4]
 80005d4:	4613      	mov	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	3b7d      	subs	r3, #125	; 0x7d
 80005dc:	fa04 f303 	lsl.w	r3, r4, r3
 80005e0:	4303      	orrs	r3, r0
 80005e2:	630b      	str	r3, [r1, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b09      	cmp	r3, #9
 80005ea:	d81a      	bhi.n	8000622 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6819      	ldr	r1, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6958      	ldr	r0, [r3, #20]
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4613      	mov	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4413      	add	r3, r2
 8000600:	2207      	movs	r2, #7
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	4018      	ands	r0, r3
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	689c      	ldr	r4, [r3, #8]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4613      	mov	r3, r2
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	4413      	add	r3, r2
 8000618:	fa04 f303 	lsl.w	r3, r4, r3
 800061c:	4303      	orrs	r3, r0
 800061e:	614b      	str	r3, [r1, #20]
 8000620:	e042      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b13      	cmp	r3, #19
 8000628:	d81c      	bhi.n	8000664 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6819      	ldr	r1, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6918      	ldr	r0, [r3, #16]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	4413      	add	r3, r2
 800063e:	3b1e      	subs	r3, #30
 8000640:	2207      	movs	r2, #7
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	43db      	mvns	r3, r3
 8000648:	4018      	ands	r0, r3
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	689c      	ldr	r4, [r3, #8]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4613      	mov	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	3b1e      	subs	r3, #30
 800065a:	fa04 f303 	lsl.w	r3, r4, r3
 800065e:	4303      	orrs	r3, r0
 8000660:	610b      	str	r3, [r1, #16]
 8000662:	e021      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b1a      	cmp	r3, #26
 800066a:	d81c      	bhi.n	80006a6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6819      	ldr	r1, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	68d8      	ldr	r0, [r3, #12]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	3b3c      	subs	r3, #60	; 0x3c
 8000682:	2207      	movs	r2, #7
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	43db      	mvns	r3, r3
 800068a:	4018      	ands	r0, r3
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	689c      	ldr	r4, [r3, #8]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	3b3c      	subs	r3, #60	; 0x3c
 800069c:	fa04 f303 	lsl.w	r3, r4, r3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	60cb      	str	r3, [r1, #12]
 80006a4:	e000      	b.n	80006a8 <HAL_ADC_ConfigChannel+0x22c>
  __ASM volatile ("nop");
 80006a6:	bf00      	nop
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b10      	cmp	r3, #16
 80006ae:	d003      	beq.n	80006b8 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006b4:	2b11      	cmp	r3, #17
 80006b6:	d121      	bne.n	80006fc <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_ADC_ConfigChannel+0x294>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d11b      	bne.n	80006fc <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <HAL_ADC_ConfigChannel+0x294>)
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_ADC_ConfigChannel+0x294>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006ce:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b10      	cmp	r3, #16
 80006d6:	d111      	bne.n	80006fc <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_ADC_ConfigChannel+0x298>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_ADC_ConfigChannel+0x29c>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	0c9a      	lsrs	r2, r3, #18
 80006e4:	4613      	mov	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80006ee:	e002      	b.n	80006f6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f9      	bne.n	80006f0 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bc90      	pop	{r4, r7}
 800070e:	4770      	bx	lr
 8000710:	40012700 	.word	0x40012700
 8000714:	20000000 	.word	0x20000000
 8000718:	431bde83 	.word	0x431bde83

0800071c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	da0b      	bge.n	80007ac <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	490d      	ldr	r1, [pc, #52]	; (80007cc <NVIC_SetPriority+0x4c>)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	3b04      	subs	r3, #4
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007aa:	e009      	b.n	80007c0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	4908      	ldr	r1, [pc, #32]	; (80007d0 <NVIC_SetPriority+0x50>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00
 80007d0:	e000e100 	.word	0xe000e100

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	2201      	movs	r2, #1
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	1e5a      	subs	r2, r3, #1
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	401a      	ands	r2, r3
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081a:	2101      	movs	r1, #1
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	1e59      	subs	r1, r3, #1
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
         );
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000844:	d301      	bcc.n	800084a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2301      	movs	r3, #1
 8000848:	e00f      	b.n	800086a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <SysTick_Config+0x40>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000852:	210f      	movs	r1, #15
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f7ff ff92 	bl	8000780 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <SysTick_Config+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <SysTick_Config+0x40>)
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff4b 	bl	800071c <NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff60 	bl	8000764 <NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ff92 	bl	80007d4 <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff61 	bl	8000780 <NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffb0 	bl	8000834 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80008e0:	b480      	push	{r7}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80008f6:	e154      	b.n	8000ba2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	2101      	movs	r1, #1
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 8146 	beq.w	8000b9c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d003      	beq.n	8000920 <HAL_GPIO_Init+0x40>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b12      	cmp	r3, #18
 800091e:	d123      	bne.n	8000968 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	08da      	lsrs	r2, r3, #3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3208      	adds	r2, #8
 8000928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	f003 0307 	and.w	r3, r3, #7
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	220f      	movs	r2, #15
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	691a      	ldr	r2, [r3, #16]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4313      	orrs	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	08da      	lsrs	r2, r3, #3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3208      	adds	r2, #8
 8000962:	6939      	ldr	r1, [r7, #16]
 8000964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0203 	and.w	r2, r3, #3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4313      	orrs	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d00b      	beq.n	80009bc <HAL_GPIO_Init+0xdc>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d007      	beq.n	80009bc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009b0:	2b11      	cmp	r3, #17
 80009b2:	d003      	beq.n	80009bc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	2b12      	cmp	r3, #18
 80009ba:	d130      	bne.n	8000a1e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2203      	movs	r2, #3
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68da      	ldr	r2, [r3, #12]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80009f2:	2201      	movs	r2, #1
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	091b      	lsrs	r3, r3, #4
 8000a08:	f003 0201 	and.w	r2, r3, #1
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2203      	movs	r2, #3
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 80a0 	beq.w	8000b9c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5c:	4a57      	ldr	r2, [pc, #348]	; (8000bbc <HAL_GPIO_Init+0x2dc>)
 8000a5e:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <HAL_GPIO_Init+0x2dc>)
 8000a60:	6a1b      	ldr	r3, [r3, #32]
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6213      	str	r3, [r2, #32]
 8000a68:	4b54      	ldr	r3, [pc, #336]	; (8000bbc <HAL_GPIO_Init+0x2dc>)
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000a74:	4a52      	ldr	r2, [pc, #328]	; (8000bc0 <HAL_GPIO_Init+0x2e0>)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a4a      	ldr	r2, [pc, #296]	; (8000bc4 <HAL_GPIO_Init+0x2e4>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d019      	beq.n	8000ad4 <HAL_GPIO_Init+0x1f4>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a49      	ldr	r2, [pc, #292]	; (8000bc8 <HAL_GPIO_Init+0x2e8>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d013      	beq.n	8000ad0 <HAL_GPIO_Init+0x1f0>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a48      	ldr	r2, [pc, #288]	; (8000bcc <HAL_GPIO_Init+0x2ec>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d00d      	beq.n	8000acc <HAL_GPIO_Init+0x1ec>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a47      	ldr	r2, [pc, #284]	; (8000bd0 <HAL_GPIO_Init+0x2f0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d007      	beq.n	8000ac8 <HAL_GPIO_Init+0x1e8>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a46      	ldr	r2, [pc, #280]	; (8000bd4 <HAL_GPIO_Init+0x2f4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d101      	bne.n	8000ac4 <HAL_GPIO_Init+0x1e4>
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	e008      	b.n	8000ad6 <HAL_GPIO_Init+0x1f6>
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	e006      	b.n	8000ad6 <HAL_GPIO_Init+0x1f6>
 8000ac8:	2303      	movs	r3, #3
 8000aca:	e004      	b.n	8000ad6 <HAL_GPIO_Init+0x1f6>
 8000acc:	2302      	movs	r3, #2
 8000ace:	e002      	b.n	8000ad6 <HAL_GPIO_Init+0x1f6>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <HAL_GPIO_Init+0x1f6>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	f002 0203 	and.w	r2, r2, #3
 8000adc:	0092      	lsls	r2, r2, #2
 8000ade:	4093      	lsls	r3, r2
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ae6:	4936      	ldr	r1, [pc, #216]	; (8000bc0 <HAL_GPIO_Init+0x2e0>)
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	089b      	lsrs	r3, r3, #2
 8000aec:	3302      	adds	r3, #2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af4:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <HAL_GPIO_Init+0x2f8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b18:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <HAL_GPIO_Init+0x2f8>)
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <HAL_GPIO_Init+0x2f8>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b42:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <HAL_GPIO_Init+0x2f8>)
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <HAL_GPIO_Init+0x2f8>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <HAL_GPIO_Init+0x2f8>)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_GPIO_Init+0x2f8>)
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_GPIO_Init+0x2f8>)
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f47f aea3 	bne.w	80008f8 <HAL_GPIO_Init+0x18>
  } 
}
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40010000 	.word	0x40010000
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020c00 	.word	0x40020c00
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010400 	.word	0x40010400

08000bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]
 8000be8:	4613      	mov	r3, r2
 8000bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bec:	787b      	ldrb	r3, [r7, #1]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000bf8:	e003      	b.n	8000c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	041a      	lsls	r2, r3, #16
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	619a      	str	r2, [r3, #24]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <HAL_LCD_Init>:
  *         The LCD HighDrive can be enabled/disabled using related macros up to user.
  * @param  hlcd: LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  uint8_t counter = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
    
  /* Check the LCD handle allocation */
  if(hlcd == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_LCD_Init+0x1a>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e0a8      	b.n	8000d78 <HAL_LCD_Init+0x16c>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast)); 
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency)); 
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode)); 
  assert_param(IS_LCD_MUXSEGMENT(hlcd->Init.MuxSegment));
  
  if(hlcd->State == HAL_LCD_STATE_RESET)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d106      	bne.n	8000c40 <HAL_LCD_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f002 f8a4 	bl	8002d88 <HAL_LCD_MspInit>
  }
  
  hlcd->State = HAL_LCD_STATE_BUSY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2202      	movs	r2, #2
 8000c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	6812      	ldr	r2, [r2, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
  
  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e00a      	b.n	8000c74 <HAL_LCD_Init+0x68>
  {
    hlcd->Instance->RAM[counter] = 0;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	3304      	adds	r3, #4
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	3301      	adds	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b0f      	cmp	r3, #15
 8000c78:	d9f1      	bls.n	8000c5e <HAL_LCD_Init+0x52>
  }
  /* Enable the display request */
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	6892      	ldr	r2, [r2, #8]
 8000c84:	f042 0204 	orr.w	r2, r2, #4
 8000c88:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value 
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD[0] bit according to hlcd->Init.HighDrive value */
   MODIFY_REG(hlcd->Instance->FCR, \
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6859      	ldr	r1, [r3, #4]
 8000c94:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <HAL_LCD_Init+0x174>)
 8000c96:	400b      	ands	r3, r1
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	6848      	ldr	r0, [r1, #4]
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	6889      	ldr	r1, [r1, #8]
 8000ca0:	4308      	orrs	r0, r1
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000ca6:	4308      	orrs	r0, r1
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000cac:	4308      	orrs	r0, r1
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	69c9      	ldr	r1, [r1, #28]
 8000cb2:	4308      	orrs	r0, r1
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	6a09      	ldr	r1, [r1, #32]
 8000cb8:	4308      	orrs	r0, r1
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	6989      	ldr	r1, [r1, #24]
 8000cbe:	4308      	orrs	r0, r1
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000cc4:	4301      	orrs	r1, r0
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	6053      	str	r3, [r2, #4]
             hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register 
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  LCD_WaitForSynchro(hlcd);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f000 f8f4 	bl	8000eb8 <LCD_WaitForSynchro>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value 
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	f022 01fe 	bic.w	r1, r2, #254	; 0xfe
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68d0      	ldr	r0, [r2, #12]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	6912      	ldr	r2, [r2, #16]
 8000ce6:	4310      	orrs	r0, r2
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	6952      	ldr	r2, [r2, #20]
 8000cec:	4310      	orrs	r0, r2
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000cf2:	4302      	orrs	r2, r0
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
    (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
    (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));
  
  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	f042 0201 	orr.w	r2, r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000d08:	f7ff fa70 	bl	80001ec <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
      
  /* Wait Until the LCD is enabled */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000d0e:	e00c      	b.n	8000d2a <HAL_LCD_Init+0x11e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000d10:	f7ff fa6c 	bl	80001ec <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d1e:	d904      	bls.n	8000d2a <HAL_LCD_Init+0x11e>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;     
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2208      	movs	r2, #8
 8000d24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e026      	b.n	8000d78 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d1eb      	bne.n	8000d10 <HAL_LCD_Init+0x104>
    } 
  }
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000d38:	f7ff fa58 	bl	80001ec <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  
  /*!< Wait Until the LCD Booster is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000d3e:	e00c      	b.n	8000d5a <HAL_LCD_Init+0x14e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000d40:	f7ff fa54 	bl	80001ec <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d4e:	d904      	bls.n	8000d5a <HAL_LCD_Init+0x14e>
    {   
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2210      	movs	r2, #16
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e00e      	b.n	8000d78 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 0310 	and.w	r3, r3, #16
 8000d64:	2b10      	cmp	r3, #16
 8000d66:	d1eb      	bne.n	8000d40 <HAL_LCD_Init+0x134>
    } 
  }
 
  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	fc00000f 	.word	0xfc00000f

08000d84 <HAL_LCD_Write>:
  * @param  RAMRegisterMask: specifies the LCD RAM Register Data Mask.
  * @param  Data: specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0x00; 
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d005      	beq.n	8000dae <HAL_LCD_Write+0x2a>
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d144      	bne.n	8000e38 <HAL_LCD_Write+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));
    
    if(hlcd->State == HAL_LCD_STATE_READY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d12a      	bne.n	8000e10 <HAL_LCD_Write+0x8c>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d101      	bne.n	8000dc8 <HAL_LCD_Write+0x44>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e038      	b.n	8000e3a <HAL_LCD_Write+0xb6>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fa08 	bl	80001ec <HAL_GetTick>
 8000ddc:	6178      	str	r0, [r7, #20]
      
      /*!< Wait Until the LCD is ready */
      while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000dde:	e010      	b.n	8000e02 <HAL_LCD_Write+0x7e>
      {
        if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000de0:	f7ff fa04 	bl	80001ec <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dee:	d908      	bls.n	8000e02 <HAL_LCD_Write+0x7e>
        { 
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2202      	movs	r2, #2
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          
          return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e01b      	b.n	8000e3a <HAL_LCD_Write+0xb6>
      while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d0e7      	beq.n	8000de0 <HAL_LCD_Write+0x5c>
        } 
      }
    }
    
    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	401a      	ands	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e000      	b.n	8000e3a <HAL_LCD_Write+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
  }
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if 
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.    
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2208      	movs	r2, #8
 8000e54:	60da      	str	r2, [r3, #12]
  
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	6892      	ldr	r2, [r2, #8]
 8000e60:	f042 0204 	orr.w	r2, r2, #4
 8000e64:	609a      	str	r2, [r3, #8]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000e66:	f7ff f9c1 	bl	80001ec <HAL_GetTick>
 8000e6a:	60f8      	str	r0, [r7, #12]
  
  /*!< Wait Until the LCD display is done */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000e6c:	e010      	b.n	8000e90 <HAL_LCD_UpdateDisplayRequest+0x4e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000e6e:	f7ff f9bd 	bl	80001ec <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e7c:	d908      	bls.n	8000e90 <HAL_LCD_UpdateDisplayRequest+0x4e>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2204      	movs	r2, #4
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
      return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e00f      	b.n	8000eb0 <HAL_LCD_UpdateDisplayRequest+0x6e>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d1e7      	bne.n	8000e6e <HAL_LCD_UpdateDisplayRequest+0x2c>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <LCD_WaitForSynchro>:
  * @brief  Waits until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00; 
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000ec4:	f7ff f992 	bl	80001ec <HAL_GetTick>
 8000ec8:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000eca:	e00c      	b.n	8000ee6 <LCD_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000ecc:	f7ff f98e 	bl	80001ec <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eda:	d904      	bls.n	8000ee6 <LCD_WaitForSynchro+0x2e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e007      	b.n	8000ef6 <LCD_WaitForSynchro+0x3e>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0320 	and.w	r3, r3, #32
 8000ef0:	2b20      	cmp	r3, #32
 8000ef2:	d1eb      	bne.n	8000ecc <LCD_WaitForSynchro+0x14>
    }
  }

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0e6      	sub	sp, #408	; 0x198
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8123 	beq.w	8001166 <HAL_RCC_OscConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f20:	4bbc      	ldr	r3, [pc, #752]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d00c      	beq.n	8000f46 <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f2c:	4bb9      	ldr	r3, [pc, #740]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b0c      	cmp	r3, #12
 8000f36:	d146      	bne.n	8000fc6 <HAL_RCC_OscConfig+0xc6>
 8000f38:	4bb6      	ldr	r3, [pc, #728]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f44:	d13f      	bne.n	8000fc6 <HAL_RCC_OscConfig+0xc6>
 8000f46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000f52:	fa93 f3a3 	rbit	r3, r3
 8000f56:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  return(result);
 8000f5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5e:	fab3 f383 	clz	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	095b      	lsrs	r3, r3, #5
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <HAL_RCC_OscConfig+0x78>
 8000f72:	4ba8      	ldr	r3, [pc, #672]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	e001      	b.n	8000f7c <HAL_RCC_OscConfig+0x7c>
 8000f78:	4ba6      	ldr	r3, [pc, #664]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8000f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f80:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000f88:	fa92 f2a2 	rbit	r2, r2
 8000f8c:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
  return(result);
 8000f90:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8000f94:	fab2 f282 	clz	r2, r2
 8000f98:	b252      	sxtb	r2, r2
 8000f9a:	f042 0220 	orr.w	r2, r2, #32
 8000f9e:	b252      	sxtb	r2, r2
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	f002 021f 	and.w	r2, r2, #31
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 80d8 	beq.w	8001164 <HAL_RCC_OscConfig+0x264>
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f040 80d2 	bne.w	8001164 <HAL_RCC_OscConfig+0x264>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f000 bf10 	b.w	8001de6 <HAL_RCC_OscConfig+0xee6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d106      	bne.n	8000fde <HAL_RCC_OscConfig+0xde>
 8000fd0:	4a90      	ldr	r2, [pc, #576]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8000fd2:	4b90      	ldr	r3, [pc, #576]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	e02f      	b.n	800103e <HAL_RCC_OscConfig+0x13e>
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10c      	bne.n	8001002 <HAL_RCC_OscConfig+0x102>
 8000fe8:	4a8a      	ldr	r2, [pc, #552]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8000fea:	4b8a      	ldr	r3, [pc, #552]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4a87      	ldr	r2, [pc, #540]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8000ff6:	4b87      	ldr	r3, [pc, #540]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e01d      	b.n	800103e <HAL_RCC_OscConfig+0x13e>
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b05      	cmp	r3, #5
 800100a:	d10c      	bne.n	8001026 <HAL_RCC_OscConfig+0x126>
 800100c:	4a81      	ldr	r2, [pc, #516]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 800100e:	4b81      	ldr	r3, [pc, #516]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4a7e      	ldr	r2, [pc, #504]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 800101a:	4b7e      	ldr	r3, [pc, #504]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e00b      	b.n	800103e <HAL_RCC_OscConfig+0x13e>
 8001026:	4a7b      	ldr	r2, [pc, #492]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8001028:	4b7a      	ldr	r3, [pc, #488]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4a78      	ldr	r2, [pc, #480]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8001034:	4b77      	ldr	r3, [pc, #476]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d046      	beq.n	80010d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff f8d0 	bl	80001ec <HAL_GetTick>
 800104c:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001052:	f7ff f8cb 	bl	80001ec <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d902      	bls.n	8001068 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	f000 bebf 	b.w	8001de6 <HAL_RCC_OscConfig+0xee6>
 8001068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800106c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001070:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 800107c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	b2db      	uxtb	r3, r3
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b01      	cmp	r3, #1
 8001092:	d102      	bne.n	800109a <HAL_RCC_OscConfig+0x19a>
 8001094:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	e001      	b.n	800109e <HAL_RCC_OscConfig+0x19e>
 800109a:	4b5e      	ldr	r3, [pc, #376]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 800109c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010a2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010aa:	fa92 f2a2 	rbit	r2, r2
 80010ae:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
  return(result);
 80010b2:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80010b6:	fab2 f282 	clz	r2, r2
 80010ba:	b252      	sxtb	r2, r2
 80010bc:	f042 0220 	orr.w	r2, r2, #32
 80010c0:	b252      	sxtb	r2, r2
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	f002 021f 	and.w	r2, r2, #31
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f202 	lsl.w	r2, r1, r2
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0be      	beq.n	8001052 <HAL_RCC_OscConfig+0x152>
 80010d4:	e047      	b.n	8001166 <HAL_RCC_OscConfig+0x266>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff f889 	bl	80001ec <HAL_GetTick>
 80010da:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	e00a      	b.n	80010f6 <HAL_RCC_OscConfig+0x1f6>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff f884 	bl	80001ec <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b64      	cmp	r3, #100	; 0x64
 80010ee:	d902      	bls.n	80010f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	f000 be78 	b.w	8001de6 <HAL_RCC_OscConfig+0xee6>
 80010f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010fa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 800110a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	fab3 f383 	clz	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	095b      	lsrs	r3, r3, #5
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d102      	bne.n	8001128 <HAL_RCC_OscConfig+0x228>
 8001122:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	e001      	b.n	800112c <HAL_RCC_OscConfig+0x22c>
 8001128:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 800112a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001130:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001138:	fa92 f2a2 	rbit	r2, r2
 800113c:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
  return(result);
 8001140:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001144:	fab2 f282 	clz	r2, r2
 8001148:	b252      	sxtb	r2, r2
 800114a:	f042 0220 	orr.w	r2, r2, #32
 800114e:	b252      	sxtb	r2, r2
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	f002 021f 	and.w	r2, r2, #31
 8001156:	2101      	movs	r1, #1
 8001158:	fa01 f202 	lsl.w	r2, r1, r2
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1be      	bne.n	80010e0 <HAL_RCC_OscConfig+0x1e0>
 8001162:	e000      	b.n	8001166 <HAL_RCC_OscConfig+0x266>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 813e 	beq.w	80013f2 <HAL_RCC_OscConfig+0x4f2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b04      	cmp	r3, #4
 8001180:	d00b      	beq.n	800119a <HAL_RCC_OscConfig+0x29a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b0c      	cmp	r3, #12
 800118c:	d15f      	bne.n	800124e <HAL_RCC_OscConfig+0x34e>
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d159      	bne.n	800124e <HAL_RCC_OscConfig+0x34e>
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 80011ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b0:	fab3 f383 	clz	r3, r3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d102      	bne.n	80011ca <HAL_RCC_OscConfig+0x2ca>
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	e001      	b.n	80011ce <HAL_RCC_OscConfig+0x2ce>
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_RCC_OscConfig+0x314>)
 80011cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ce:	2202      	movs	r2, #2
 80011d0:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80011d8:	fa92 f2a2 	rbit	r2, r2
 80011dc:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
  return(result);
 80011e0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80011e4:	fab2 f282 	clz	r2, r2
 80011e8:	b252      	sxtb	r2, r2
 80011ea:	f042 0220 	orr.w	r2, r2, #32
 80011ee:	b252      	sxtb	r2, r2
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	f002 021f 	and.w	r2, r2, #31
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00a      	beq.n	8001218 <HAL_RCC_OscConfig+0x318>
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d005      	beq.n	8001218 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	f000 bdea 	b.w	8001de6 <HAL_RCC_OscConfig+0xee6>
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	48b9      	ldr	r0, [pc, #740]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 800121a:	4bb9      	ldr	r3, [pc, #740]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6919      	ldr	r1, [r3, #16]
 8001228:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800122c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 800123c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001240:	fab3 f383 	clz	r3, r3
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124c:	e0d1      	b.n	80013f2 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d073      	beq.n	8001340 <HAL_RCC_OscConfig+0x440>
 8001258:	2301      	movs	r3, #1
 800125a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001262:	fa93 f3a3 	rbit	r3, r3
 8001266:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 800126a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126e:	fab3 f383 	clz	r3, r3
 8001272:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001276:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	461a      	mov	r2, r3
 800127e:	2301      	movs	r3, #1
 8001280:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7fe ffb3 	bl	80001ec <HAL_GetTick>
 8001286:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128c:	f7fe ffae 	bl	80001ec <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d902      	bls.n	80012a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	f000 bda2 	b.w	8001de6 <HAL_RCC_OscConfig+0xee6>
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012ac:	fa93 f3a3 	rbit	r3, r3
 80012b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80012b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b8:	fab3 f383 	clz	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d102      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3d2>
 80012cc:	4b8c      	ldr	r3, [pc, #560]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	e001      	b.n	80012d6 <HAL_RCC_OscConfig+0x3d6>
 80012d2:	4b8b      	ldr	r3, [pc, #556]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	2202      	movs	r2, #2
 80012d8:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80012e0:	fa92 f2a2 	rbit	r2, r2
 80012e4:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
  return(result);
 80012e8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80012ec:	fab2 f282 	clz	r2, r2
 80012f0:	b252      	sxtb	r2, r2
 80012f2:	f042 0220 	orr.w	r2, r2, #32
 80012f6:	b252      	sxtb	r2, r2
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	f002 021f 	and.w	r2, r2, #31
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0c0      	beq.n	800128c <HAL_RCC_OscConfig+0x38c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130a:	487d      	ldr	r0, [pc, #500]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 800130c:	4b7c      	ldr	r3, [pc, #496]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6919      	ldr	r1, [r3, #16]
 800131a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800131e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 800132e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	6043      	str	r3, [r0, #4]
 800133e:	e058      	b.n	80013f2 <HAL_RCC_OscConfig+0x4f2>
 8001340:	2301      	movs	r3, #1
 8001342:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  return(result);
 8001352:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800135e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	461a      	mov	r2, r3
 8001366:	2300      	movs	r3, #0
 8001368:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7fe ff3f 	bl	80001ec <HAL_GetTick>
 800136e:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	e00a      	b.n	800138a <HAL_RCC_OscConfig+0x48a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001374:	f7fe ff3a 	bl	80001ec <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d902      	bls.n	800138a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	f000 bd2e 	b.w	8001de6 <HAL_RCC_OscConfig+0xee6>
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 800139c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a0:	fab3 f383 	clz	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d102      	bne.n	80013ba <HAL_RCC_OscConfig+0x4ba>
 80013b4:	4b52      	ldr	r3, [pc, #328]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	e001      	b.n	80013be <HAL_RCC_OscConfig+0x4be>
 80013ba:	4b51      	ldr	r3, [pc, #324]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	2202      	movs	r2, #2
 80013c0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013c8:	fa92 f2a2 	rbit	r2, r2
 80013cc:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
  return(result);
 80013d0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80013d4:	fab2 f282 	clz	r2, r2
 80013d8:	b252      	sxtb	r2, r2
 80013da:	f042 0220 	orr.w	r2, r2, #32
 80013de:	b252      	sxtb	r2, r2
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	f002 021f 	and.w	r2, r2, #31
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1c0      	bne.n	8001374 <HAL_RCC_OscConfig+0x474>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 81c5 	beq.w	800178c <HAL_RCC_OscConfig+0x88c>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 80de 	bne.w	80015cc <HAL_RCC_OscConfig+0x6cc>
 8001410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001414:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  return(result);
 8001424:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d102      	bne.n	8001442 <HAL_RCC_OscConfig+0x542>
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	e001      	b.n	8001446 <HAL_RCC_OscConfig+0x546>
 8001442:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 8001444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144a:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001452:	fa92 f2a2 	rbit	r2, r2
 8001456:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
  return(result);
 800145a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800145e:	fab2 f282 	clz	r2, r2
 8001462:	b252      	sxtb	r2, r2
 8001464:	f042 0220 	orr.w	r2, r2, #32
 8001468:	b252      	sxtb	r2, r2
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	f002 021f 	and.w	r2, r2, #31
 8001470:	2101      	movs	r1, #1
 8001472:	fa01 f202 	lsl.w	r2, r1, r2
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <HAL_RCC_OscConfig+0x58c>
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <HAL_RCC_OscConfig+0x58c>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	f000 bcad 	b.w	8001de6 <HAL_RCC_OscConfig+0xee6>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6a1a      	ldr	r2, [r3, #32]
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800149a:	429a      	cmp	r2, r3
 800149c:	d932      	bls.n	8001504 <HAL_RCC_OscConfig+0x604>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 ff03 	bl	80022b0 <RCC_SetFlashLatencyFromMSIRange>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	f000 bc98 	b.w	8001de6 <HAL_RCC_OscConfig+0xee6>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b6:	4912      	ldr	r1, [pc, #72]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ca:	480d      	ldr	r0, [pc, #52]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_RCC_OscConfig+0x600>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	69d9      	ldr	r1, [r3, #28]
 80014da:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80014de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  return(result);
 80014ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	6043      	str	r3, [r0, #4]
 80014fe:	e031      	b.n	8001564 <HAL_RCC_OscConfig+0x664>
 8001500:	40023800 	.word	0x40023800
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001504:	49b9      	ldr	r1, [pc, #740]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 8001506:	4bb9      	ldr	r3, [pc, #740]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001518:	48b4      	ldr	r0, [pc, #720]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 800151a:	4bb4      	ldr	r3, [pc, #720]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	69d9      	ldr	r1, [r3, #28]
 8001528:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800152c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001534:	fa93 f3a3 	rbit	r3, r3
 8001538:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  return(result);
 800153c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	6043      	str	r3, [r0, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 feac 	bl	80022b0 <RCC_SetFlashLatencyFromMSIRange>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <HAL_RCC_OscConfig+0x664>
          {
            return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	f000 bc41 	b.w	8001de6 <HAL_RCC_OscConfig+0xee6>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6a1a      	ldr	r2, [r3, #32]
 800156a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800156e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 800157e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	fa22 f303 	lsr.w	r3, r2, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001594:	4a95      	ldr	r2, [pc, #596]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 8001596:	6892      	ldr	r2, [r2, #8]
 8001598:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 800159c:	22f0      	movs	r2, #240	; 0xf0
 800159e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80015a6:	fa92 f2a2 	rbit	r2, r2
 80015aa:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
  return(result);
 80015ae:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80015b2:	fab2 f282 	clz	r2, r2
 80015b6:	fa21 f202 	lsr.w	r2, r1, r2
 80015ba:	498d      	ldr	r1, [pc, #564]	; (80017f0 <HAL_RCC_OscConfig+0x8f0>)
 80015bc:	5c8a      	ldrb	r2, [r1, r2]
 80015be:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015c0:	4a8c      	ldr	r2, [pc, #560]	; (80017f4 <HAL_RCC_OscConfig+0x8f4>)
 80015c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7fe fde7 	bl	8000198 <HAL_InitTick>
 80015ca:	e0df      	b.n	800178c <HAL_RCC_OscConfig+0x88c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d07f      	beq.n	80016d6 <HAL_RCC_OscConfig+0x7d6>
 80015d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 80015ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015ee:	fab3 f383 	clz	r3, r3
 80015f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015f6:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	461a      	mov	r2, r3
 80015fe:	2301      	movs	r3, #1
 8001600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7fe fdf3 	bl	80001ec <HAL_GetTick>
 8001606:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800160a:	e009      	b.n	8001620 <HAL_RCC_OscConfig+0x720>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800160c:	f7fe fdee 	bl	80001ec <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x720>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e3e2      	b.n	8001de6 <HAL_RCC_OscConfig+0xee6>
 8001620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800162c:	fa93 f3a3 	rbit	r3, r3
 8001630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 8001634:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d102      	bne.n	8001652 <HAL_RCC_OscConfig+0x752>
 800164c:	4b67      	ldr	r3, [pc, #412]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	e001      	b.n	8001656 <HAL_RCC_OscConfig+0x756>
 8001652:	4b66      	ldr	r3, [pc, #408]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 8001654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001662:	fa92 f2a2 	rbit	r2, r2
 8001666:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
  return(result);
 800166a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800166e:	fab2 f282 	clz	r2, r2
 8001672:	b252      	sxtb	r2, r2
 8001674:	f042 0220 	orr.w	r2, r2, #32
 8001678:	b252      	sxtb	r2, r2
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f002 021f 	and.w	r2, r2, #31
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0bf      	beq.n	800160c <HAL_RCC_OscConfig+0x70c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168c:	4957      	ldr	r1, [pc, #348]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 800168e:	4b57      	ldr	r3, [pc, #348]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a0:	4852      	ldr	r0, [pc, #328]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 80016a2:	4b52      	ldr	r3, [pc, #328]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	69d9      	ldr	r1, [r3, #28]
 80016b0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80016b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return(result);
 80016c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	6043      	str	r3, [r0, #4]
 80016d4:	e05a      	b.n	800178c <HAL_RCC_OscConfig+0x88c>
 80016d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 80016ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016f6:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	461a      	mov	r2, r3
 80016fe:	2300      	movs	r3, #0
 8001700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7fe fd73 	bl	80001ec <HAL_GetTick>
 8001706:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800170a:	e009      	b.n	8001720 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800170c:	f7fe fd6e 	bl	80001ec <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e362      	b.n	8001de6 <HAL_RCC_OscConfig+0xee6>
 8001720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800172c:	fa93 f3a3 	rbit	r3, r3
 8001730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  return(result);
 8001734:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001738:	fab3 f383 	clz	r3, r3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	095b      	lsrs	r3, r3, #5
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d102      	bne.n	8001752 <HAL_RCC_OscConfig+0x852>
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	e001      	b.n	8001756 <HAL_RCC_OscConfig+0x856>
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_RCC_OscConfig+0x8ec>)
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001762:	fa92 f2a2 	rbit	r2, r2
 8001766:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
  return(result);
 800176a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800176e:	fab2 f282 	clz	r2, r2
 8001772:	b252      	sxtb	r2, r2
 8001774:	f042 0220 	orr.w	r2, r2, #32
 8001778:	b252      	sxtb	r2, r2
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f002 021f 	and.w	r2, r2, #31
 8001780:	2101      	movs	r1, #1
 8001782:	fa01 f202 	lsl.w	r2, r1, r2
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1bf      	bne.n	800170c <HAL_RCC_OscConfig+0x80c>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80ae 	beq.w	80018f8 <HAL_RCC_OscConfig+0x9f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d055      	beq.n	8001852 <HAL_RCC_OscConfig+0x952>
 80017a6:	2301      	movs	r3, #1
 80017a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 80017b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_RCC_OscConfig+0x8f8>)
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	461a      	mov	r2, r3
 80017ca:	2301      	movs	r3, #1
 80017cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7fe fd0d 	bl	80001ec <HAL_GetTick>
 80017d2:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e011      	b.n	80017fc <HAL_RCC_OscConfig+0x8fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d8:	f7fe fd08 	bl	80001ec <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d909      	bls.n	80017fc <HAL_RCC_OscConfig+0x8fc>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e2fc      	b.n	8001de6 <HAL_RCC_OscConfig+0xee6>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	0800306c 	.word	0x0800306c
 80017f4:	20000000 	.word	0x20000000
 80017f8:	1091c1a0 	.word	0x1091c1a0
 80017fc:	2302      	movs	r3, #2
 80017fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800180e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001810:	4ba5      	ldr	r3, [pc, #660]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 8001812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001814:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001818:	2102      	movs	r1, #2
 800181a:	6019      	str	r1, [r3, #0]
 800181c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	fa93 f1a3 	rbit	r1, r3
 8001826:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800182a:	6019      	str	r1, [r3, #0]
  return(result);
 800182c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b25b      	sxtb	r3, r3
 8001838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800183c:	b25b      	sxtb	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0c3      	beq.n	80017d8 <HAL_RCC_OscConfig+0x8d8>
 8001850:	e052      	b.n	80018f8 <HAL_RCC_OscConfig+0x9f8>
 8001852:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001868:	601a      	str	r2, [r3, #0]
  return(result);
 800186a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800186e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	4b8d      	ldr	r3, [pc, #564]	; (8001aac <HAL_RCC_OscConfig+0xbac>)
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	461a      	mov	r2, r3
 800187e:	2300      	movs	r3, #0
 8001880:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7fe fcb3 	bl	80001ec <HAL_GetTick>
 8001886:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188a:	e009      	b.n	80018a0 <HAL_RCC_OscConfig+0x9a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188c:	f7fe fcae 	bl	80001ec <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x9a0>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e2a2      	b.n	8001de6 <HAL_RCC_OscConfig+0xee6>
 80018a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018a4:	2202      	movs	r2, #2
 80018a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80018ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018c0:	2102      	movs	r1, #2
 80018c2:	6019      	str	r1, [r3, #0]
 80018c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fa93 f1a3 	rbit	r1, r3
 80018ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018d2:	6019      	str	r1, [r3, #0]
  return(result);
 80018d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	2101      	movs	r1, #1
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1c9      	bne.n	800188c <HAL_RCC_OscConfig+0x98c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 810e 	beq.w	8001b24 <HAL_RCC_OscConfig+0xc24>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190e:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d112      	bne.n	8001940 <HAL_RCC_OscConfig+0xa40>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4a63      	ldr	r2, [pc, #396]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 800191c:	4b62      	ldr	r3, [pc, #392]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6253      	str	r3, [r2, #36]	; 0x24
 8001926:	4b60      	ldr	r3, [pc, #384]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800193a:	2301      	movs	r3, #1
 800193c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <HAL_RCC_OscConfig+0xbb0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d11a      	bne.n	8001982 <HAL_RCC_OscConfig+0xa82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194c:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_RCC_OscConfig+0xbb0>)
 800194e:	4b58      	ldr	r3, [pc, #352]	; (8001ab0 <HAL_RCC_OscConfig+0xbb0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001956:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001958:	f7fe fc48 	bl	80001ec <HAL_GetTick>
 800195c:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e009      	b.n	8001976 <HAL_RCC_OscConfig+0xa76>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7fe fc43 	bl	80001ec <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xa76>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e237      	b.n	8001de6 <HAL_RCC_OscConfig+0xee6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b4e      	ldr	r3, [pc, #312]	; (8001ab0 <HAL_RCC_OscConfig+0xbb0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0ef      	beq.n	8001962 <HAL_RCC_OscConfig+0xa62>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0xa9a>
 800198c:	4a46      	ldr	r2, [pc, #280]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 800198e:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 8001990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001996:	6353      	str	r3, [r2, #52]	; 0x34
 8001998:	e02f      	b.n	80019fa <HAL_RCC_OscConfig+0xafa>
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10c      	bne.n	80019be <HAL_RCC_OscConfig+0xabe>
 80019a4:	4a40      	ldr	r2, [pc, #256]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019a6:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ae:	6353      	str	r3, [r2, #52]	; 0x34
 80019b0:	4a3d      	ldr	r2, [pc, #244]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019ba:	6353      	str	r3, [r2, #52]	; 0x34
 80019bc:	e01d      	b.n	80019fa <HAL_RCC_OscConfig+0xafa>
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0xae2>
 80019c8:	4a37      	ldr	r2, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d2:	6353      	str	r3, [r2, #52]	; 0x34
 80019d4:	4a34      	ldr	r2, [pc, #208]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019d6:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019de:	6353      	str	r3, [r2, #52]	; 0x34
 80019e0:	e00b      	b.n	80019fa <HAL_RCC_OscConfig+0xafa>
 80019e2:	4a31      	ldr	r2, [pc, #196]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ec:	6353      	str	r3, [r2, #52]	; 0x34
 80019ee:	4a2e      	ldr	r2, [pc, #184]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019f8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d03f      	beq.n	8001a84 <HAL_RCC_OscConfig+0xb84>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7fe fbf2 	bl	80001ec <HAL_GetTick>
 8001a08:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0c:	e00b      	b.n	8001a26 <HAL_RCC_OscConfig+0xb26>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7fe fbed 	bl	80001ec <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xb26>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1df      	b.n	8001de6 <HAL_RCC_OscConfig+0xee6>
 8001a26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_RCC_OscConfig+0xba8>)
 8001a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a4c:	6019      	str	r1, [r3, #0]
 8001a4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f1a3 	rbit	r1, r3
 8001a58:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a5c:	6019      	str	r1, [r3, #0]
  return(result);
 8001a5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0c5      	beq.n	8001a0e <HAL_RCC_OscConfig+0xb0e>
 8001a82:	e045      	b.n	8001b10 <HAL_RCC_OscConfig+0xc10>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7fe fbb2 	bl	80001ec <HAL_GetTick>
 8001a88:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	e012      	b.n	8001ab4 <HAL_RCC_OscConfig+0xbb4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7fe fbad 	bl	80001ec <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d908      	bls.n	8001ab4 <HAL_RCC_OscConfig+0xbb4>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e19f      	b.n	8001de6 <HAL_RCC_OscConfig+0xee6>
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	1091c1a0 	.word	0x1091c1a0
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001acc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ace:	4bb2      	ldr	r3, [pc, #712]	; (8001d98 <HAL_RCC_OscConfig+0xe98>)
 8001ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ada:	6019      	str	r1, [r3, #0]
 8001adc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	fa93 f1a3 	rbit	r1, r3
 8001ae6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aea:	6019      	str	r1, [r3, #0]
  return(result);
 8001aec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1be      	bne.n	8001a8e <HAL_RCC_OscConfig+0xb8e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b10:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d105      	bne.n	8001b24 <HAL_RCC_OscConfig+0xc24>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b18:	4a9f      	ldr	r2, [pc, #636]	; (8001d98 <HAL_RCC_OscConfig+0xe98>)
 8001b1a:	4b9f      	ldr	r3, [pc, #636]	; (8001d98 <HAL_RCC_OscConfig+0xe98>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b22:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 815a 	beq.w	8001de4 <HAL_RCC_OscConfig+0xee4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b30:	4b99      	ldr	r3, [pc, #612]	; (8001d98 <HAL_RCC_OscConfig+0xe98>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	f000 8151 	beq.w	8001de0 <HAL_RCC_OscConfig+0xee0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	f040 80e1 	bne.w	8001d0c <HAL_RCC_OscConfig+0xe0c>
 8001b4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b62:	601a      	str	r2, [r3, #0]
  return(result);
 8001b64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b68:	681b      	ldr	r3, [r3, #0]
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b72:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe fb35 	bl	80001ec <HAL_GetTick>
 8001b82:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b86:	e009      	b.n	8001b9c <HAL_RCC_OscConfig+0xc9c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7fe fb30 	bl	80001ec <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0xc9c>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e124      	b.n	8001de6 <HAL_RCC_OscConfig+0xee6>
 8001b9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fa93 f2a3 	rbit	r2, r3
 8001bb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bb4:	601a      	str	r2, [r3, #0]
  return(result);
 8001bb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d102      	bne.n	8001bd6 <HAL_RCC_OscConfig+0xcd6>
 8001bd0:	4b71      	ldr	r3, [pc, #452]	; (8001d98 <HAL_RCC_OscConfig+0xe98>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	e001      	b.n	8001bda <HAL_RCC_OscConfig+0xcda>
 8001bd6:	4b70      	ldr	r3, [pc, #448]	; (8001d98 <HAL_RCC_OscConfig+0xe98>)
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001bde:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be2:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	fa92 f1a2 	rbit	r1, r2
 8001bee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001bf2:	6011      	str	r1, [r2, #0]
  return(result);
 8001bf4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	fab2 f282 	clz	r2, r2
 8001bfe:	b252      	sxtb	r2, r2
 8001c00:	f042 0220 	orr.w	r2, r2, #32
 8001c04:	b252      	sxtb	r2, r2
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f002 021f 	and.w	r2, r2, #31
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1b7      	bne.n	8001b88 <HAL_RCC_OscConfig+0xc88>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c18:	485f      	ldr	r0, [pc, #380]	; (8001d98 <HAL_RCC_OscConfig+0xe98>)
 8001c1a:	4b5f      	ldr	r3, [pc, #380]	; (8001d98 <HAL_RCC_OscConfig+0xe98>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	4319      	orrs	r1, r3
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	430b      	orrs	r3, r1
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	6083      	str	r3, [r0, #8]
 8001c3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	fa93 f2a3 	rbit	r2, r3
 8001c50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c54:	601a      	str	r2, [r3, #0]
  return(result);
 8001c56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c5a:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c64:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7fe fabc 	bl	80001ec <HAL_GetTick>
 8001c74:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_OscConfig+0xd8e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7fe fab7 	bl	80001ec <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xd8e>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0ab      	b.n	8001de6 <HAL_RCC_OscConfig+0xee6>
 8001c8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	fa93 f2a3 	rbit	r2, r3
 8001ca2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ca6:	601a      	str	r2, [r3, #0]
  return(result);
 8001ca8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xdc8>
 8001cc2:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <HAL_RCC_OscConfig+0xe98>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	e001      	b.n	8001ccc <HAL_RCC_OscConfig+0xdcc>
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <HAL_RCC_OscConfig+0xe98>)
 8001cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ccc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001cd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cd4:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	fa92 f1a2 	rbit	r1, r2
 8001ce0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ce4:	6011      	str	r1, [r2, #0]
  return(result);
 8001ce6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	fab2 f282 	clz	r2, r2
 8001cf0:	b252      	sxtb	r2, r2
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	b252      	sxtb	r2, r2
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	f002 021f 	and.w	r2, r2, #31
 8001cfe:	2101      	movs	r1, #1
 8001d00:	fa01 f202 	lsl.w	r2, r1, r2
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0b7      	beq.n	8001c7a <HAL_RCC_OscConfig+0xd7a>
 8001d0a:	e06b      	b.n	8001de4 <HAL_RCC_OscConfig+0xee4>
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	601a      	str	r2, [r3, #0]
  return(result);
 8001d26:	f107 0320 	add.w	r3, r7, #32
 8001d2a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d34:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7fe fa54 	bl	80001ec <HAL_GetTick>
 8001d44:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d48:	e009      	b.n	8001d5e <HAL_RCC_OscConfig+0xe5e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7fe fa4f 	bl	80001ec <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xe5e>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e043      	b.n	8001de6 <HAL_RCC_OscConfig+0xee6>
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	fa93 f2a3 	rbit	r2, r3
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	601a      	str	r2, [r3, #0]
  return(result);
 8001d78:	f107 0318 	add.w	r3, r7, #24
 8001d7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d104      	bne.n	8001d9c <HAL_RCC_OscConfig+0xe9c>
 8001d92:	4b01      	ldr	r3, [pc, #4]	; (8001d98 <HAL_RCC_OscConfig+0xe98>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	e003      	b.n	8001da0 <HAL_RCC_OscConfig+0xea0>
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_RCC_OscConfig+0xef0>)
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da0:	f107 0214 	add.w	r2, r7, #20
 8001da4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001da8:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f107 0214 	add.w	r2, r7, #20
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	fa92 f1a2 	rbit	r1, r2
 8001db4:	f107 0210 	add.w	r2, r7, #16
 8001db8:	6011      	str	r1, [r2, #0]
  return(result);
 8001dba:	f107 0210 	add.w	r2, r7, #16
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b252      	sxtb	r2, r2
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	b252      	sxtb	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f002 021f 	and.w	r2, r2, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1b5      	bne.n	8001d4a <HAL_RCC_OscConfig+0xe4a>
 8001dde:	e001      	b.n	8001de4 <HAL_RCC_OscConfig+0xee4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0xee6>
    }
  }
  
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b096      	sub	sp, #88	; 0x58
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	657b      	str	r3, [r7, #84]	; 0x54
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e02:	4ba9      	ldr	r3, [pc, #676]	; (80020a8 <HAL_RCC_ClockConfig+0x2b4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0201 	and.w	r2, r3, #1
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d219      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x50>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <HAL_RCC_ClockConfig+0x2e>
 8001e16:	4aa4      	ldr	r2, [pc, #656]	; (80020a8 <HAL_RCC_ClockConfig+0x2b4>)
 8001e18:	4ba3      	ldr	r3, [pc, #652]	; (80020a8 <HAL_RCC_ClockConfig+0x2b4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	49a1      	ldr	r1, [pc, #644]	; (80020a8 <HAL_RCC_ClockConfig+0x2b4>)
 8001e24:	4ba0      	ldr	r3, [pc, #640]	; (80020a8 <HAL_RCC_ClockConfig+0x2b4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 0201 	bic.w	r2, r3, #1
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e32:	4b9d      	ldr	r3, [pc, #628]	; (80020a8 <HAL_RCC_ClockConfig+0x2b4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0201 	and.w	r2, r3, #1
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x50>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e1a2      	b.n	800218a <HAL_RCC_ClockConfig+0x396>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e50:	4996      	ldr	r1, [pc, #600]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8001e52:	4b96      	ldr	r3, [pc, #600]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8131 	beq.w	80020d2 <HAL_RCC_ClockConfig+0x2de>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d130      	bne.n	8001eda <HAL_RCC_ClockConfig+0xe6>
 8001e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d102      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xae>
 8001e9c:	4b83      	ldr	r3, [pc, #524]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	e001      	b.n	8001ea6 <HAL_RCC_ClockConfig+0xb2>
 8001ea2:	4b82      	ldr	r3, [pc, #520]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eaa:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001eae:	fa92 f2a2 	rbit	r2, r2
 8001eb2:	647a      	str	r2, [r7, #68]	; 0x44
  return(result);
 8001eb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b252      	sxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b252      	sxtb	r2, r2
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f002 021f 	and.w	r2, r2, #31
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f040 8098 	bne.w	8002006 <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e157      	b.n	800218a <HAL_RCC_ClockConfig+0x396>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d12f      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x14e>
 8001ee2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x118>
 8001f06:	4b69      	ldr	r3, [pc, #420]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	e001      	b.n	8001f10 <HAL_RCC_ClockConfig+0x11c>
 8001f0c:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8001f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f14:	63ba      	str	r2, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f18:	fa92 f2a2 	rbit	r2, r2
 8001f1c:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f20:	fab2 f282 	clz	r2, r2
 8001f24:	b252      	sxtb	r2, r2
 8001f26:	f042 0220 	orr.w	r2, r2, #32
 8001f2a:	b252      	sxtb	r2, r2
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	f002 021f 	and.w	r2, r2, #31
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d163      	bne.n	8002006 <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e123      	b.n	800218a <HAL_RCC_ClockConfig+0x396>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d12d      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1b2>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d102      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x17e>
 8001f6c:	4b4f      	ldr	r3, [pc, #316]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	e001      	b.n	8001f76 <HAL_RCC_ClockConfig+0x182>
 8001f72:	4b4e      	ldr	r3, [pc, #312]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f76:	2202      	movs	r2, #2
 8001f78:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f7c:	fa92 f2a2 	rbit	r2, r2
 8001f80:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8001f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f84:	fab2 f282 	clz	r2, r2
 8001f88:	b252      	sxtb	r2, r2
 8001f8a:	f042 0220 	orr.w	r2, r2, #32
 8001f8e:	b252      	sxtb	r2, r2
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f002 021f 	and.w	r2, r2, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d131      	bne.n	8002006 <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0f1      	b.n	800218a <HAL_RCC_ClockConfig+0x396>
 8001fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	61fb      	str	r3, [r7, #28]
  return(result);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1dc>
 8001fca:	4b38      	ldr	r3, [pc, #224]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e001      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e0>
 8001fd0:	4b36      	ldr	r3, [pc, #216]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8001fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	fa92 f2a2 	rbit	r2, r2
 8001fe0:	617a      	str	r2, [r7, #20]
  return(result);
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	fab2 f282 	clz	r2, r2
 8001fe8:	b252      	sxtb	r2, r2
 8001fea:	f042 0220 	orr.w	r2, r2, #32
 8001fee:	b252      	sxtb	r2, r2
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f002 021f 	and.w	r2, r2, #31
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0c1      	b.n	800218a <HAL_RCC_ClockConfig+0x396>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4929      	ldr	r1, [pc, #164]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 0203 	bic.w	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7fe f8e8 	bl	80001ec <HAL_GetTick>
 800201c:	6578      	str	r0, [r7, #84]	; 0x54
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d112      	bne.n	800204c <HAL_RCC_ClockConfig+0x258>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002026:	e00a      	b.n	800203e <HAL_RCC_ClockConfig+0x24a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7fe f8e0 	bl	80001ec <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x24a>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0a5      	b.n	800218a <HAL_RCC_ClockConfig+0x396>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800203e:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b08      	cmp	r3, #8
 8002048:	d1ee      	bne.n	8002028 <HAL_RCC_ClockConfig+0x234>
 800204a:	e042      	b.n	80020d2 <HAL_RCC_ClockConfig+0x2de>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d112      	bne.n	800207a <HAL_RCC_ClockConfig+0x286>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002054:	e00a      	b.n	800206c <HAL_RCC_ClockConfig+0x278>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002056:	f7fe f8c9 	bl	80001ec <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f241 3288 	movw	r2, #5000	; 0x1388
 8002064:	4293      	cmp	r3, r2
 8002066:	d901      	bls.n	800206c <HAL_RCC_ClockConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e08e      	b.n	800218a <HAL_RCC_ClockConfig+0x396>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b0c      	cmp	r3, #12
 8002076:	d1ee      	bne.n	8002056 <HAL_RCC_ClockConfig+0x262>
 8002078:	e02b      	b.n	80020d2 <HAL_RCC_ClockConfig+0x2de>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d121      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002082:	e00a      	b.n	800209a <HAL_RCC_ClockConfig+0x2a6>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002084:	f7fe f8b2 	bl	80001ec <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_ClockConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e077      	b.n	800218a <HAL_RCC_ClockConfig+0x396>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <HAL_RCC_ClockConfig+0x2b8>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d1ee      	bne.n	8002084 <HAL_RCC_ClockConfig+0x290>
 80020a6:	e014      	b.n	80020d2 <HAL_RCC_ClockConfig+0x2de>
 80020a8:	40023c00 	.word	0x40023c00
 80020ac:	40023800 	.word	0x40023800
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7fe f89c 	bl	80001ec <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e061      	b.n	800218a <HAL_RCC_ClockConfig+0x396>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80020c6:	4b33      	ldr	r3, [pc, #204]	; (8002194 <HAL_RCC_ClockConfig+0x3a0>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ee      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x2bc>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80020d2:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_RCC_ClockConfig+0x3a4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d919      	bls.n	8002114 <HAL_RCC_ClockConfig+0x320>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d105      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x2fe>
 80020e6:	4a2c      	ldr	r2, [pc, #176]	; (8002198 <HAL_RCC_ClockConfig+0x3a4>)
 80020e8:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_RCC_ClockConfig+0x3a4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4929      	ldr	r1, [pc, #164]	; (8002198 <HAL_RCC_ClockConfig+0x3a4>)
 80020f4:	4b28      	ldr	r3, [pc, #160]	; (8002198 <HAL_RCC_ClockConfig+0x3a4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 0201 	bic.w	r2, r3, #1
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_RCC_ClockConfig+0x3a4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0201 	and.w	r2, r3, #1
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x320>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e03a      	b.n	800218a <HAL_RCC_ClockConfig+0x396>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCC_ClockConfig+0x33e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002120:	491c      	ldr	r1, [pc, #112]	; (8002194 <HAL_RCC_ClockConfig+0x3a0>)
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <HAL_RCC_ClockConfig+0x3a0>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_RCC_ClockConfig+0x35e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800213e:	4915      	ldr	r1, [pc, #84]	; (8002194 <HAL_RCC_ClockConfig+0x3a0>)
 8002140:	4b14      	ldr	r3, [pc, #80]	; (8002194 <HAL_RCC_ClockConfig+0x3a0>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002152:	f000 f827 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8002156:	4601      	mov	r1, r0
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_RCC_ClockConfig+0x3a0>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002160:	23f0      	movs	r3, #240	; 0xf0
 8002162:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	60fb      	str	r3, [r7, #12]
  return(result);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x3a8>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	fa21 f303 	lsr.w	r3, r1, r3
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_RCC_ClockConfig+0x3ac>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002182:	2000      	movs	r0, #0
 8002184:	f7fe f808 	bl	8000198 <HAL_InitTick>
  
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3758      	adds	r7, #88	; 0x58
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	40023c00 	.word	0x40023c00
 800219c:	0800306c 	.word	0x0800306c
 80021a0:	20000000 	.word	0x20000000

080021a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b08d      	sub	sp, #52	; 0x34
 80021a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, pllm = 0U, plld = 0U, pllvco = 0U, msiclkrange = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
  
  tmpreg = RCC->CFGR;
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d006      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x3c>
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d007      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x42>
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d142      	bne.n	8002260 <HAL_RCC_GetSysClockFreq+0xbc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021da:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80021de:	e058      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e0:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80021e4:	e055      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ec:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80021f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	4a29      	ldr	r2, [pc, #164]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	623b      	str	r3, [r7, #32]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002210:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8002214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	613b      	str	r3, [r7, #16]
  return(result);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
 8002228:	3301      	adds	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800222c:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800223c:	fb02 f203 	mul.w	r2, r2, r3
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002248:	e007      	b.n	800225a <HAL_RCC_GetSysClockFreq+0xb6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	4a15      	ldr	r2, [pc, #84]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x100>)
 800224e:	fb02 f203 	mul.w	r2, r2, r3
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      sysclockfreq = pllvco;
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800225e:	e018      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8002268:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800226c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	603b      	str	r3, [r7, #0]
  return(result);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	61bb      	str	r3, [r7, #24]
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	3301      	adds	r3, #1
 8002286:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002294:	4618      	mov	r0, r3
 8002296:	3734      	adds	r7, #52	; 0x34
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	00f42400 	.word	0x00f42400
 80022a8:	007a1200 	.word	0x007a1200
 80022ac:	08003060 	.word	0x08003060

080022b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d12c      	bne.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e016      	b.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x62>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e4:	4a20      	ldr	r2, [pc, #128]	; (8002368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ee:	6253      	str	r3, [r2, #36]	; 0x24
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002304:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002306:	4a18      	ldr	r2, [pc, #96]	; (8002368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002310:	6253      	str	r3, [r2, #36]	; 0x24
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002318:	d105      	bne.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0x76>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002320:	d101      	bne.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002322:	2301      	movs	r3, #1
 8002324:	613b      	str	r3, [r7, #16]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0x88>
 800232c:	4a10      	ldr	r2, [pc, #64]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	490d      	ldr	r1, [pc, #52]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0201 	bic.w	r2, r3, #1
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0201 	and.w	r2, r3, #1
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	429a      	cmp	r2, r3
 8002354:	d001      	beq.n	800235a <RCC_SetFlashLatencyFromMSIRange+0xaa>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0xac>
  }
  
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40007000 	.word	0x40007000
 8002370:	40023c00 	.word	0x40023c00

08002374 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08e      	sub	sp, #56	; 0x38
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t temp_reg = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x2a>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80fe 	beq.w	800259a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a4:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10e      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b0:	4a7c      	ldr	r2, [pc, #496]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023b2:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ba:	6253      	str	r3, [r2, #36]	; 0x24
 80023bc:	4b79      	ldr	r3, [pc, #484]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d118      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023da:	4a73      	ldr	r2, [pc, #460]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80023dc:	4b72      	ldr	r3, [pc, #456]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e6:	f7fd ff01 	bl	80001ec <HAL_GetTick>
 80023ea:	6338      	str	r0, [r7, #48]	; 0x30

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	e008      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ee:	f7fd fefd 	bl	80001ec <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b64      	cmp	r3, #100	; 0x64
 80023fa:	d901      	bls.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e0cd      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x228>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	4b69      	ldr	r3, [pc, #420]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800240c:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	429a      	cmp	r2, r3
 8002422:	d106      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0xbe>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	429a      	cmp	r2, r3
 8002430:	d00e      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xdc>
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800243a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800243e:	d107      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002440:	4b58      	ldr	r3, [pc, #352]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 800244c:	2301      	movs	r3, #1
 800244e:	e0a5      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x228>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002450:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d077      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246a:	429a      	cmp	r2, r3
 800246c:	d005      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x106>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x120>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	429a      	cmp	r2, r3
 8002486:	d063      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d05d      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002494:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80024a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80024ac:	69fb      	ldr	r3, [r7, #28]
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	461a      	mov	r2, r3
 80024bc:	2301      	movs	r3, #1
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b35      	ldr	r3, [pc, #212]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	461a      	mov	r2, r3
 80024de:	2300      	movs	r3, #0
 80024e0:	6013      	str	r3, [r2, #0]
      
      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80024e2:	4a30      	ldr	r2, [pc, #192]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	6353      	str	r3, [r2, #52]	; 0x34
      
       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80024e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d02e      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7fd fe7b 	bl	80001ec <HAL_GetTick>
 80024f6:	6338      	str	r0, [r7, #48]	; 0x30
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fd fe77 	bl	80001ec <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e045      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	617b      	str	r3, [r7, #20]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b25b      	sxtb	r3, r3
 8002538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800253c:	b25b      	sxtb	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2101      	movs	r1, #1
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0d4      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x186>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002558:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800255c:	d10a      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800255e:	4911      	ldr	r1, [pc, #68]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]
 8002574:	490b      	ldr	r1, [pc, #44]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002582:	4313      	orrs	r3, r2
 8002584:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002586:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }
  
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3738      	adds	r7, #56	; 0x38
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40007000 	.word	0x40007000
 80025ac:	1091c1a0 	.word	0x1091c1a0

080025b0 <HAL_RTC_Init>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e06d      	b.n	800269e <HAL_RTC_Init+0xee>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7f5b      	ldrb	r3, [r3, #29]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fc5a 	bl	8002e8c <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	22ca      	movs	r2, #202	; 0xca
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2253      	movs	r2, #83	; 0x53
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f859 	bl	80026a6 <RTC_EnterInitMode>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	22ff      	movs	r2, #255	; 0xff
 8002600:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2204      	movs	r2, #4
 8002606:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e048      	b.n	800269e <HAL_RTC_Init+0xee>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800261a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800261e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	6891      	ldr	r1, [r2, #8]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6850      	ldr	r0, [r2, #4]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6912      	ldr	r2, [r2, #16]
 8002632:	4310      	orrs	r0, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6952      	ldr	r2, [r2, #20]
 8002638:	4302      	orrs	r2, r0
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	6911      	ldr	r1, [r2, #16]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6892      	ldr	r2, [r2, #8]
 8002656:	0412      	lsls	r2, r2, #16
 8002658:	430a      	orrs	r2, r1
 800265a:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	68d2      	ldr	r2, [r2, #12]
 8002666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266a:	60da      	str	r2, [r3, #12]
    
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002676:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6992      	ldr	r2, [r2, #24]
 800268a:	430a      	orrs	r2, r1
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	22ff      	movs	r2, #255	; 0xff
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 800269c:	2300      	movs	r3, #0
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d119      	bne.n	80026f4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	60da      	str	r2, [r3, #12]
    
    tickstart = HAL_GetTick();
 80026ca:	f7fd fd8f 	bl	80001ec <HAL_GetTick>
 80026ce:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80026d0:	e009      	b.n	80026e6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80026d2:	f7fd fd8b 	bl	80001ec <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026e0:	d901      	bls.n	80026e6 <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e007      	b.n	80026f6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ee      	beq.n	80026d2 <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <LCD_WriteChar>:
		{0x4, 0x6},
		{0xf, 0xf},
		{0xe, 0xf}
};

void LCD_WriteChar(uint8_t pos, char c){
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	460a      	mov	r2, r1
 800270a:	71fb      	strb	r3, [r7, #7]
 800270c:	4613      	mov	r3, r2
 800270e:	71bb      	strb	r3, [r7, #6]

	uint8_t ram0, ram2;

	if(pos < 1 || pos > 6){
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80f6 	beq.w	8002904 <LCD_WriteChar+0x204>
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	2b06      	cmp	r3, #6
 800271c:	f200 80f2 	bhi.w	8002904 <LCD_WriteChar+0x204>
		return;
	}
	if( c < '0' || c > '9'){
 8002720:	79bb      	ldrb	r3, [r7, #6]
 8002722:	2b2f      	cmp	r3, #47	; 0x2f
 8002724:	f240 80f0 	bls.w	8002908 <LCD_WriteChar+0x208>
 8002728:	79bb      	ldrb	r3, [r7, #6]
 800272a:	2b39      	cmp	r3, #57	; 0x39
 800272c:	f200 80ec 	bhi.w	8002908 <LCD_WriteChar+0x208>
		return;
	}

	ram0 = ramPattern[c -'0'][0];
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	3b30      	subs	r3, #48	; 0x30
 8002734:	4a76      	ldr	r2, [pc, #472]	; (8002910 <LCD_WriteChar+0x210>)
 8002736:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800273a:	73fb      	strb	r3, [r7, #15]
	ram2 = ramPattern[c - '0'][1];
 800273c:	79bb      	ldrb	r3, [r7, #6]
 800273e:	3b30      	subs	r3, #48	; 0x30
 8002740:	4a73      	ldr	r2, [pc, #460]	; (8002910 <LCD_WriteChar+0x210>)
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	73bb      	strb	r3, [r7, #14]

	switch (pos){
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	3b01      	subs	r3, #1
 800274e:	2b05      	cmp	r3, #5
 8002750:	f200 80d4 	bhi.w	80028fc <LCD_WriteChar+0x1fc>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <LCD_WriteChar+0x5c>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	08002775 	.word	0x08002775
 8002760:	080027ab 	.word	0x080027ab
 8002764:	080027f9 	.word	0x080027f9
 8002768:	08002837 	.word	0x08002837
 800276c:	08002871 	.word	0x08002871
 8002770:	080028af 	.word	0x080028af
	case 1:
		HAL_LCD_Write(&hlcd, 0, ~0x30000003, (ram0 & 0x3) | ((ram0 & 0xc) << 26));
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	f003 0203 	and.w	r2, r3, #3
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	069b      	lsls	r3, r3, #26
 800277e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002782:	4313      	orrs	r3, r2
 8002784:	4a63      	ldr	r2, [pc, #396]	; (8002914 <LCD_WriteChar+0x214>)
 8002786:	2100      	movs	r1, #0
 8002788:	4863      	ldr	r0, [pc, #396]	; (8002918 <LCD_WriteChar+0x218>)
 800278a:	f7fe fafb 	bl	8000d84 <HAL_LCD_Write>
		HAL_LCD_Write(&hlcd, 2, ~0x30000003, (ram2 & 0x3) | ((ram2 & 0xc) << 26));
 800278e:	7bbb      	ldrb	r3, [r7, #14]
 8002790:	f003 0203 	and.w	r2, r3, #3
 8002794:	7bbb      	ldrb	r3, [r7, #14]
 8002796:	069b      	lsls	r3, r3, #26
 8002798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800279c:	4313      	orrs	r3, r2
 800279e:	4a5d      	ldr	r2, [pc, #372]	; (8002914 <LCD_WriteChar+0x214>)
 80027a0:	2102      	movs	r1, #2
 80027a2:	485d      	ldr	r0, [pc, #372]	; (8002918 <LCD_WriteChar+0x218>)
 80027a4:	f7fe faee 	bl	8000d84 <HAL_LCD_Write>
		break;
 80027a8:	e0a8      	b.n	80028fc <LCD_WriteChar+0x1fc>
	case 2:
		HAL_LCD_Write(&hlcd, 0, ~0x0c000084, ((ram0 & 0x1) << 2 ) |((ram0 & 2) << 6)| ((ram0 & 0xc) << 24));
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	f003 0204 	and.w	r2, r3, #4
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	019b      	lsls	r3, r3, #6
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	431a      	orrs	r2, r3
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	061b      	lsls	r3, r3, #24
 80027c0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80027c4:	4313      	orrs	r3, r2
 80027c6:	4a55      	ldr	r2, [pc, #340]	; (800291c <LCD_WriteChar+0x21c>)
 80027c8:	2100      	movs	r1, #0
 80027ca:	4853      	ldr	r0, [pc, #332]	; (8002918 <LCD_WriteChar+0x218>)
 80027cc:	f7fe fada 	bl	8000d84 <HAL_LCD_Write>
		HAL_LCD_Write(&hlcd, 2, ~0x0c000084, ((ram2 & 0x1) << 2 ) |((ram2 & 2) << 6)| ((ram2 & 0xc) << 24));
 80027d0:	7bbb      	ldrb	r3, [r7, #14]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	f003 0204 	and.w	r2, r3, #4
 80027d8:	7bbb      	ldrb	r3, [r7, #14]
 80027da:	019b      	lsls	r3, r3, #6
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	431a      	orrs	r2, r3
 80027e2:	7bbb      	ldrb	r3, [r7, #14]
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80027ea:	4313      	orrs	r3, r2
 80027ec:	4a4b      	ldr	r2, [pc, #300]	; (800291c <LCD_WriteChar+0x21c>)
 80027ee:	2102      	movs	r1, #2
 80027f0:	4849      	ldr	r0, [pc, #292]	; (8002918 <LCD_WriteChar+0x218>)
 80027f2:	f7fe fac7 	bl	8000d84 <HAL_LCD_Write>
		break;
 80027f6:	e081      	b.n	80028fc <LCD_WriteChar+0x1fc>
	case 3:
		HAL_LCD_Write(&hlcd, 0, ~0x03000300, ((ram0 & 0x3) << 8 ) | ((ram0 & 0xc) << 22));
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	059b      	lsls	r3, r3, #22
 8002804:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8002808:	4313      	orrs	r3, r2
 800280a:	f06f 2203 	mvn.w	r2, #50332416	; 0x3000300
 800280e:	2100      	movs	r1, #0
 8002810:	4841      	ldr	r0, [pc, #260]	; (8002918 <LCD_WriteChar+0x218>)
 8002812:	f7fe fab7 	bl	8000d84 <HAL_LCD_Write>
		HAL_LCD_Write(&hlcd, 2, ~0x03000300, ((ram2 & 0x3) << 8 ) | ((ram2 & 0xc) << 22));
 8002816:	7bbb      	ldrb	r3, [r7, #14]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800281e:	7bbb      	ldrb	r3, [r7, #14]
 8002820:	059b      	lsls	r3, r3, #22
 8002822:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8002826:	4313      	orrs	r3, r2
 8002828:	f06f 2203 	mvn.w	r2, #50332416	; 0x3000300
 800282c:	2102      	movs	r1, #2
 800282e:	483a      	ldr	r0, [pc, #232]	; (8002918 <LCD_WriteChar+0x218>)
 8002830:	f7fe faa8 	bl	8000d84 <HAL_LCD_Write>
		break;
 8002834:	e062      	b.n	80028fc <LCD_WriteChar+0x1fc>
	case 4:
		HAL_LCD_Write(&hlcd, 0, ~0x00300c00, ((ram0 & 0x3) << 10 ) | ((ram0 & 0xc) << 18));
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	029b      	lsls	r3, r3, #10
 800283a:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	049b      	lsls	r3, r3, #18
 8002842:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002846:	4313      	orrs	r3, r2
 8002848:	4a35      	ldr	r2, [pc, #212]	; (8002920 <LCD_WriteChar+0x220>)
 800284a:	2100      	movs	r1, #0
 800284c:	4832      	ldr	r0, [pc, #200]	; (8002918 <LCD_WriteChar+0x218>)
 800284e:	f7fe fa99 	bl	8000d84 <HAL_LCD_Write>
		HAL_LCD_Write(&hlcd, 2, ~0x00300c00, ((ram2 & 0x3) << 10 ) | ((ram2 & 0xc) << 18));
 8002852:	7bbb      	ldrb	r3, [r7, #14]
 8002854:	029b      	lsls	r3, r3, #10
 8002856:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800285a:	7bbb      	ldrb	r3, [r7, #14]
 800285c:	049b      	lsls	r3, r3, #18
 800285e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002862:	4313      	orrs	r3, r2
 8002864:	4a2e      	ldr	r2, [pc, #184]	; (8002920 <LCD_WriteChar+0x220>)
 8002866:	2102      	movs	r1, #2
 8002868:	482b      	ldr	r0, [pc, #172]	; (8002918 <LCD_WriteChar+0x218>)
 800286a:	f7fe fa8b 	bl	8000d84 <HAL_LCD_Write>
		break;
 800286e:	e045      	b.n	80028fc <LCD_WriteChar+0x1fc>
	case 5:
		HAL_LCD_Write(&hlcd, 0, ~0x000c3000, ((ram0 & 0x3) << 12 ) | ((ram0 & 0xc) << 16));
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	031b      	lsls	r3, r3, #12
 8002874:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002880:	4313      	orrs	r3, r2
 8002882:	f46f 2243 	mvn.w	r2, #798720	; 0xc3000
 8002886:	2100      	movs	r1, #0
 8002888:	4823      	ldr	r0, [pc, #140]	; (8002918 <LCD_WriteChar+0x218>)
 800288a:	f7fe fa7b 	bl	8000d84 <HAL_LCD_Write>
		HAL_LCD_Write(&hlcd, 2, ~0x000c3000, ((ram2 & 0x3) << 12 ) | ((ram2 & 0xc) << 16));
 800288e:	7bbb      	ldrb	r3, [r7, #14]
 8002890:	031b      	lsls	r3, r3, #12
 8002892:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8002896:	7bbb      	ldrb	r3, [r7, #14]
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800289e:	4313      	orrs	r3, r2
 80028a0:	f46f 2243 	mvn.w	r2, #798720	; 0xc3000
 80028a4:	2102      	movs	r1, #2
 80028a6:	481c      	ldr	r0, [pc, #112]	; (8002918 <LCD_WriteChar+0x218>)
 80028a8:	f7fe fa6c 	bl	8000d84 <HAL_LCD_Write>
		break;
 80028ac:	e026      	b.n	80028fc <LCD_WriteChar+0x1fc>
	case 6:
		HAL_LCD_Write(&hlcd, 0, ~0x0003c000, ((ram0 & 0x3) << 14 ) | ((ram0 & 0x4) << 15) | ((ram0 & 0x8) << 13));
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	039b      	lsls	r3, r3, #14
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	03db      	lsls	r3, r3, #15
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	431a      	orrs	r2, r3
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	035b      	lsls	r3, r3, #13
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f46f 3270 	mvn.w	r2, #245760	; 0x3c000
 80028cc:	2100      	movs	r1, #0
 80028ce:	4812      	ldr	r0, [pc, #72]	; (8002918 <LCD_WriteChar+0x218>)
 80028d0:	f7fe fa58 	bl	8000d84 <HAL_LCD_Write>
		HAL_LCD_Write(&hlcd, 2, ~0x0003c000, ((ram2 & 0x3) << 14 ) | ((ram2 & 0x4) << 15) | ((ram2 & 0x8) << 13));
 80028d4:	7bbb      	ldrb	r3, [r7, #14]
 80028d6:	039b      	lsls	r3, r3, #14
 80028d8:	b29a      	uxth	r2, r3
 80028da:	7bbb      	ldrb	r3, [r7, #14]
 80028dc:	03db      	lsls	r3, r3, #15
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	431a      	orrs	r2, r3
 80028e4:	7bbb      	ldrb	r3, [r7, #14]
 80028e6:	035b      	lsls	r3, r3, #13
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f46f 3270 	mvn.w	r2, #245760	; 0x3c000
 80028f2:	2102      	movs	r1, #2
 80028f4:	4808      	ldr	r0, [pc, #32]	; (8002918 <LCD_WriteChar+0x218>)
 80028f6:	f7fe fa45 	bl	8000d84 <HAL_LCD_Write>
		break;
 80028fa:	bf00      	nop

	}
	HAL_LCD_UpdateDisplayRequest(&hlcd);
 80028fc:	4806      	ldr	r0, [pc, #24]	; (8002918 <LCD_WriteChar+0x218>)
 80028fe:	f7fe faa0 	bl	8000e42 <HAL_LCD_UpdateDisplayRequest>
 8002902:	e002      	b.n	800290a <LCD_WriteChar+0x20a>
		return;
 8002904:	bf00      	nop
 8002906:	e000      	b.n	800290a <LCD_WriteChar+0x20a>
		return;
 8002908:	bf00      	nop
}
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	0800304c 	.word	0x0800304c
 8002914:	cffffffc 	.word	0xcffffffc
 8002918:	20000044 	.word	0x20000044
 800291c:	f3ffff7b 	.word	0xf3ffff7b
 8002920:	ffcff3ff 	.word	0xffcff3ff

08002924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002928:	f7fd fc28 	bl	800017c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800292c:	f000 f824 	bl	8002978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002930:	f000 f942 	bl	8002bb8 <MX_GPIO_Init>
  MX_ADC_Init();
 8002934:	f000 f888 	bl	8002a48 <MX_ADC_Init>
  MX_LCD_Init();
 8002938:	f000 f8de 	bl	8002af8 <MX_LCD_Init>
  MX_TS_Init();
 800293c:	f000 f936 	bl	8002bac <MX_TS_Init>
  MX_RTC_Init();
 8002940:	f000 f90e 	bl	8002b60 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
LCD_WriteChar(1, '1');
 8002944:	2131      	movs	r1, #49	; 0x31
 8002946:	2001      	movs	r0, #1
 8002948:	f7ff feda 	bl	8002700 <LCD_WriteChar>
LCD_WriteChar(2, '2');
 800294c:	2132      	movs	r1, #50	; 0x32
 800294e:	2002      	movs	r0, #2
 8002950:	f7ff fed6 	bl	8002700 <LCD_WriteChar>
LCD_WriteChar(3, '3');
 8002954:	2133      	movs	r1, #51	; 0x33
 8002956:	2003      	movs	r0, #3
 8002958:	f7ff fed2 	bl	8002700 <LCD_WriteChar>
LCD_WriteChar(4, '4');
 800295c:	2134      	movs	r1, #52	; 0x34
 800295e:	2004      	movs	r0, #4
 8002960:	f7ff fece 	bl	8002700 <LCD_WriteChar>
LCD_WriteChar(5, '5');
 8002964:	2135      	movs	r1, #53	; 0x35
 8002966:	2005      	movs	r0, #5
 8002968:	f7ff feca 	bl	8002700 <LCD_WriteChar>
LCD_WriteChar(6, '6');
 800296c:	2136      	movs	r1, #54	; 0x36
 800296e:	2006      	movs	r0, #6
 8002970:	f7ff fec6 	bl	8002700 <LCD_WriteChar>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002974:	e7fe      	b.n	8002974 <main+0x50>
	...

08002978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b096      	sub	sp, #88	; 0x58
 800297c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002982:	2234      	movs	r2, #52	; 0x34
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fb4c 	bl	8003024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a6:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <SystemClock_Config+0xcc>)
 80029a8:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <SystemClock_Config+0xcc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80029b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029b4:	6013      	str	r3, [r2, #0]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80029b6:	2306      	movs	r3, #6
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029ba:	2301      	movs	r3, #1
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029be:	2301      	movs	r3, #1
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029c2:	2310      	movs	r3, #16
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029c6:	2302      	movs	r3, #2
 80029c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029ca:	2300      	movs	r3, #0
 80029cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80029ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80029d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80029d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fa8e 	bl	8000f00 <HAL_RCC_OscConfig>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <SystemClock_Config+0x76>
  {
    Error_Handler();
 80029ea:	f000 f957 	bl	8002c9c <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ee:	230f      	movs	r3, #15
 80029f0:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f2:	2303      	movs	r3, #3
 80029f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	2101      	movs	r1, #1
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff f9f3 	bl	8001df4 <HAL_RCC_ClockConfig>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002a14:	f000 f942 	bl	8002c9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LCD;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a20:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a26:	60fb      	str	r3, [r7, #12]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fca2 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a36:	f000 f931 	bl	8002c9c <Error_Handler>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	3758      	adds	r7, #88	; 0x58
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40007000 	.word	0x40007000

08002a48 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a5a:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <MX_ADC_Init+0xac>)
 8002a5c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002a64:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ab6:	480e      	ldr	r0, [pc, #56]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002ab8:	f7fd fba2 	bl	8000200 <HAL_ADC_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8002ac2:	f000 f8eb 	bl	8002c9c <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4806      	ldr	r0, [pc, #24]	; (8002af0 <MX_ADC_Init+0xa8>)
 8002ad8:	f7fd fcd0 	bl	800047c <HAL_ADC_ConfigChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_ADC_Init+0x9e>
  {
    Error_Handler();
 8002ae2:	f000 f8db 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000080 	.word	0x20000080
 8002af4:	40012400 	.word	0x40012400

08002af8 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <MX_LCD_Init+0x60>)
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <MX_LCD_Init+0x64>)
 8002b00:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b10:	220c      	movs	r2, #12
 8002b12:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8002b20:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_4;
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_ENABLE;
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8002b38:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8002b44:	4804      	ldr	r0, [pc, #16]	; (8002b58 <MX_LCD_Init+0x60>)
 8002b46:	f7fe f861 	bl	8000c0c <HAL_LCD_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_LCD_Init+0x5c>
  {
    Error_Handler();
 8002b50:	f000 f8a4 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000044 	.word	0x20000044
 8002b5c:	40002400 	.word	0x40002400

08002b60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b66:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <MX_RTC_Init+0x48>)
 8002b68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b72:	227f      	movs	r2, #127	; 0x7f
 8002b74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b78:	22ff      	movs	r2, #255	; 0xff
 8002b7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b8e:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b90:	f7ff fd0e 	bl	80025b0 <HAL_RTC_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002b9a:	f000 f87f 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000024 	.word	0x20000024
 8002ba8:	40002800 	.word	0x40002800

08002bac <MX_TS_Init>:
  * @brief TS Initialization Function
  * @param None
  * @retval None
  */
static void MX_TS_Init(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END TS_Init 1 */
  /* USER CODE BEGIN TS_Init 2 */

  /* USER CODE END TS_Init 2 */

}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbe:	f107 030c 	add.w	r3, r7, #12
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bce:	4a2e      	ldr	r2, [pc, #184]	; (8002c88 <MX_GPIO_Init+0xd0>)
 8002bd0:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <MX_GPIO_Init+0xd0>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	61d3      	str	r3, [r2, #28]
 8002bda:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <MX_GPIO_Init+0xd0>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be6:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <MX_GPIO_Init+0xd0>)
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <MX_GPIO_Init+0xd0>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	61d3      	str	r3, [r2, #28]
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <MX_GPIO_Init+0xd0>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <MX_GPIO_Init+0xd0>)
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <MX_GPIO_Init+0xd0>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	61d3      	str	r3, [r2, #28]
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <MX_GPIO_Init+0xd0>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_SET);
 8002c16:	2201      	movs	r2, #1
 8002c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c1c:	481b      	ldr	r0, [pc, #108]	; (8002c8c <MX_GPIO_Init+0xd4>)
 8002c1e:	f7fd ffdd 	bl	8000bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002c22:	2200      	movs	r2, #0
 8002c24:	21c0      	movs	r1, #192	; 0xc0
 8002c26:	481a      	ldr	r0, [pc, #104]	; (8002c90 <MX_GPIO_Init+0xd8>)
 8002c28:	f7fd ffd8 	bl	8000bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IDD_CNT_EN_Pin */
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
 8002c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c32:	2301      	movs	r3, #1
 8002c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IDD_CNT_EN_GPIO_Port, &GPIO_InitStruct);
 8002c3e:	f107 030c 	add.w	r3, r7, #12
 8002c42:	4619      	mov	r1, r3
 8002c44:	4811      	ldr	r0, [pc, #68]	; (8002c8c <MX_GPIO_Init+0xd4>)
 8002c46:	f7fd fe4b 	bl	80008e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c4e:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <MX_GPIO_Init+0xdc>)
 8002c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	480e      	ldr	r0, [pc, #56]	; (8002c98 <MX_GPIO_Init+0xe0>)
 8002c5e:	f7fd fe3f 	bl	80008e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002c62:	23c0      	movs	r3, #192	; 0xc0
 8002c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c66:	2301      	movs	r3, #1
 8002c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c72:	f107 030c 	add.w	r3, r7, #12
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_GPIO_Init+0xd8>)
 8002c7a:	f7fd fe31 	bl	80008e0 <HAL_GPIO_Init>

}
 8002c7e:	bf00      	nop
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020400 	.word	0x40020400
 8002c94:	10120000 	.word	0x10120000
 8002c98:	40020000 	.word	0x40020000

08002c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002cae:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cb8:	6253      	str	r3, [r2, #36]	; 0x24
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc6:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6213      	str	r3, [r2, #32]
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <HAL_MspInit+0x5c>)
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_MspInit+0x5c>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	6253      	str	r3, [r2, #36]	; 0x24
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	607b      	str	r3, [r7, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002cf6:	2007      	movs	r0, #7
 8002cf8:	f7fd fdbe 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40023800 	.word	0x40023800

08002d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <HAL_ADC_MspInit+0x74>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d123      	bne.n	8002d72 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d2a:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <HAL_ADC_MspInit+0x78>)
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_ADC_MspInit+0x78>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d34:	6213      	str	r3, [r2, #32]
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_ADC_MspInit+0x78>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	4a0f      	ldr	r2, [pc, #60]	; (8002d80 <HAL_ADC_MspInit+0x78>)
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_ADC_MspInit+0x78>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	61d3      	str	r3, [r2, #28]
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <HAL_ADC_MspInit+0x78>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4805      	ldr	r0, [pc, #20]	; (8002d84 <HAL_ADC_MspInit+0x7c>)
 8002d6e:	f7fd fdb7 	bl	80008e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d72:	bf00      	nop
 8002d74:	3728      	adds	r7, #40	; 0x28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40012400 	.word	0x40012400
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40020000 	.word	0x40020000

08002d88 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a34      	ldr	r2, [pc, #208]	; (8002e78 <HAL_LCD_MspInit+0xf0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d162      	bne.n	8002e70 <HAL_LCD_MspInit+0xe8>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8002daa:	4a34      	ldr	r2, [pc, #208]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002dac:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db4:	6253      	str	r3, [r2, #36]	; 0x24
 8002db6:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dc2:	4a2e      	ldr	r2, [pc, #184]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	61d3      	str	r3, [r2, #28]
 8002dce:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dda:	4a28      	ldr	r2, [pc, #160]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002ddc:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	61d3      	str	r3, [r2, #28]
 8002de6:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df2:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002df4:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	61d3      	str	r3, [r2, #28]
 8002dfe:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <HAL_LCD_MspInit+0xf4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB8     ------> LCD_SEG16
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin 
 8002e0a:	f640 73cf 	movw	r3, #4047	; 0xfcf
 8002e0e:	61fb      	str	r3, [r7, #28]
                          |SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin 
                          |SEG22_Pin|SEG23_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002e1c:	230b      	movs	r3, #11
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e20:	f107 031c 	add.w	r3, r7, #28
 8002e24:	4619      	mov	r1, r3
 8002e26:	4816      	ldr	r0, [pc, #88]	; (8002e80 <HAL_LCD_MspInit+0xf8>)
 8002e28:	f7fd fd5a 	bl	80008e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin 
 8002e2c:	f248 730e 	movw	r3, #34574	; 0x870e
 8002e30:	61fb      	str	r3, [r7, #28]
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002e3e:	230b      	movs	r3, #11
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 031c 	add.w	r3, r7, #28
 8002e46:	4619      	mov	r1, r3
 8002e48:	480e      	ldr	r0, [pc, #56]	; (8002e84 <HAL_LCD_MspInit+0xfc>)
 8002e4a:	f7fd fd49 	bl	80008e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin 
 8002e4e:	f64f 7338 	movw	r3, #65336	; 0xff38
 8002e52:	61fb      	str	r3, [r7, #28]
                          |SEG10_Pin|SEG11_Pin|SEG3_Pin|SEG4_Pin 
                          |SEG5_Pin|SEG13_Pin|COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002e60:	230b      	movs	r3, #11
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e64:	f107 031c 	add.w	r3, r7, #28
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4807      	ldr	r0, [pc, #28]	; (8002e88 <HAL_LCD_MspInit+0x100>)
 8002e6c:	f7fd fd38 	bl	80008e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8002e70:	bf00      	nop
 8002e72:	3730      	adds	r7, #48	; 0x30
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40002400 	.word	0x40002400
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40020800 	.word	0x40020800
 8002e84:	40020000 	.word	0x40020000
 8002e88:	40020400 	.word	0x40020400

08002e8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <HAL_RTC_MspInit+0x40>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d110      	bne.n	8002ec0 <HAL_RTC_MspInit+0x34>
 8002e9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8002eac:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RTC_MspInit+0x44>)
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40002800 	.word	0x40002800
 8002ed0:	1091c1a0 	.word	0x1091c1a0

08002ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <HardFault_Handler+0x4>

08002ee6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eea:	e7fe      	b.n	8002eea <MemManage_Handler+0x4>

08002eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ef0:	e7fe      	b.n	8002ef0 <BusFault_Handler+0x4>

08002ef2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ef6:	e7fe      	b.n	8002ef6 <UsageFault_Handler+0x4>

08002ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f20:	f7fd f956 	bl	80001d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002f2c:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <SystemInit+0x5c>)
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <SystemInit+0x5c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f36:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002f38:	4912      	ldr	r1, [pc, #72]	; (8002f84 <SystemInit+0x5c>)
 8002f3a:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <SystemInit+0x5c>)
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <SystemInit+0x60>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002f44:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <SystemInit+0x5c>)
 8002f46:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <SystemInit+0x5c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002f4e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8002f52:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f54:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <SystemInit+0x5c>)
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <SystemInit+0x5c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002f60:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <SystemInit+0x5c>)
 8002f62:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <SystemInit+0x5c>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8002f6a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <SystemInit+0x5c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <SystemInit+0x64>)
 8002f74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f78:	609a      	str	r2, [r3, #8]
#endif
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	88ffc00c 	.word	0x88ffc00c
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f92:	e003      	b.n	8002f9c <LoopCopyDataInit>

08002f94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f9a:	3104      	adds	r1, #4

08002f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f9c:	480a      	ldr	r0, [pc, #40]	; (8002fc8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002fa0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002fa2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002fa4:	d3f6      	bcc.n	8002f94 <CopyDataInit>
  ldr r2, =_sbss
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002fa8:	e002      	b.n	8002fb0 <LoopFillZerobss>

08002faa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002faa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002fac:	f842 3b04 	str.w	r3, [r2], #4

08002fb0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002fb2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002fb4:	d3f9      	bcc.n	8002faa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fb6:	f7ff ffb7 	bl	8002f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fba:	f000 f80f 	bl	8002fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fbe:	f7ff fcb1 	bl	8002924 <main>
  bx lr
 8002fc2:	4770      	bx	lr
  ldr r3, =_sidata
 8002fc4:	08003084 	.word	0x08003084
  ldr r0, =_sdata
 8002fc8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002fcc:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8002fd0:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8002fd4:	200000d4 	.word	0x200000d4

08002fd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fd8:	e7fe      	b.n	8002fd8 <ADC1_IRQHandler>
	...

08002fdc <__libc_init_array>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	2500      	movs	r5, #0
 8002fe0:	4e0c      	ldr	r6, [pc, #48]	; (8003014 <__libc_init_array+0x38>)
 8002fe2:	4c0d      	ldr	r4, [pc, #52]	; (8003018 <__libc_init_array+0x3c>)
 8002fe4:	1ba4      	subs	r4, r4, r6
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	42a5      	cmp	r5, r4
 8002fea:	d109      	bne.n	8003000 <__libc_init_array+0x24>
 8002fec:	f000 f822 	bl	8003034 <_init>
 8002ff0:	2500      	movs	r5, #0
 8002ff2:	4e0a      	ldr	r6, [pc, #40]	; (800301c <__libc_init_array+0x40>)
 8002ff4:	4c0a      	ldr	r4, [pc, #40]	; (8003020 <__libc_init_array+0x44>)
 8002ff6:	1ba4      	subs	r4, r4, r6
 8002ff8:	10a4      	asrs	r4, r4, #2
 8002ffa:	42a5      	cmp	r5, r4
 8002ffc:	d105      	bne.n	800300a <__libc_init_array+0x2e>
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003004:	4798      	blx	r3
 8003006:	3501      	adds	r5, #1
 8003008:	e7ee      	b.n	8002fe8 <__libc_init_array+0xc>
 800300a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800300e:	4798      	blx	r3
 8003010:	3501      	adds	r5, #1
 8003012:	e7f2      	b.n	8002ffa <__libc_init_array+0x1e>
 8003014:	0800307c 	.word	0x0800307c
 8003018:	0800307c 	.word	0x0800307c
 800301c:	0800307c 	.word	0x0800307c
 8003020:	08003080 	.word	0x08003080

08003024 <memset>:
 8003024:	4603      	mov	r3, r0
 8003026:	4402      	add	r2, r0
 8003028:	4293      	cmp	r3, r2
 800302a:	d100      	bne.n	800302e <memset+0xa>
 800302c:	4770      	bx	lr
 800302e:	f803 1b01 	strb.w	r1, [r3], #1
 8003032:	e7f9      	b.n	8003028 <memset+0x4>

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
